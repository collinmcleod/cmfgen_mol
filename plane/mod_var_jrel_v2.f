	MODULE MOD_VAR_JREL_V2
	USE SET_KIND_MODULE
	IMPLICIT NONE
!
! These vectors must be saved as they will be used on subsequent iterations.
!
	REAL(KIND=LDP), ALLOCATABLE :: AV_SIGMA(:)
	REAL(KIND=LDP), ALLOCATABLE :: BETA(:)
	REAL(KIND=LDP), ALLOCATABLE :: BETA_FREQ(:)
	REAL(KIND=LDP), ALLOCATABLE :: GAM_RSQ(:)
	REAL(KIND=LDP), ALLOCATABLE :: GAM_REL(:)
	REAL(KIND=LDP), ALLOCATABLE :: GAM_REL_SQ(:)
	REAL(KIND=LDP), ALLOCATABLE :: CON_DELTA(:)
	REAL(KIND=LDP), ALLOCATABLE :: CON_DELTAH(:)
	REAL(KIND=LDP), ALLOCATABLE :: CON_dKdNUH(:)
	REAL(KIND=LDP), ALLOCATABLE :: CON_dNdNUH(:)
	REAL(KIND=LDP), ALLOCATABLE :: CON_dKdNU(:)
	REAL(KIND=LDP), ALLOCATABLE :: CON_dHdNU(:)
!
	REAL(KIND=LDP), ALLOCATABLE :: JNU(:)
	REAL(KIND=LDP), ALLOCATABLE :: JNU_PREV(:)
        REAL(KIND=LDP), ALLOCATABLE :: GAM_RSQHNU(:)
        REAL(KIND=LDP), ALLOCATABLE :: GAM_RSQHNU_PREV(:)
!
	REAL(KIND=LDP), ALLOCATABLE :: TA(:),TB(:),TC(:)
	REAL(KIND=LDP), ALLOCATABLE :: CHI_H(:),CHI_J(:)
	REAL(KIND=LDP), ALLOCATABLE :: DTAU_H(:),DTAU_J(:)
	REAL(KIND=LDP), ALLOCATABLE :: GAM_RSQ_DTAUONQ(:)
	REAL(KIND=LDP), ALLOCATABLE :: Q(:),XM(:),SOURCE(:)
	REAL(KIND=LDP), ALLOCATABLE :: VB(:),VC(:),COH_VEC(:)
	REAL(KIND=LDP), ALLOCATABLE :: HU(:),HL(:),HS(:),HD(:)
	REAL(KIND=LDP), ALLOCATABLE :: P_H(:),P_J(:)
	REAL(KIND=LDP), ALLOCATABLE :: VdJdR_TERM(:),VdHdR_TERM(:)
	REAL(KIND=LDP), ALLOCATABLE :: DELTA(:),DELTAH(:)
	REAL(KIND=LDP), ALLOCATABLE :: W(:),WPREV(:)
	REAL(KIND=LDP), ALLOCATABLE :: PSI(:),PSIPREV(:),PSIPREV_MOD(:)
	REAL(KIND=LDP), ALLOCATABLE :: EPS_A(:),EPS_B(:)
	REAL(KIND=LDP), ALLOCATABLE :: EPS_PREV_A(:),EPS_PREV_B(:)
	REAL(KIND=LDP), ALLOCATABLE :: GAM_RSQJNU_PREV(:)
	REAL(KIND=LDP), ALLOCATABLE :: TA_SAV(:),TB_SAV(:),TC_SAV(:),XM_SAV(:)
!
	REAL(KIND=LDP), ALLOCATABLE :: TX_OLD_d_T(:)
	REAL(KIND=LDP), ALLOCATABLE :: TX_OLD_d_dTdR(:)
!
! These vectors are used by EDD_JREL_VAR_V1
!
	REAL(KIND=LDP), ALLOCATABLE :: dTAUdCHI_H(:,:)
	REAL(KIND=LDP), ALLOCATABLE :: dTAUdCHI_J(:,:)
	REAL(KIND=LDP), ALLOCATABLE :: dHUdCHI(:)
	REAL(KIND=LDP), ALLOCATABLE :: dHLdCHI(:)
	REAL(KIND=LDP), ALLOCATABLE :: dHSdCHI(:)
	REAL(KIND=LDP), ALLOCATABLE :: dHUdTAU(:)
	REAL(KIND=LDP), ALLOCATABLE :: dHLdTAU(:)
	REAL(KIND=LDP), ALLOCATABLE :: EPS_FAC(:)
	REAL(KIND=LDP), ALLOCATABLE :: dRHSdI(:)
	REAL(KIND=LDP), ALLOCATABLE :: dRHSdJ(:)
	REAL(KIND=LDP), ALLOCATABLE :: DERIV_SCL_FAC(:)
!
	INTEGER ND_SAV
!
	END MODULE MOD_VAR_JREL_V2
!
! Subroutine to allocate the required vectors.
!
	SUBROUTINE ALLOC_MOD_VAR_JREL_V2(ND)
	USE SET_KIND_MODULE
	USE MOD_VAR_JREL_V2
	IMPLICIT NONE
!
	INTEGER ND
	INTEGER IOS
	INTEGER LUER,ERROR_LU
	EXTERNAL ERROR_LU
!
	LUER=ERROR_LU()
!
	IF(.NOT. ALLOCATED(AV_SIGMA))THEN
!
	  ND_SAV=ND
	  ALLOCATE (AV_SIGMA(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (BETA(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (BETA_FREQ(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (GAM_RSQ(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (GAM_REL(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (GAM_REL_SQ(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CON_DELTA(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CON_DELTAH(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CON_dKdNUH(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CON_dNdNUH(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CON_dKdNU(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CON_dHdNU(ND),STAT=IOS)
	  IF(IOS .NE. 0)THEN
	    WRITE(LUER,*)'Unable to allocate memory(1) in ALLOC_MOD_J_REL'
	    WRITE(LUER,*)'STAT=',IOS
	    STOP
	  END IF
!
          IF(IOS .EQ. 0)ALLOCATE (JNU(ND),STAT=IOS)
          IF(IOS .EQ. 0)ALLOCATE (JNU_PREV(ND),STAT=IOS)
          IF(IOS .EQ. 0)ALLOCATE (GAM_RSQHNU(ND),STAT=IOS)
          IF(IOS .EQ. 0)ALLOCATE (GAM_RSQHNU_PREV(ND),STAT=IOS)
	  IF(IOS .NE. 0)THEN
	    WRITE(LUER,*)'Unable to allocate memory(2) in ALLOC_MOD_J_REL'
	    WRITE(LUER,*)'STAT=',IOS
	    STOP
	  END IF
!
	  ALLOCATE (TA(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TB(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TC(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CHI_H(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (CHI_J(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (DTAU_H(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (DTAU_J(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (GAM_RSQ_DTAUONQ(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (Q(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (XM(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (SOURCE(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (VB(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (VC(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (COH_VEC(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (HU(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (HL(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (HS(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (HD(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (P_H(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (P_J(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (VdJdR_TERM(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (VdHdR_TERM(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (DELTA(ND),STAT=IOS)
          IF(IOS .EQ. 0)ALLOCATE (DELTAH(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (W(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (WPREV(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (PSI(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (PSIPREV(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (PSIPREV_MOD(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (EPS_A(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (EPS_B(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (EPS_PREV_A(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (EPS_PREV_B(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (GAM_RSQJNU_PREV(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TX_OLD_d_T(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TX_OLD_d_dTdR(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TA_SAV(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TB_SAV(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (TC_SAV(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE (XM_SAV(ND),STAT=IOS)
	  IF(IOS .NE. 0)THEN
	    WRITE(LUER,*)'Unable to allocate memory(3) in ALLOC_MOD_VAR_JREL'
	    WRITE(LUER,*)'STAT=',IOS
	    STOP
	  END IF
!
	  IF(IOS .EQ. 0)ALLOCATE(dTAUdCHI_H(ND,ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dTAUdCHI_J(ND,ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dHUdCHI(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dHLdCHI(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dHSdCHI(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dHUdTAU(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dHLdTAU(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(EPS_FAC(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dRHSdI(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(dRHSdJ(ND),STAT=IOS)
	  IF(IOS .EQ. 0)ALLOCATE(DERIV_SCL_FAC(ND),STAT=IOS); DERIV_SCL_FAC=1.0_LDP
	  IF(IOS .NE. 0)THEN
	    WRITE(LUER,*)'Unable to allocate memory(3) in ALLOC_MOD_VAR_JREL'
	    WRITE(LUER,*)'STAT=',IOS
	    STOP
	  END IF
	END IF
!
        JNU_PREV(:)=0.0_LDP
        GAM_RSQHNU_PREV(:)=0.0_LDP
!
	IF(ND_SAV .EQ. ND)THEN
	  RETURN
	ELSE
	  WRITE(LUER,*)'Error in ALLOC_MOD_VAR_JREL'
	  WRITE(LUER,*)'At present allocation size cannot be changed'
	  WRITE(LUER,*)'Need to modify ALLOC_MOD_VAR_JREL'
	  STOP
	END IF
!
	RETURN
	END
