
add_par_to_full_v2.f

	         SE(ID)%BA_PAR(IS,IV,K)=0.0_LDP
	         SE(ID)%BA_PAR(IS,IV,K)=0.0D0

	BA_T_PAR=0.0_LDP
	BA_T_PAR=0.0D0


adjust_cmat_to_lte.f

	        C_MAT(EQ,1:NT)=0.0_LDP
	        C_MAT(EQ,1:NT)=0.0D0

	  STEQ_VEC(1:NT-1)=0.0_LDP                !As forcing LTE and number conservation.
	  STEQ_VEC(1:NT-1)=0.0D0                !As forcing LTE and number conservation.

	  C_MAT(1:NT-1,1:NT)=0.0_LDP
	  C_MAT(1:NT-1,1:NT)=0.0D0

	        C_MAT(EQ,EQ)=1.0_LDP
	        C_MAT(EQ,EQ)=1.0D0


adjust_pops.f


adjust_sn_r_grid.f

	IF(dLOGT_MAX .GT. 0 .AND. dLOGT_MAX .LT. 1._LDP)THEN
	IF(dLOGT_MAX .GT. 0 .AND. dLOGT_MAX .LT. 1.D0)THEN

	    IF(I .GT. 4)dTAU_COMP=MIN( dTAU,1.3_LDP*(LOG_TAU(I-1)-lOG_TAU(I-2)))
	    IF(I .GT. 4)dTAU_COMP=MIN( dTAU,1.3D0*(LOG_TAU(I-1)-lOG_TAU(I-2)))

	    T2=T1*LOG_OLD_TAU(J+1)+(1.0_LDP-T1)*LOG_OLD_TAU(J)
	    T2=T1*LOG_OLD_TAU(J+1)+(1.0D0-T1)*LOG_OLD_TAU(J)

	      LOG_R(I)=T1*LOG_OLD_R(J+1)+(1.0_LDP-T1)*LOG_OLD_R(J)
	      LOG_R(I)=T1*LOG_OLD_R(J+1)+(1.0D0-T1)*LOG_OLD_R(J)

	      LOG_TAU(I)=T1*LOG_OLD_TAU(J+1)+(1.0_LDP-T1)*LOG_OLD_TAU(J)
	      LOG_TAU(I)=T1*LOG_OLD_TAU(J+1)+(1.0D0-T1)*LOG_OLD_TAU(J)

	      LOG_T(I)=T1*LOG_OLD_T(J+1)+(1.0_LDP-T1)*LOG_OLD_T(J)
	      LOG_T(I)=T1*LOG_OLD_T(J+1)+(1.0D0-T1)*LOG_OLD_T(J)

	        LOG_R(I)=LOG_R(I)+0.1_LDP*(LOG_R(I-1)-LOG_R(I))
	        LOG_R(I)=LOG_R(I)+0.1D0*(LOG_R(I-1)-LOG_R(I))

	        LOG_TAU(I)=T1*LOG_OLD_TAU(J+1)+(1.0_LDP-T1)*LOG_OLD_TAU(J)
	        LOG_TAU(I)=T1*LOG_OLD_TAU(J+1)+(1.0D0-T1)*LOG_OLD_TAU(J)

	        LOG_T(I)=T1*LOG_OLD_T(J+1)+(1.0_LDP-T1)*LOG_OLD_T(J)
	        LOG_T(I)=T1*LOG_OLD_T(J+1)+(1.0D0-T1)*LOG_OLD_T(J)

	      LOG_T(I)=T1*LOG_OLD_T(J+1)+(1.0_LDP-T1)*LOG_OLD_T(J)
	      LOG_T(I)=T1*LOG_OLD_T(J+1)+(1.0D0-T1)*LOG_OLD_T(J)

	    IF(I .NE. 1)T1=(TAU(I+1)-TAU(I))/MAX(TAU(I)-TAU(I-1),1.0E-10_LDP)
	    IF(I .NE. 1)T1=(TAU(I+1)-TAU(I))/MAX(TAU(I)-TAU(I-1),1.0D-10)

	    XN(I)=1.0_LDP+(I-1.0_LDP)*(ND_TMP-1.0_LDP)/(J-1.0_LDP)
	    XN(I)=1.0D0+(I-1.0D0)*(ND_TMP-1.0D0)/(J-1.0D0)

	IF(N_IB_INS .EQ. 1 .AND. IB_RAT .EQ. 0.0_LDP)THEN
	IF(N_IB_INS .EQ. 1 .AND. IB_RAT .EQ. 0.0D0)THEN

	  LOG_R(I)=LOG_OLD_R(NS)+0.2_LDP*T1
	  LOG_R(I)=LOG_OLD_R(NS)+0.2D0*T1

	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.2_LDP*T2
	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.2D0*T2

	ELSE IF(N_IB_INS .EQ. 2 .AND. IB_RAT .EQ. 0.0_LDP)THEN
	ELSE IF(N_IB_INS .EQ. 2 .AND. IB_RAT .EQ. 0.0D0)THEN

	  LOG_R(I+1)=LOG_OLD_R(NS)+0.1_LDP*T1     !0.1D0
	  LOG_R(I+1)=LOG_OLD_R(NS)+0.1D0*T1     !0.1D0

	  LOG_R(I)=LOG_OLD_R(NS)+0.4_LDP*T1      !0.4D0
	  LOG_R(I)=LOG_OLD_R(NS)+0.4D0*T1      !0.4D0

	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.1_LDP*T2     !0.1D0
	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.1D0*T2     !0.1D0

	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4_LDP*T2      !0.4D0
	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4D0*T2      !0.4D0

	ELSE IF(N_IB_INS .EQ. 3 .AND. IB_RAT .EQ. 0.0_LDP)THEN
	ELSE IF(N_IB_INS .EQ. 3 .AND. IB_RAT .EQ. 0.0D0)THEN

	  LOG_R(I+2)=LOG_OLD_R(NS)+0.06_LDP*T1
	  LOG_R(I+2)=LOG_OLD_R(NS)+0.06D0*T1

	  LOG_R(I+1)=LOG_OLD_R(NS)+0.16_LDP*T1
	  LOG_R(I+1)=LOG_OLD_R(NS)+0.16D0*T1

	  LOG_R(I)=LOG_OLD_R(NS)+0.4_LDP*T1
	  LOG_R(I)=LOG_OLD_R(NS)+0.4D0*T1

	  LOG_TAU(I+2)=LOG_OLD_TAU(NS)+0.06_LDP*T2
	  LOG_TAU(I+2)=LOG_OLD_TAU(NS)+0.06D0*T2

	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.16_LDP*T2
	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.16D0*T2

	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4_LDP*T2
	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4D0*T2

	IF(DTAU2_ON_DTAU1 .LT. 2.0_LDP)K=1
	IF(DTAU2_ON_DTAU1 .LT. 2.0D0)K=1

	T1=0.0_LDP
	T1=0.0D0

	  IF(I .NE. 1)T1=(TAU(I+1)-TAU(I))/MAX(TAU(I)-TAU(I-1),1.0E-10_LDP)
	  IF(I .NE. 1)T1=(TAU(I+1)-TAU(I))/MAX(TAU(I)-TAU(I-1),1.0D-10)


allocate_wse_arrays.f


auto_add_ion.f


auto_clump_rev.f

	  IF(CLUMP_PAR(3) .EQ. 0.0_LDP)CLUMP_PAR(4)=1.0_LDP
	  IF(CLUMP_PAR(3) .EQ. 0.0D0)CLUMP_PAR(4)=1.0D0

	    CLUMP_FAC(K)=CLUMP_PAR(1)+(1.0_LDP-CLUMP_PAR(1)-CLUMP_PAR(3))*
	    CLUMP_FAC(K)=CLUMP_PAR(1)+(1.0D0-CLUMP_PAR(1)-CLUMP_PAR(3))*

	    CLUMP_FAC(K)=CLUMP_PAR(1)+(1.0_LDP-CLUMP_PAR(1))*
	    CLUMP_FAC(K)=CLUMP_PAR(1)+(1.0D0-CLUMP_PAR(1))*

	1           (1.0_LDP-CLUMP_PAR(1))*EXP( (V(K)-V(1))/CLUMP_PAR(3))
	1           (1.0D0-CLUMP_PAR(1))*EXP( (V(K)-V(1))/CLUMP_PAR(3))

	    CLUMP_FAC(K)=CLUMP_PAR(1)+(1.0_LDP-CLUMP_PAR(1))*
	    CLUMP_FAC(K)=CLUMP_PAR(1)+(1.0D0-CLUMP_PAR(1))*


ba_ehb_bf_update_v1.f

	PC=1.0E+15_LDP*PLANCKS_CONSTANT()
	PC=1.0D+15*PLANCKS_CONSTANT()


ba_ehb_ff_update_v1.f

	FOUR_PI=16.0_LDP*ATAN(1.0_LDP)
	FOUR_PI=16.0D0*ATAN(1.0D0)

	T1=1.0E-10_LDP*FOUR_PI*FQW
	T1=1.0D-10*FOUR_PI*FQW


ba_replace_v2.f

	FAC=1.0E+05_LDP
	FAC=1.0D+05

 	  T1=0.0_LDP
 	  T1=0.0D0


ba_update_v6.f

	IF(dJ_CHK_FAC .LT. 1.0E-10_LDP .OR. dJ_CHK_FAC .GT. 0.1_LDP)THEN
	IF(dJ_CHK_FAC .LT. 1.0D-10 .OR. dJ_CHK_FAC .GT. 0.1D0)THEN

	            IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
	            IF( COMP_VEC(J) .GE. 0.0D0 )THEN

	            IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
	            IF( COMP_VEC(J) .GE. 0.0D0 )THEN

                    IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
                    IF( COMP_VEC(J) .GE. 0.0D0 )THEN

                    IF( COMP_VEC(J) .GE. 0.0_LDP)THEN
                    IF( COMP_VEC(J) .GE. 0.0D0)THEN


ba_update_v7.f

	IF(dJ_CHK_FAC .LT. 1.0E-10_LDP .OR. dJ_CHK_FAC .GT. 0.1_LDP)THEN
	IF(dJ_CHK_FAC .LT. 1.0D-10 .OR. dJ_CHK_FAC .GT. 0.1D0)THEN

	              IF( COMP_VEC(J,K,L) .GE. 0.0_LDP )THEN
	              IF( COMP_VEC(J,K,L) .GE. 0.0D0 )THEN

	              IF( COMP_VEC(J,K,L) .GE. 0.0_LDP )THEN
	              IF( COMP_VEC(J,K,L) .GE. 0.0D0 )THEN

                  IF( COMP_VEC(J,K,L) .GE. 0.0_LDP )THEN
                  IF( COMP_VEC(J,K,L) .GE. 0.0D0 )THEN

                      IF( COMP_VEC(J,K,L) .GE. 0.0_LDP)THEN
                      IF( COMP_VEC(J,K,L) .GE. 0.0D0)THEN


check_hydro_def.f


check_ions_present.f

	REAL(KIND=LDP), PARAMETER ::  LOW_LIMIT=1.0E-10_LDP
	REAL(KIND=LDP), PARAMETER ::  LOW_LIMIT=1.0D-10

	REAL(KIND=LDP), PARAMETER :: HIGH_LIMIT=1.0E-04_LDP
	REAL(KIND=LDP), PARAMETER :: HIGH_LIMIT=1.0D-04

	DATA IP(1:1,1)/    13.60_LDP/
	DATA IP(1:1,1)/    13.60/

	DATA IP(1:2,2)/    24.59_LDP,  54.42_LDP/
	DATA IP(1:2,2)/    24.59,  54.42/

	DATA IP(1:3,3)/     5.39_LDP,  75.64_LDP, 122.45_LDP/
	DATA IP(1:3,3)/     5.39,  75.64, 122.45/

	DATA IP(1:4,4)/     9.32_LDP,  18.21_LDP, 153.90_LDP, 217.72_LDP/
	DATA IP(1:4,4)/     9.32,  18.21, 153.90, 217.72/

	DATA IP(1:5,5)/     8.30_LDP,  25.16_LDP,  37.93_LDP, 259.37_LDP, 340.22_LDP/
	DATA IP(1:5,5)/     8.30,  25.16,  37.93, 259.37, 340.22/

	DATA IP(1:6,6)/    11.26_LDP,  24.38_LDP,  47.89_LDP,  64.49_LDP, 392.09_LDP, 489.99_LDP/
	DATA IP(1:6,6)/    11.26,  24.38,  47.89,  64.49, 392.09, 489.99/

	DATA IP(1:7,7)/    14.53_LDP,  29.60_LDP,  47.45_LDP,  77.47_LDP,  97.89_LDP, 552.07_LDP, 667.04_LDP/
	DATA IP(1:7,7)/    14.53,  29.60,  47.45,  77.47,  97.89, 552.07, 667.04/

	DATA IP(1:8,8)/    13.62_LDP,  35.12_LDP,  54.94_LDP,  77.41_LDP, 113.90_LDP, 138.12_LDP, 739.28_LDP, 871.41_LDP/
	DATA IP(1:8,8)/    13.62,  35.12,  54.94,  77.41, 113.90, 138.12, 739.28, 871.41/

	DATA IP(1:9,9)/    17.42_LDP,  34.97_LDP,  62.71_LDP,  87.14_LDP, 114.24_LDP, 157.16_LDP, 185.19_LDP, 953.91_LDP,1103.11_LDP/
	DATA IP(1:9,9)/    17.42,  34.97,  62.71,  87.14, 114.24, 157.16, 185.19, 953.91,1103.11/

	DATA IP(1:10,10)/  21.56_LDP,  40.96_LDP,  63.45_LDP,  97.12_LDP, 126.21_LDP, 157.93_LDP, 207.27_LDP, 239.10_LDP,1195.82_LDP,1362.20_LDP/
	DATA IP(1:10,10)/  21.56,  40.96,  63.45,  97.12, 126.21, 157.93, 207.27, 239.10,1195.82,1362.20/

	DATA IP(1:11,11)/   5.14_LDP,  47.28_LDP,  71.62_LDP,  98.91_LDP, 138.40_LDP, 172.18_LDP, 208.50_LDP, 264.25_LDP, 299.86_LDP,1465.11_LDP,1648.71_LDP/
	DATA IP(1:11,11)/   5.14,  47.28,  71.62,  98.91, 138.40, 172.18, 208.50, 264.25, 299.86,1465.11,1648.71/

	DATA IP(1:12,12)/   7.65_LDP,  15.04_LDP,  80.14_LDP, 109.27_LDP, 141.26_LDP, 186.76_LDP, 225.02_LDP, 265.96_LDP, 328.06_LDP, 367.50_LDP,1761.80_LDP,
	DATA IP(1:12,12)/   7.65,  15.04,  80.14, 109.27, 141.26, 186.76, 225.02, 265.96, 328.06, 367.50,1761.80,

	1                1962.66_LDP/
	1                1962.66/

	DATA IP(1:13,13)/   5.99_LDP,  18.83_LDP,  28.45_LDP, 119.99_LDP, 153.83_LDP, 190.48_LDP, 241.76_LDP, 284.65_LDP, 330.13_LDP, 398.74_LDP, 442.00_LDP,
	DATA IP(1:13,13)/   5.99,  18.83,  28.45, 119.99, 153.83, 190.48, 241.76, 284.65, 330.13, 398.74, 442.00,

	1                2315.02_LDP,2304.14_LDP/
	1                2315.02,2304.14/

	DATA IP(1:14,14)/   8.15_LDP,  16.35_LDP,  33.49_LDP,  45.14_LDP, 166.77_LDP, 205.26_LDP, 246.46_LDP, 303.54_LDP, 351.12_LDP, 401.37_LDP, 476.36_LDP,
	DATA IP(1:14,14)/   8.15,  16.35,  33.49,  45.14, 166.77, 205.26, 246.46, 303.54, 351.12, 401.37, 476.36,

	1                 523.42_LDP,2437.63_LDP,2673.18_LDP/
	1                 523.42,2437.63,2673.18/

	DATA IP(1:15,15)/  10.49_LDP,  19.76_LDP,  30.20_LDP,  51.44_LDP,  65.02_LDP, 220.42_LDP, 263.57_LDP, 309.60_LDP, 372.13_LDP, 424.42_LDP, 479.46_LDP,
	DATA IP(1:15,15)/  10.49,  19.76,  30.20,  51.44,  65.02, 220.42, 263.57, 309.60, 372.13, 424.42, 479.46,

	1                 560.81_LDP, 611.74_LDP,2816.91_LDP,3069.84_LDP/
	1                 560.81, 611.74,2816.91,3069.84/

	DATA IP(1:16,16)/  10.36_LDP,  23.34_LDP,  34.79_LDP,  47.22_LDP,  72.59_LDP,  88.05_LDP, 280.94_LDP, 328.74_LDP, 379.55_LDP, 447.50_LDP, 504.84_LDP,
	DATA IP(1:16,16)/  10.36,  23.34,  34.79,  47.22,  72.59,  88.05, 280.94, 328.74, 379.55, 447.50, 504.84,

	1                 564.44_LDP, 652.22_LDP, 707.01_LDP,3223.78_LDP,3494.19_LDP/
	1                 564.44, 652.22, 707.01,3223.78,3494.19/

	DATA IP(1:17,17)/  12.97_LDP,  23.82_LDP,  39.61_LDP,  53.47_LDP,  67.80_LDP,  97.03_LDP, 114.19_LDP, 348.28_LDP, 400.06_LDP, 455.62_LDP, 529.28_LDP,
	DATA IP(1:17,17)/  12.97,  23.82,  39.61,  53.47,  67.80,  97.03, 114.19, 348.28, 400.06, 455.62, 529.28,

	1                 592.00_LDP, 656.71_LDP, 749.76_LDP, 809.40_LDP,3658.52_LDP,3946.30_LDP/
	1                 592.00, 656.71, 749.76, 809.40,3658.52,3946.30/

	DATA IP(1:18,18)/  15.76_LDP,  27.63_LDP,  40.74_LDP,  59.81_LDP,  75.02_LDP,  91.01_LDP, 124.32_LDP, 143.46_LDP, 422.45_LDP, 478.68_LDP, 538.96_LDP,
	DATA IP(1:18,18)/  15.76,  27.63,  40.74,  59.81,  75.02,  91.01, 124.32, 143.46, 422.45, 478.68, 538.96,

	1                 618.26_LDP, 686.10_LDP, 755.74_LDP, 854.77_LDP, 918.03_LDP,4120.88_LDP,4426.22_LDP/
	1                 618.26, 686.10, 755.74, 854.77, 918.03,4120.88,4426.22/

	DATA IP(1:19,19)/   4.34_LDP,  31.63_LDP,  45.81_LDP,  60.91_LDP,  82.66_LDP,  99.39_LDP, 117.56_LDP, 154.88_LDP, 175.82_LDP, 503.81_LDP, 564.75_LDP,
	DATA IP(1:19,19)/   4.34,  31.63,  45.81,  60.91,  82.66,  99.39, 117.56, 154.88, 175.82, 503.81, 564.75,

	1                 629.42_LDP, 714.62_LDP, 786.65_LDP, 861.06_LDP, 968.02_LDP,1033.42_LDP,4610.85_LDP,4934.04_LDP/
	1                 629.42, 714.62, 786.65, 861.06, 968.02,1033.42,4610.85,4934.04/

	DATA IP(1:20,20)/   6.11_LDP,  11.87_LDP,  50.91_LDP,  67.27_LDP,  84.50_LDP, 108.78_LDP, 127.17_LDP, 147.23_LDP, 188.54_LDP, 211.28_LDP, 591.90_LDP,
	DATA IP(1:20,20)/   6.11,  11.87,  50.91,  67.27,  84.50, 108.78, 127.17, 147.23, 188.54, 211.28, 591.90,

	1                 657.20_LDP, 726.64_LDP, 817.64_LDP, 894.54_LDP, 974.24_LDP,1087.21_LDP,1157.80_LDP,5128.76_LDP,5469.86_LDP/
	1                 657.20, 726.64, 817.64, 894.54, 974.24,1087.21,1157.80,5128.76,5469.86/

	DATA IP(1:20,21)/   6.56_LDP,  12.80_LDP,  24.76_LDP,  73.49_LDP,  91.65_LDP, 110.68_LDP, 137.95_LDP, 158.06_LDP, 180.03_LDP, 225.17_LDP, 249.80_LDP,
	DATA IP(1:20,21)/   6.56,  12.80,  24.76,  73.49,  91.65, 110.68, 137.95, 158.06, 180.03, 225.17, 249.80,

	1                 687.36_LDP, 756.69_LDP, 830.80_LDP, 927.50_LDP,1009.48_LDP,1094.47_LDP,1212.62_LDP,1287.97_LDP,5674.75_LDP/
	1                 687.36, 756.69, 830.80, 927.50,1009.48,1094.47,1212.62,1287.97,5674.75/

	DATA IP(1:20,22)/   6.83_LDP,  13.58_LDP,  27.49_LDP,  43.27_LDP,  99.30_LDP, 119.53_LDP, 140.85_LDP, 170.39_LDP, 192.05_LDP, 215.92_LDP, 265.07_LDP,
	DATA IP(1:20,22)/   6.83,  13.58,  27.49,  43.27,  99.30, 119.53, 140.85, 170.39, 192.05, 215.92, 265.07,

	1                 291.49_LDP, 787.84_LDP, 863.14_LDP, 941.90_LDP,1043.68_LDP,1130.74_LDP,1220.91_LDP,1346.32_LDP,1425.40_LDP/
	1                 291.49, 787.84, 863.14, 941.90,1043.68,1130.74,1220.91,1346.32,1425.40/

	DATA IP(1:20,23)/   6.75_LDP,  14.66_LDP,  29.33_LDP,  46.71_LDP,  65.28_LDP, 128.13_LDP, 150.59_LDP, 173.39_LDP, 205.83_LDP, 230.50_LDP, 255.69_LDP,
	DATA IP(1:20,23)/   6.75,  14.66,  29.33,  46.71,  65.28, 128.13, 150.59, 173.39, 205.83, 230.50, 255.69,

	1                 308.13_LDP, 336.28_LDP, 895.99_LDP, 976.00_LDP,1060.26_LDP,1168.05_LDP,1260.29_LDP,1354.61_LDP,1486.24_LDP/
	1                 308.13, 336.28, 895.99, 976.00,1060.26,1168.05,1260.29,1354.61,1486.24/

	DATA IP(1:20,24)/   6.77_LDP,  16.49_LDP,  30.96_LDP,  49.16_LDP,  69.46_LDP,  90.63_LDP, 160.18_LDP, 184.69_LDP, 209.25_LDP, 244.39_LDP, 270.82_LDP,
	DATA IP(1:20,24)/   6.77,  16.49,  30.96,  49.16,  69.46,  90.63, 160.18, 184.69, 209.25, 244.39, 270.82,

	1                 297.97_LDP, 354.77_LDP, 384.16_LDP,1010.62_LDP,1096.54_LDP,1184.64_LDP,1298.64_LDP,1396.07_LDP,1495.56_LDP/
	1                 297.97, 354.77, 384.16,1010.62,1096.54,1184.64,1298.64,1396.07,1495.56/

	DATA IP(1:20,25)/   7.43_LDP,  15.64_LDP,  33.66_LDP,  51.20_LDP,  72.45_LDP,  95.56_LDP, 119.19_LDP, 194.54_LDP, 221.80_LDP, 248.33_LDP, 285.95_LDP,
	DATA IP(1:20,25)/   7.43,  15.64,  33.66,  51.20,  72.45,  95.56, 119.19, 194.54, 221.80, 248.33, 285.95,

	1                 314.35_LDP, 343.58_LDP, 402.96_LDP, 435.16_LDP,1134.68_LDP,1224.02_LDP,1317.30_LDP,1436.49_LDP,1539.09_LDP/
	1                 314.35, 343.58, 402.96, 435.16,1134.68,1224.02,1317.30,1436.49,1539.09/

	DATA IP(1:20,26)/   7.90_LDP,  16.19_LDP,  30.65_LDP,  54.83_LDP,  75.04_LDP,  99.08_LDP, 124.99_LDP, 151.11_LDP, 233.61_LDP, 262.11_LDP, 290.20_LDP,
	DATA IP(1:20,26)/   7.90,  16.19,  30.65,  54.83,  75.04,  99.08, 124.99, 151.11, 233.61, 262.11, 290.20,

	1                 330.83_LDP, 360.99_LDP, 392.18_LDP, 457.06_LDP, 489.26_LDP,1266.51_LDP,1357.72_LDP,1456.18_LDP,1581.59_LDP/
	1                 330.83, 360.99, 392.18, 457.06, 489.26,1266.51,1357.72,1456.18,1581.59/

	DATA IP(1:20,27)/   7.88_LDP,  17.08_LDP,  33.50_LDP,  51.30_LDP,  79.49_LDP, 101.98_LDP, 128.93_LDP, 157.85_LDP, 186.13_LDP, 275.38_LDP, 304.71_LDP,
	DATA IP(1:20,27)/   7.88,  17.08,  33.50,  51.30,  79.49, 101.98, 128.93, 157.85, 186.13, 275.38, 304.71,

	1                 335.80_LDP, 379.33_LDP, 411.46_LDP, 443.59_LDP, 511.95_LDP, 546.58_LDP,1397.21_LDP,1504.58_LDP,1603.35_LDP/
	1                 335.80, 379.33, 411.46, 443.59, 511.95, 546.58,1397.21,1504.58,1603.35/

	DATA IP(1:20,28)/   7.64_LDP,  18.17_LDP,  35.19_LDP,  54.93_LDP,  76.06_LDP, 107.79_LDP, 132.66_LDP, 161.68_LDP, 192.78_LDP, 224.59_LDP, 320.98_LDP,
	DATA IP(1:20,28)/   7.64,  18.17,  35.19,  54.93,  76.06, 107.79, 132.66, 161.68, 192.78, 224.59, 320.98,

	1                 352.38_LDP, 384.51_LDP, 430.12_LDP, 464.32_LDP, 498.52_LDP, 571.08_LDP, 607.03_LDP,1541.17_LDP,1647.92_LDP/
	1                 352.38, 384.51, 430.12, 464.32, 498.52, 571.08, 607.03,1541.17,1647.92/

	MAX_RATIO=1.0_LDP
	MAX_RATIO=1.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	  IF(SPECIES_PRES(ISPEC) .AND. ATM(ID)%ZXzV .GT. 1.1_LDP)THEN
	  IF(SPECIES_PRES(ISPEC) .AND. ATM(ID)%ZXzV .GT. 1.1D0)THEN

	    IF(MAX_RATIO(ID) .GT. 0.1_LDP)THEN
	    IF(MAX_RATIO(ID) .GT. 0.1D0)THEN

	T_VAL=0.0_LDP
	T_VAL=0.0D0

	HDKT_EV=4.7994145_LDP/4.13566733_LDP
	HDKT_EV=4.7994145D0/4.13566733D0

	EXTRA_INT_EN=0.0_LDP
	EXTRA_INT_EN=0.0D0

	    ION_FRAC=1.0_LDP
	    ION_FRAC=1.0D0

	       ION_FRAC=ION_FRAC*(T_VAL**1.5_LDP)*EXP(-HDKT_EV*IP(ID,K)/T_VAL)/2.07E-22_LDP/ED_VAL
	       ION_FRAC=ION_FRAC*(T_VAL**1.5D0)*EXP(-HDKT_EV*IP(ID,K)/T_VAL)/2.07D-22/ED_VAL

	         IF(ION_FRAC .GT. 1.0_LDP)ION_FRAC=1.0_LDP
	         IF(ION_FRAC .GT. 1.0D0)ION_FRAC=1.0D0

	ATOM_ION_DENSITY=0.0_LDP
	ATOM_ION_DENSITY=0.0D0

	INTERNAL_ENERGY=0.0_LDP
	INTERNAL_ENERGY=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	T1=1.5_LDP*0.86173_LDP*T(DPTH_INDX)*(ED(DPTH_INDX)+ATOM_ION_DENSITY)
	T1=1.5D0*0.86173D0*T(DPTH_INDX)*(ED(DPTH_INDX)+ATOM_ION_DENSITY)

	T1=4.0_LDP*3.14159265_LDP*5.670400E-05_LDP*1.0E+16_LDP/1.60217733E-12_LDP/2.99792458E+10_LDP
	T1=4.0D0*3.14159265D0*5.670400D-05*1.0D+16/1.60217733D-12/2.99792458D+10


check_tmin.f

	REAL(KIND=LDP), PARAMETER :: HDKT=4.7994145_LDP
	REAL(KIND=LDP), PARAMETER :: HDKT=4.7994145D0

	TMIN=0.0_LDP
	TMIN=0.0D0

	    T2=T1/LOG(1.0_LDP+300.0_LDP)
	    T2=T1/LOG(1.0D0+300.0D0)


chk_cool_rates_consist.f

	PC=1.0E+15_LDP*PLANCKS_CONSTANT()
	PC=1.0D+15*PLANCKS_CONSTANT()

	STEQ_SUM=0.0_LDP
	STEQ_SUM=0.0D0

	T1=1.0E-10_LDP*16*ATAN(1.0_LDP)
	T1=1.0D-10*16*ATAN(1.0D0)


cmf_blkband_v2.f

        REAL(KIND=LDP),      PARAMETER :: DP_NEG_ONE=-1.0_LDP
        REAL(KIND=LDP),      PARAMETER :: DP_NEG_ONE=-1.0D0

        REAL(KIND=LDP),      PARAMETER :: DP_ONE=1.0_LDP
        REAL(KIND=LDP),      PARAMETER :: DP_ONE=1.0D0


cmf_blkband_v3.f

        REAL(KIND=LDP),      PARAMETER :: DP_NEG_ONE=-1.0_LDP
        REAL(KIND=LDP),      PARAMETER :: DP_NEG_ONE=-1.0D0

        REAL(KIND=LDP),      PARAMETER :: DP_ONE=1.0_LDP
        REAL(KIND=LDP),      PARAMETER :: DP_ONE=1.0D0

	  C_MAT=0.0_LDP; D_MAT=0.0_LDP; ORIG_POPS=0.0_LDP
	  C_MAT=0.0D0; D_MAT=0.0D0; ORIG_POPS=0.0D0

	  C_MAT=0.0_LDP
	  C_MAT=0.0D0

	      STEQ(:,K)=0.0_LDP
	      STEQ(:,K)=0.0D0

	      STEQ(:,K)=0.0_LDP
	      STEQ(:,K)=0.0D0

	  B_MAT=0.0_LDP; C_MAT=0.0_LDP; D_MAT=0.0_LDP; ORIG_POPS=0.0_LDP
	  B_MAT=0.0D0; C_MAT=0.0D0; D_MAT=0.0D0; ORIG_POPS=0.0D0

	B_MAT=0.0_LDP; C_MAT=0.0_LDP; D_MAT=0.0_LDP; PREV_D_MAT=0.0_LDP
	B_MAT=0.0D0; C_MAT=0.0D0; D_MAT=0.0D0; PREV_D_MAT=0.0D0


cmf_hydro_module.f


create_iv_links_v2.f


ddt_work.f

	IF(T_FROM_J(1) .EQ. 0.0_LDP)THEN
	IF(T_FROM_J(1) .EQ. 0.0D0)THEN

	  T_STORE=0.0_LDP
	  T_STORE=0.0D0

	  INT_EN_STORE=0.0_LDP
	  INT_EN_STORE=0.0D0

        AVE_ENERGY(:)=0.0_LDP
        AVE_ENERGY(:)=0.0D0

	TOT_ENERGY(1:NT)=0.0_LDP
	TOT_ENERGY(1:NT)=0.0D0

	ION_EN(1:NT)=0.0_LDP
	ION_EN(1:NT)=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	OLD_POP_ATOM=0.0_LDP
	OLD_POP_ATOM=0.0D0

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	DELTA_T_SECS=1.0E+05_LDP*(R(ND)-OLD_R(ND))/V(ND)
	DELTA_T_SECS=1.0D+05*(R(ND)-OLD_R(ND))/V(ND)

	INT_EN(:)=0.0_LDP
	INT_EN(:)=0.0D0

	OLD_INT_EN(:)=0.0_LDP
	OLD_INT_EN(:)=0.0D0

	      IF(T_STORE(I,J) .EQ. 0.0_LDP)THEN
	      IF(T_STORE(I,J) .EQ. 0.0D0)THEN

	  IF(T_STORE(I,2) .EQ. 0.0_LDP)THEN
	  IF(T_STORE(I,2) .EQ. 0.0D0)THEN

	    INT_EN(I)=INT_EN_STORE(I,2)*T1+INT_EN_STORE(I,1)*(1.0_LDP-T1)
	    INT_EN(I)=INT_EN_STORE(I,2)*T1+INT_EN_STORE(I,1)*(1.0D0-T1)

	    T2=2.0_LDP*MAX(INT_EN_STORE(I,2),INT_EN_STORE(I,1))
	    T2=2.0D0*MAX(INT_EN_STORE(I,2),INT_EN_STORE(I,1))

	    T2=0.5_LDP*MIN(INT_EN_STORE(I,2),INT_EN_STORE(I,1))
	    T2=0.5D0*MIN(INT_EN_STORE(I,2),INT_EN_STORE(I,1))

	      IF(T_STORE(I,J) .EQ. 0.0_LDP)THEN
	      IF(T_STORE(I,J) .EQ. 0.0D0)THEN

	        INT_EN(I)=INT_EN_STORE(I,J-1)*T1+INT_EN_STORE(I,J-2)*(1.0_LDP-T1)
	        INT_EN(I)=INT_EN_STORE(I,J-1)*T1+INT_EN_STORE(I,J-2)*(1.0D0-T1)

	        T2=2.0_LDP*MAX(INT_EN_STORE(I,J-1),INT_EN_STORE(I,J-2))
	        T2=2.0D0*MAX(INT_EN_STORE(I,J-1),INT_EN_STORE(I,J-2))

	        T2=0.5_LDP*MIN(INT_EN_STORE(I,J-1),INT_EN_STORE(I,J-2))
	        T2=0.5D0*MIN(INT_EN_STORE(I,J-1),INT_EN_STORE(I,J-2))

	        INT_EN(I)=INT_EN_STORE(I,J)*T1+INT_EN_STORE(I,J-1)*(1.0_LDP-T1)
	        INT_EN(I)=INT_EN_STORE(I,J)*T1+INT_EN_STORE(I,J-1)*(1.0D0-T1)

	SCALE=1.0E+14_LDP*BOLTZMANN_CONSTANT()/4.0_LDP/PI
	SCALE=1.0D+14*BOLTZMANN_CONSTANT()/4.0D0/PI

	  EK_VEC(I)=1.5_LDP*SCALE*POP_ATOM(I)/DELTA_T_SECS
	  EK_VEC(I)=1.5D0*SCALE*POP_ATOM(I)/DELTA_T_SECS

 	    WORK(I)=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*TCUR(I)- (1.0_LDP+OLD_GAMMA(I))*OLD_T(I) ) +
 	    WORK(I)=EK_VEC(I)*( (1.0D0+GAMMA(I))*TCUR(I)- (1.0D0+OLD_GAMMA(I))*OLD_T(I) ) +

	T1=4.0_LDP*1.0E+16_LDP*5.67E-05_LDP/2.998E+10_LDP
	T1=4.0D0*1.0D+16*5.67D-05/2.998D+10

	    T2=1.0E+04_LDP*BOLTZMANN_CONSTANT()*POP_ATOM(I)
	    T2=1.0D+04*BOLTZMANN_CONSTANT()*POP_ATOM(I)


def_new_rg_v1.f

	RTMP=0.0_LDP
	RTMP=0.0D0

	IF(DR_FAC .EQ. 0.0_LDP)THEN
	IF(DR_FAC .EQ. 0.0D0)THEN

	  DR_FAC=EXP(LOG(R(OB_INDX)/R(IB_INDX))/0.75_LDP/(IB_INDX-OB_INDX-1))
	  DR_FAC=EXP(LOG(R(OB_INDX)/R(IB_INDX))/0.75/(IB_INDX-OB_INDX-1))

	IF(DR_STEP .EQ. 0.0_LDP)THEN
	IF(DR_STEP .EQ. 0.0D0)THEN

	  DR_STEP=1.2_LDP*(R(OB_INDX)-R(IB_INDX))/(IB_INDX-OB_INDX-1)
	  DR_STEP=1.2*(R(OB_INDX)-R(IB_INDX))/(IB_INDX-OB_INDX-1)

	  RTMP(K:)=0.0_LDP
	  RTMP(K:)=0.0D0

	    IF(T2 .LT. 1.9_LDP*DR_STEP)THEN
	    IF(T2 .LT. 1.9D0*DR_STEP)THEN

	      IF(T2 .GT. 1.0_LDP*DR_STEP)THEN
	      IF(T2 .GT. 1.0D0*DR_STEP)THEN

	        RTMP(K)=RTMP(K-1)-0.5_LDP*T2
	        RTMP(K)=RTMP(K-1)-0.5D0*T2

	    ELSE IF(dR  .GT. DR_STEP .OR. T1 .GT. MAX_RATIO .OR. dR_STEP_RATIO .GT. 3.0_LDP)THEN
	    ELSE IF(dR  .GT. DR_STEP .OR. T1 .GT. MAX_RATIO .OR. dR_STEP_RATIO .GT. 3.0D0)THEN

	      IF( (TA(I)-TA(I+1))/(TA(I-1)-TA(I)) .LT. 0.33_LDP)THEN
	      IF( (TA(I)-TA(I+1))/(TA(I-1)-TA(I)) .LT. 0.33D0)THEN

	        RTMP(J)=TA(I-1)-0.67_LDP*(TA(I-1)-TA(I))
	        RTMP(J)=TA(I-1)-0.67D0*(TA(I-1)-TA(I))

	    RATIO=0.0_LDP
	    RATIO=0.0D0

	    J=1; T2=0.0_LDP
	    J=1; T2=0.0D0

	    RTMP(J+1)=0.5_LDP*(TA(J)+TA(J+1))
	    RTMP(J+1)=0.5D0*(TA(J)+TA(J+1))

	     DR_STEP=DR_STEP/T1**0.75_LDP
	     DR_STEP=DR_STEP/T1**0.75


determine_nse.f


det_lte_ed.f

	REAL(KIND=LDP), PARAMETER :: HDKT=4.7994145_LDP
	REAL(KIND=LDP), PARAMETER :: HDKT=4.7994145D0

	REAL(KIND=LDP), PARAMETER :: EPS=1.0E-05_LDP
	REAL(KIND=LDP), PARAMETER :: EPS=1.0D-05

	PI=ACOS(-1.0_LDP)
	PI=ACOS(-1.0D0)

	ED_OLD=0.0_LDP
	ED_OLD=0.0D0

	POPION_OLD=0.0_LDP
	POPION_OLD=0.0D0

	FSAHA=0.0_LDP
	FSAHA=0.0D0

          XKBT = BOLTZMANN_CONSTANT() * TEMP(L) * 1.0E4_LDP
          XKBT = BOLTZMANN_CONSTANT() * TEMP(L) * 1.0D4

          T1 = (2.0_LDP*PI*ELECTRON_MASS()*XKBT/HSQR)**1.5_LDP
          T1 = (2.0D0*PI*ELECTRON_MASS()*XKBT/HSQR)**1.5D0

	    DO WHILE( ABS(1.0_LDP-ED_OLD(L)/ED(L)) .GT. EPS .OR.
	    DO WHILE( ABS(1.0D0-ED_OLD(L)/ED(L)) .GT. EPS .OR.

	1             ABS(1.0_LDP-POPION_OLD(L)/POPION(L)) .GT. EPS )
	1             ABS(1.0D0-POPION_OLD(L)/POPION(L)) .GT. EPS )

              XKBT = BOLTZMANN_CONSTANT() * TEMP(L) * 1.0E4_LDP
              XKBT = BOLTZMANN_CONSTANT() * TEMP(L) * 1.0D4

              T1 = (2.0_LDP*PI*ELECTRON_MASS()*XKBT/HSQR)**1.5_LDP
              T1 = (2.0D0*PI*ELECTRON_MASS()*XKBT/HSQR)**1.5D0

                  XGE = 2.0_LDP
                  XGE = 2.0D0

              XERR = 2.0_LDP * EPS
              XERR = 2.0D0 * EPS

                T3 = 0.0_LDP
                T3 = 0.0D0

                    T1 = 1.0_LDP
                    T1 = 1.0D0

                    T2 = 1.0_LDP
                    T2 = 1.0D0

                    XZ(ISTART) = 1.0_LDP / T2
                    XZ(ISTART) = 1.0D0 / T2

                XERR = ABS(1.0_LDP-XED_OLD/XEDW)
                XERR = ABS(1.0D0-XED_OLD/XEDW)

	        XEDW=0.5_LDP*(XEDW+XED_OLD)
	        XEDW=0.5D0*(XEDW+XED_OLD)

	  POPION=0.0_LDP
	  POPION=0.0D0

	      IF(ATM(ID)%ZXzV .GT. 1.01_LDP)THEN
	      IF(ATM(ID)%ZXzV .GT. 1.01D0)THEN


do_cmf_hydro.f

	BC=1.0E+04_LDP*BOLTZMANN_CONSTANT()   			!erg/10^4 K
	BC=1.0D+04*BOLTZMANN_CONSTANT()   			!erg/10^4 K

	GRAV_CON=1.0E-20_LDP*GRAVITATIONAL_CONSTANT()*MASS_SUN()
	GRAV_CON=1.0D-20*GRAVITATIONAL_CONSTANT()*MASS_SUN()

	SIGMA_TH=6.65E-15_LDP					!cm^{-2} x 10^10
	SIGMA_TH=6.65D-15					!cm^{-2} x 10^10

	MASS_LOSS_SCALE_FACTOR=3.02286E+23_LDP
	MASS_LOSS_SCALE_FACTOR=3.02286D+23

	PI=ACOS(-1.0_LDP)
	PI=ACOS(-1.0D0)

        dLOG_TAU=0.25_LDP
        dLOG_TAU=0.25D0

        V_SCL_FAC=0.75E00_LDP
        V_SCL_FAC=0.75D00

        OBND_PARS(:)=0.0_LDP
        OBND_PARS(:)=0.0D0

	  NI_ZERO=1.0E+06_LDP
	  NI_ZERO=1.0D+06

	  NI_ZERO=1.0E+06_LDP
	  NI_ZERO=1.0D+06

	GAM_LIM=0.98_LDP
	GAM_LIM=0.98

	OLD_TAU_MAX=100.0_LDP
	OLD_TAU_MAX=100.0D0

	RBOUND=0.0_LDP
	RBOUND=0.0D0

	REFERENCE_RADIUS=1.0E-18_LDP*SQRT(MOD_LUM*LUM_SUN()/TEFF**4/STEFAN_BC/4.0_LDP/PI)
	REFERENCE_RADIUS=1.0D-18*SQRT(MOD_LUM*LUM_SUN()/TEFF**4/STEFAN_BC/4.0D0/PI)

	IF(MINVAL(OLD_ROSS_MEAN(1:MOD_ND)) .LE. 0.0_LDP)THEN
	IF(MINVAL(OLD_ROSS_MEAN(1:MOD_ND)) .LE. 0.0D0)THEN

	  T1=2.0_LDP/3.0_LDP
	  T1=2.0D0/3.0D0

	  OLD_REF_RADIUS=(1.0_LDP-T1)*OLD_R(I)+T1*OLD_R(I+1)
	  OLD_REF_RADIUS=(1.0D0-T1)*OLD_R(I)+T1*OLD_R(I+1)

	T1=OLD_REF_RADIUS/6.9599_LDP
	T1=OLD_REF_RADIUS/6.9599D0

	OLD_SF(1:MOD_ND)=OLD_T(1:MOD_ND)/OLD_TEFF/(OLD_TAU(1:MOD_ND)+0.67_LDP)**0.25_LDP
	OLD_SF(1:MOD_ND)=OLD_T(1:MOD_ND)/OLD_TEFF/(OLD_TAU(1:MOD_ND)+0.67D0)**0.25D0

	  T1=1.0E-06_LDP*BOLTZMANN_CONSTANT()/MU_ATOM/ATOMIC_MASS_UNIT()
	  T1=1.0D-06*BOLTZMANN_CONSTANT()/MU_ATOM/ATOMIC_MASS_UNIT()

	    SOUND_SPEED=SQRT(T1*(1.0_LDP+ED_ON_NA_EST)*OLD_T(I))
	    SOUND_SPEED=SQRT(T1*(1.0D0+ED_ON_NA_EST)*OLD_T(I))

	    IF(OLD_V(I) .LT. 0.5_LDP*SOUND_SPEED)THEN
	    IF(OLD_V(I) .LT. 0.5D0*SOUND_SPEED)THEN

	DO WHILE(ABS(REFERENCE_RADIUS/PREV_REF_RADIUS-1.0_LDP) .GT. 1.0E-05_LDP)
	DO WHILE(ABS(REFERENCE_RADIUS/PREV_REF_RADIUS-1.0) .GT. 1.0D-05)

	  GAM_EDD=1.0E+06_LDP*SIGMA_TH*STEFAN_BC*(TEFF**4)/MU_ATOM/C_CMS/(10**LOGG)/AMU
	  GAM_EDD=1.0D+06*SIGMA_TH*STEFAN_BC*(TEFF**4)/MU_ATOM/C_CMS/(10**LOGG)/AMU

	  PTURB_ON_NA=0.5E+10_LDP*VTURB*VTURB*MU_ATOM*AMU
	  PTURB_ON_NA=0.5D+10*VTURB*VTURB*MU_ATOM*AMU

	      T1=1.0E-10_LDP*(BC*TEFF*(1+ED_ON_NA_EST)+PTURB_ON_NA)/( (10.0_LDP**LOGG)*(1.0_LDP-GAM_FULL)*MU_ATOM*AMU )
	      T1=1.0D-10*(BC*TEFF*(1+ED_ON_NA_EST)+PTURB_ON_NA)/( (10.0D0**LOGG)*(1.0D0-GAM_FULL)*MU_ATOM*AMU )

	      T2=CONNECTION_VEL*(1.0_LDP/T1-2.0_LDP/CONNECTION_RADIUS)
	      T2=CONNECTION_VEL*(1.0D0/T1-2.0D0/CONNECTION_RADIUS)

	        P(I)=(BC*T(I)*(1.0_LDP+ED(I)/POP_ATOM(I))+PTURB_ON_NA)*POP_ATOM(I)
	        P(I)=(BC*T(I)*(1.0D0+ED(I)/POP_ATOM(I))+PTURB_ON_NA)*POP_ATOM(I)

	      P(1)=(BC*T(1)*(1.0_LDP+OLD_ED(1)/OLD_POP_ATOM(1))+PTURB_ON_NA)*POP_ATOM(1)
	      P(1)=(BC*T(1)*(1.0D0+OLD_ED(1)/OLD_POP_ATOM(1))+PTURB_ON_NA)*POP_ATOM(1)

	      IF(RBOUND .EQ. 0.0_LDP)RBOUND=OLD_R(1)
	      IF(RBOUND .EQ. 0.0D0)RBOUND=OLD_R(1)

	    SOUND_SPEED=1.0E+04_LDP*(1.0_LDP+ED_ON_NA(I))*BOLTZMANN_CONSTANT()*T(I)/MU_ATOM/ATOMIC_MASS_UNIT()
	    SOUND_SPEED=1.0D+04*(1.0D0+ED_ON_NA(I))*BOLTZMANN_CONSTANT()*T(I)/MU_ATOM/ATOMIC_MASS_UNIT()

	    SOUND_SPEED=1.0E-05_LDP*SQRT(SOUND_SPEED)
	    SOUND_SPEED=1.0D-05*SQRT(SOUND_SPEED)

	    IF(VTURB .EQ. 0.0_LDP)THEN
	    IF(VTURB .EQ. 0.0D0)THEN

	      SOUND_SPEED=1.0E+30_LDP
	      SOUND_SPEED=1.0D+30

	      SOUND_SPEED=0.0E+00_LDP
	      SOUND_SPEED=0.0D+00

	  DO WHILE( TAU(I) .LT. MAX(100.0_LDP,OLD_TAU_MAX) )
	  DO WHILE( TAU(I) .LT. MAX(100.0D0,OLD_TAU_MAX) )

	    SCL_HT=(10.0_LDP**LOGG)*(1.0_LDP-GAM_EDD)*MU_ATOM*AMU/
	    SCL_HT=(10.0D0**LOGG)*(1.0D0-GAM_EDD)*MU_ATOM*AMU/

	1            (BC*(1.0_LDP+ED_ON_NA(I-1))*T(I-1)+PTURB_ON_NA)
	1            (BC*(1.0D0+ED_ON_NA(I-1))*T(I-1)+PTURB_ON_NA)

	    SCL_HT=1.0E-10_LDP/SCL_HT
	    SCL_HT=1.0D-10/SCL_HT

	    H=SCL_HT/10.0_LDP
	    H=SCL_HT/10.0D0

	    R_EST=R(I-1)-0.5_LDP*H
	    R_EST=R(I-1)-0.5D0*H

	    R_EST=R(I-1)-0.5_LDP*H
	    R_EST=R(I-1)-0.5D0*H

	    TAU(I)=TAU(I-1)+(dTAU1+2*dTAU2+2*dTAU3+dTAU4)/6.0_LDP
	    TAU(I)=TAU(I-1)+(dTAU1+2*dTAU2+2*dTAU3+dTAU4)/6.0D0

	    P(I)=P(I-1)+(dP1+2*dP2+2*dP3+dP4)/6.0_LDP
	    P(I)=P(I-1)+(dP1+2*dP2+2*dP3+dP4)/6.0D0

	    POP_ATOM(I)=P(I)/(BC*T(I)*(1.0_LDP+ED_ON_NA(I))+PTURB_ON_NA)
	    POP_ATOM(I)=P(I)/(BC*T(I)*(1.0D0+ED_ON_NA(I))+PTURB_ON_NA)

	        GAM_LIM=GAM_LIM-0.01_LDP
	        GAM_LIM=GAM_LIM-0.01D0

	    dPdR_VEC(I)=1.0E-10_LDP*COEF(I,3)/POP_ATOM(I)/AMU/MU_ATOM
	    dPdR_VEC(I)=1.0D-10*COEF(I,3)/POP_ATOM(I)/AMU/MU_ATOM

	      T1=1.0E+10_LDP*POP_ATOM(I)*AMU*MU_ATOM
	      T1=1.0D+10*POP_ATOM(I)*AMU*MU_ATOM

	  T1=2.0_LDP/3.0_LDP
	  T1=2.0D0/3.0D0

	  T2=(1.0_LDP-T2)*R(I)+T2*R(I+1)
	  T2=(1.0D0-T2)*R(I)+T2*R(I+1)

	    T1=100.0_LDP
	    T1=100.0D0

	    T2=(1.0_LDP-T2)*R(I)+T2*R(I+1)
	    T2=(1.0D0-T2)*R(I)+T2*R(I+1)

	TAU_MAX=100.0_LDP
	TAU_MAX=100.0D0

	  REV_SIGMA(I)=REV_R(I)*COEF(I,3)/REV_V(I)-1.0_LDP
	  REV_SIGMA(I)=REV_R(I)*COEF(I,3)/REV_V(I)-1.0D0

	  IF(REV_R(1) .GT. 999999.0_LDP)THEN
	  IF(REV_R(1) .GT. 999999.0D0)THEN

	MOD_MASS=10.0_LDP**(LOGG)*(REFERENCE_RADIUS**2)/GRAV_CON
	MOD_MASS=10.0D0**(LOGG)*(REFERENCE_RADIUS**2)/GRAV_CON

	  T1=(10.0_LDP**LOGG)*(1.0_LDP-GAM_FULL)
	  T1=(10.0D0**LOGG)*(1.0D0-GAM_FULL)

	  T1=(10.0_LDP**LOGG)*(1.0_LDP-GAM_FULL)*(REFERENCE_RADIUS/R_EST)**2
	  T1=(10.0D0**LOGG)*(1.0D0-GAM_FULL)*(REFERENCE_RADIUS/R_EST)**2

	T2=(MDOT/MU_ATOM/POP_ATOM/R_EST/R_EST)**2/(SOUND_SPEED**2+0.5_LDP*VTURB**2)
	T2=(MDOT/MU_ATOM/POP_ATOM/R_EST/R_EST)**2/(SOUND_SPEED**2+0.5D0*VTURB**2)

	dPdR=1.0E+10_LDP*T1*MU_ATOM*AMU*P/BC/TEMP/(1+ED_ON_NA)/(1.0_LDP-T2)
	dPdR=1.0D+10*T1*MU_ATOM*AMU*P/BC/TEMP/(1+ED_ON_NA)/(1.0D0-T2)

	  TEMP=TEFF*(TAU+0.67_LDP)**0.25_LDP
	  TEMP=TEFF*(TAU+0.67D0)**0.25D0

	  TEMP=TEFF*OLD_SF(OLD_ND)*(TAU+0.67_LDP)**0.25_LDP
	  TEMP=TEFF*OLD_SF(OLD_ND)*(TAU+0.67D0)**0.25D0

	  SF=(1.0_LDP-T1)*OLD_SF(INDX-1)+T1*OLD_SF(INDX)
	  SF=(1.0D0-T1)*OLD_SF(INDX-1)+T1*OLD_SF(INDX)

	  TEMP=SF*TEFF*(TAU+0.67_LDP)**0.25_LDP
	  TEMP=SF*TEFF*(TAU+0.67D0)**0.25D0

	  FM=(1.0_LDP-T1)*OLD_KAP_FLUX(INDX-1)+T1*OLD_KAP_FLUX(INDX)
	  FM=(1.0D0-T1)*OLD_KAP_FLUX(INDX-1)+T1*OLD_KAP_FLUX(INDX)

	  RM=(1.0_LDP-T1)*OLD_KAP_ROSS(INDX-1)+T1*OLD_KAP_ROSS(INDX)
	  RM=(1.0D0-T1)*OLD_KAP_ROSS(INDX-1)+T1*OLD_KAP_ROSS(INDX)

	  ES=(1.0_LDP-T1)*OLD_KAP_ESEC(INDX-1)+T1*OLD_KAP_ESEC(INDX)
	  ES=(1.0D0-T1)*OLD_KAP_ESEC(INDX-1)+T1*OLD_KAP_ESEC(INDX)

          ED_EST=(1.0_LDP-T1)*OLD_ED(INDX-1)+T1*OLD_ED(INDX)
          ED_EST=(1.0D0-T1)*OLD_ED(INDX-1)+T1*OLD_ED(INDX)

          OLD_ATOM= (1.0_LDP-T1)*OLD_POP_ATOM(INDX-1)+T1*OLD_POP_ATOM(INDX)
          OLD_ATOM= (1.0D0-T1)*OLD_POP_ATOM(INDX-1)+T1*OLD_POP_ATOM(INDX)

          OLD_TEMP= (1.0_LDP-T1)*OLD_T(INDX-1)+T1*OLD_T(INDX)
          OLD_TEMP= (1.0D0-T1)*OLD_T(INDX-1)+T1*OLD_T(INDX)

	  IF(ATOM_EST .GT. 1.0E+09_LDP)THEN
	  IF(ATOM_EST .GT. 1.0D+09)THEN

	    GAM_FULL=GAM_EDD*(FM/RM)*(0.5_LDP*(KAP_ROSS_EST+RM)/KAP_ES)*ED_ON_NA_EST
	    GAM_FULL=GAM_EDD*(FM/RM)*(0.5D0*(KAP_ROSS_EST+RM)/KAP_ES)*ED_ON_NA_EST


do_cmf_hydro_v2.f

	BC=1.0E+04_LDP*BOLTZMANN_CONSTANT()   			!erg/10^4 K
	BC=1.0D+04*BOLTZMANN_CONSTANT()   			!erg/10^4 K

	GRAV_CON=1.0E-20_LDP*GRAVITATIONAL_CONSTANT()*MASS_SUN()
	GRAV_CON=1.0D-20*GRAVITATIONAL_CONSTANT()*MASS_SUN()

	SIGMA_TH=6.65E-15_LDP					!cm^{-2} x 10^10
	SIGMA_TH=6.65D-15					!cm^{-2} x 10^10

	MASS_LOSS_SCALE_FACTOR=3.02286E+23_LDP
	MASS_LOSS_SCALE_FACTOR=3.02286D+23

	PI=ACOS(-1.0_LDP)
	PI=ACOS(-1.0D0)

	BETA2=0.0_LDP
	BETA2=0.0D0

	VEXT=-1.0_LDP
	VEXT=-1.0D0

	RP2_ON_CON_RAD=-1.0_LDP
	RP2_ON_CON_RAD=-1.0D0

	VC_ON_SS=0.75_LDP
	VC_ON_SS=0.75D0

	TAU_REF=2.0_LDP/3.0_LDP
	TAU_REF=2.0D0/3.0D0

        dLOG_TAU=0.25_LDP
        dLOG_TAU=0.25D0

        V_SCL_FAC=0.75E00_LDP
        V_SCL_FAC=0.75D00

        OBND_PARS(:)=0.0_LDP
        OBND_PARS(:)=0.0D0

	  NI_ZERO=1.0E+06_LDP
	  NI_ZERO=1.0D+06

	  NI_ZERO=1.0E+06_LDP
	  NI_ZERO=1.0D+06

	GAM_LIM=0.98_LDP
	GAM_LIM=0.98D0

	OLD_TAU_MAX=100.0_LDP
	OLD_TAU_MAX=100.0D0

	RBOUND=0.0_LDP
	RBOUND=0.0D0

	  IF(BETA2 .EQ. 0.0_LDP)THEN
	  IF(BETA2 .EQ. 0.0D0)THEN

	  IF(VEXT .LT. 0.0_LDP)THEN
	  IF(VEXT .LT. 0.0D0)THEN

	  IF(RP2_ON_CON_RAD .LT. 0.0_LDP)THEN
	  IF(RP2_ON_CON_RAD .LT. 0.0D0)THEN

	      REFERENCE_RADIUS=T1*OLD_R(I)+(1.0_LDP-T1)*OLD_R(I-1)
	      REFERENCE_RADIUS=T1*OLD_R(I)+(1.0D0-T1)*OLD_R(I-1)

	  MOD_LUM=4.0E+36_LDP*PI*STEFAN_BC*T1*T1/LUM_SUN()
	  MOD_LUM=4.0D+36*PI*STEFAN_BC*T1*T1/LUM_SUN()

	      REFERENCE_RADIUS=T1*OLD_R(I)+(1.0_LDP-T1)*OLD_R(I-1)
	      REFERENCE_RADIUS=T1*OLD_R(I)+(1.0D0-T1)*OLD_R(I-1)

	  T1=4.0E+36_LDP*PI*STEFAN_BC*REFERENCE_RADIUS*REFERENCE_RADIUS
	  T1=4.0D+36*PI*STEFAN_BC*REFERENCE_RADIUS*REFERENCE_RADIUS

	  TEFF=(MOD_LUM*LUM_SUN()/T1)**0.25_LDP
	  TEFF=(MOD_LUM*LUM_SUN()/T1)**0.25D0

	      REFERENCE_RADIUS=T1*OLD_R(I)+(1.0_LDP-T1)*OLD_R(I-1)
	      REFERENCE_RADIUS=T1*OLD_R(I)+(1.0D0-T1)*OLD_R(I-1)

          BOLD=1.0_LDP/(EXP(1.4388_LDP/0.55_LDP/OLD_TEFF)-1.0_LDP)
          BOLD=1.0D0/(EXP(1.4388/0.55D0/OLD_TEFF)-1.0D0)

          BNEW=1.0_LDP/(EXP(1.4388_LDP/0.55_LDP/TEFF)-1.0_LDP)
          BNEW=1.0D0/(EXP(1.4388/0.55D0/TEFF)-1.0D0)

	  MOD_LUM=4.0E+36_LDP*PI*STEFAN_BC*T1*T1/LUM_SUN()
	  MOD_LUM=4.0D+36*PI*STEFAN_BC*T1*T1/LUM_SUN()

	  IF( ABS(TAU_REF-2.0_LDP/3.0_LDP) .GT. 0.001_LDP)THEN
	  IF( ABS(TAU_REF-2.0D0/3.0D0) .GT. 0.001D0)THEN

	  REFERENCE_RADIUS=1.0E-18_LDP*SQRT(MOD_LUM*LUM_SUN()/TEFF**4/STEFAN_BC/4.0_LDP/PI)
	  REFERENCE_RADIUS=1.0D-18*SQRT(MOD_LUM*LUM_SUN()/TEFF**4/STEFAN_BC/4.0D0/PI)

	IF(MINVAL(OLD_ROSS_MEAN(1:MOD_ND)) .LE. 0.0_LDP)THEN
	IF(MINVAL(OLD_ROSS_MEAN(1:MOD_ND)) .LE. 0.0D0)THEN

	  OLD_REF_RADIUS=(1.0_LDP-T1)*OLD_R(I)+T1*OLD_R(I+1)
	  OLD_REF_RADIUS=(1.0D0-T1)*OLD_R(I)+T1*OLD_R(I+1)

	T1=OLD_REF_RADIUS/6.9599_LDP
	T1=OLD_REF_RADIUS/6.9599D0

	OLD_SF(1:MOD_ND)=OLD_T(1:MOD_ND)/OLD_TEFF/(OLD_TAU(1:MOD_ND)+0.67_LDP)**0.25_LDP
	OLD_SF(1:MOD_ND)=OLD_T(1:MOD_ND)/OLD_TEFF/(OLD_TAU(1:MOD_ND)+0.67D0)**0.25D0

	  T1=1.0E-06_LDP*BOLTZMANN_CONSTANT()/MU_ATOM/ATOMIC_MASS_UNIT()
	  T1=1.0D-06*BOLTZMANN_CONSTANT()/MU_ATOM/ATOMIC_MASS_UNIT()

	    MOD_SOUND_SPEED=SQRT(T1*(1.0_LDP+ED_ON_NA_EST)*OLD_T(I)+0.5_LDP*VTURB*VTURB)
	    MOD_SOUND_SPEED=SQRT(T1*(1.0D0+ED_ON_NA_EST)*OLD_T(I)+0.5*VTURB*VTURB)

	    SOUND_SPEED=SQRT(T1*(1.0_LDP+ED_ON_NA_EST)*OLD_T(I))
	    SOUND_SPEED=SQRT(T1*(1.0D0+ED_ON_NA_EST)*OLD_T(I))

	MAX_ED_ON_NA=0.0_LDP
	MAX_ED_ON_NA=0.0D0

	GAM_EDD=1.0E+06_LDP*SIGMA_TH*STEFAN_BC*(TEFF**4)/MU_ATOM/C_CMS/(10**LOGG)/AMU
	GAM_EDD=1.0D+06*SIGMA_TH*STEFAN_BC*(TEFF**4)/MU_ATOM/C_CMS/(10**LOGG)/AMU

	IF(GAM_EDD*MAX_ED_ON_NA .GT. 1.0_LDP)THEN
	IF(GAM_EDD*MAX_ED_ON_NA .GT. 1.0D0)THEN

	PREV_REF_RADIUS=-1.0_LDP
	PREV_REF_RADIUS=-1.0D0

	DO WHILE(ABS(REFERENCE_RADIUS/PREV_REF_RADIUS-1.0_LDP) .GT. 1.0E-05_LDP)
	DO WHILE(ABS(REFERENCE_RADIUS/PREV_REF_RADIUS-1.0D0) .GT. 1.0D-05)

	  PTURB_ON_NA=0.5E+10_LDP*VTURB*VTURB*MU_ATOM*AMU
	  PTURB_ON_NA=0.5D+10*VTURB*VTURB*MU_ATOM*AMU

	      T2=-1.0_LDP
	      T2=-1.0D0

	      DO WHILE(T2 .LT. 0.0_LDP)
	      DO WHILE(T2 .LT. 0.0D0)

	        T1=1.0E-10_LDP*(BC*TEFF*(1+ED_ON_NA_EST)+PTURB_ON_NA)/( (10.0_LDP**LOGG)*(1.0_LDP-GAM_FULL)*MU_ATOM*AMU )
	        T1=1.0D-10*(BC*TEFF*(1+ED_ON_NA_EST)+PTURB_ON_NA)/( (10.0D0**LOGG)*(1.0D0-GAM_FULL)*MU_ATOM*AMU )

	        T2=CONNECTION_VEL*(1.0_LDP/T1-2.0_LDP/CONNECTION_RADIUS)
	        T2=CONNECTION_VEL*(1.0D0/T1-2.0D0/CONNECTION_RADIUS)

                IF(T2 .LE. 0.0_LDP)THEN
                IF(T2 .LE. 0.0D0)THEN

	          GAM_LIM=GAM_LIM-0.01_LDP
	          GAM_LIM=GAM_LIM-0.01D0

	        P(I)=(BC*T(I)*(1.0_LDP+ED(I)/POP_ATOM(I))+PTURB_ON_NA)*POP_ATOM(I)
	        P(I)=(BC*T(I)*(1.0D0+ED(I)/POP_ATOM(I))+PTURB_ON_NA)*POP_ATOM(I)

	      P(1)=(BC*T(1)*(1.0_LDP+OLD_ED(1)/OLD_POP_ATOM(1))+PTURB_ON_NA)*POP_ATOM(1)
	      P(1)=(BC*T(1)*(1.0D0+OLD_ED(1)/OLD_POP_ATOM(1))+PTURB_ON_NA)*POP_ATOM(1)

	      IF(RBOUND .EQ. 0.0_LDP)RBOUND=OLD_R(1)
	      IF(RBOUND .EQ. 0.0D0)RBOUND=OLD_R(1)

	    SOUND_SPEED=1.0E+04_LDP*(1.0_LDP+ED_ON_NA(I))*BOLTZMANN_CONSTANT()*T(I)/MU_ATOM/ATOMIC_MASS_UNIT()
	    SOUND_SPEED=1.0D+04*(1.0D0+ED_ON_NA(I))*BOLTZMANN_CONSTANT()*T(I)/MU_ATOM/ATOMIC_MASS_UNIT()

	    SOUND_SPEED=1.0E-05_LDP*SQRT(SOUND_SPEED)
	    SOUND_SPEED=1.0D-05*SQRT(SOUND_SPEED)

	    IF(VTURB .EQ. 0.0_LDP)THEN
	    IF(VTURB .EQ. 0.0D0)THEN

	      SOUND_SPEED=1.0E+30_LDP
	      SOUND_SPEED=1.0D+30

	      SOUND_SPEED=0.0E+00_LDP
	      SOUND_SPEED=0.0D+00

	  DO WHILE( TAU(I) .LT. MAX(100.0_LDP,OLD_TAU_MAX) )
	  DO WHILE( TAU(I) .LT. MAX(100.0D0,OLD_TAU_MAX) )

	    SCL_HT=(10.0_LDP**LOGG)*(1.0_LDP-GAM_EDD)*MU_ATOM*AMU/
	    SCL_HT=(10.0D0**LOGG)*(1.0D0-GAM_EDD)*MU_ATOM*AMU/

	1            (BC*(1.0_LDP+ED_ON_NA(I-1))*T(I-1)+PTURB_ON_NA)
	1            (BC*(1.0D0+ED_ON_NA(I-1))*T(I-1)+PTURB_ON_NA)

	    SCL_HT=1.0E-10_LDP/SCL_HT
	    SCL_HT=1.0D-10/SCL_HT

	    H=SCL_HT/10.0_LDP
	    H=SCL_HT/10.0D0

	    R_EST=R(I-1)-0.5_LDP*H
	    R_EST=R(I-1)-0.5D0*H

	    R_EST=R(I-1)-0.5_LDP*H
	    R_EST=R(I-1)-0.5D0*H

	    TAU(I)=TAU(I-1)+(dTAU1+2*dTAU2+2*dTAU3+dTAU4)/6.0_LDP
	    TAU(I)=TAU(I-1)+(dTAU1+2*dTAU2+2*dTAU3+dTAU4)/6.0D0

	    P(I)=P(I-1)+(dP1+2*dP2+2*dP3+dP4)/6.0_LDP
	    P(I)=P(I-1)+(dP1+2*dP2+2*dP3+dP4)/6.0D0

	    POP_ATOM(I)=P(I)/(BC*T(I)*(1.0_LDP+ED_ON_NA(I))+PTURB_ON_NA)
	    POP_ATOM(I)=P(I)/(BC*T(I)*(1.0D0+ED_ON_NA(I))+PTURB_ON_NA)

	        GAM_LIM=GAM_LIM-0.01_LDP
	        GAM_LIM=GAM_LIM-0.01

	    dPdR_VEC(I)=1.0E-10_LDP*COEF(I,3)/POP_ATOM(I)/AMU/MU_ATOM
	    dPdR_VEC(I)=1.0D-10*COEF(I,3)/POP_ATOM(I)/AMU/MU_ATOM

	      T1=1.0E+10_LDP*POP_ATOM(I)*AMU*MU_ATOM
	      T1=1.0D+10*POP_ATOM(I)*AMU*MU_ATOM

	  T2=(1.0_LDP-T2)*R(I)+T2*R(I+1)
	  T2=(1.0D0-T2)*R(I)+T2*R(I+1)

	      CONNECTION_RADIUS=CONNECTION_RADIUS-0.2_LDP*T1
	      CONNECTION_RADIUS=CONNECTION_RADIUS-0.2*T1

	    T1=100.0_LDP
	    T1=100.0D0

	    T2=(1.0_LDP-T2)*R(I)+T2*R(I+1)
	    T2=(1.0D0-T2)*R(I)+T2*R(I+1)

	TAU_MAX=100.0_LDP
	TAU_MAX=100.0D0

	  REV_SIGMA(I)=REV_R(I)*COEF(I,3)/REV_V(I)-1.0_LDP
	  REV_SIGMA(I)=REV_R(I)*COEF(I,3)/REV_V(I)-1.0D0

	  IF(REV_R(1) .GT. 999999.0_LDP)THEN
	  IF(REV_R(1) .GT. 999999.0D0)THEN

	  ELSE IF( (REV_R(1)-REV_R(ND)) .LT. 1.0_LDP)THEN
	  ELSE IF( (REV_R(1)-REV_R(ND)) .LT. 1.0D0)THEN

	MOD_MASS=10.0_LDP**(LOGG)*(REFERENCE_RADIUS**2)/GRAV_CON
	MOD_MASS=10.0D0**(LOGG)*(REFERENCE_RADIUS**2)/GRAV_CON

	  T1=(10.0_LDP**LOGG)*(1.0_LDP-GAM_FULL)
	  T1=(10.0D0**LOGG)*(1.0D0-GAM_FULL)

	  T1=(10.0_LDP**LOGG)*(1.0_LDP-GAM_FULL)*(REFERENCE_RADIUS/R_EST)**2
	  T1=(10.0D0**LOGG)*(1.0D0-GAM_FULL)*(REFERENCE_RADIUS/R_EST)**2

	T2=(MDOT/MU_ATOM/POP_ATOM/R_EST/R_EST)**2/(SOUND_SPEED**2+0.5_LDP*VTURB**2)
	T2=(MDOT/MU_ATOM/POP_ATOM/R_EST/R_EST)**2/(SOUND_SPEED**2+0.5D0*VTURB**2)

	T3=BC*TEMP*(1.0_LDP+ED_ON_NA)/MU_ATOM/AMU+0.5E+10_LDP*VTURB*VTURB
	T3=BC*TEMP*(1.0D0+ED_ON_NA)/MU_ATOM/AMU+0.5D+10*VTURB*VTURB

	dPdR=1.0E+10_LDP*T1*P/T3/(1.0_LDP-T2)
	dPdR=1.0D+10*T1*P/T3/(1.0D0-T2)

	  TEMP=TEFF*(TAU+0.67_LDP)**0.25_LDP
	  TEMP=TEFF*(TAU+0.67D0)**0.25D0

	  TEMP=TEFF*OLD_SF(OLD_ND)*(TAU+0.67_LDP)**0.25_LDP
	  TEMP=TEFF*OLD_SF(OLD_ND)*(TAU+0.67D0)**0.25D0

	  SF=(1.0_LDP-T1)*OLD_SF(INDX-1)+T1*OLD_SF(INDX)
	  SF=(1.0D0-T1)*OLD_SF(INDX-1)+T1*OLD_SF(INDX)

	  TEMP=SF*TEFF*(TAU+0.67_LDP)**0.25_LDP
	  TEMP=SF*TEFF*(TAU+0.67D0)**0.25D0

	  FM=(1.0_LDP-T1)*OLD_KAP_FLUX(INDX-1)+T1*OLD_KAP_FLUX(INDX)
	  FM=(1.0D0-T1)*OLD_KAP_FLUX(INDX-1)+T1*OLD_KAP_FLUX(INDX)

	  RM=(1.0_LDP-T1)*OLD_KAP_ROSS(INDX-1)+T1*OLD_KAP_ROSS(INDX)
	  RM=(1.0D0-T1)*OLD_KAP_ROSS(INDX-1)+T1*OLD_KAP_ROSS(INDX)

	  ES=(1.0_LDP-T1)*OLD_KAP_ESEC(INDX-1)+T1*OLD_KAP_ESEC(INDX)
	  ES=(1.0D0-T1)*OLD_KAP_ESEC(INDX-1)+T1*OLD_KAP_ESEC(INDX)

          ED_EST=(1.0_LDP-T1)*OLD_ED(INDX-1)+T1*OLD_ED(INDX)
          ED_EST=(1.0D0-T1)*OLD_ED(INDX-1)+T1*OLD_ED(INDX)

          OLD_ATOM= (1.0_LDP-T1)*OLD_POP_ATOM(INDX-1)+T1*OLD_POP_ATOM(INDX)
          OLD_ATOM= (1.0D0-T1)*OLD_POP_ATOM(INDX-1)+T1*OLD_POP_ATOM(INDX)

          OLD_TEMP= (1.0_LDP-T1)*OLD_T(INDX-1)+T1*OLD_T(INDX)
          OLD_TEMP= (1.0D0-T1)*OLD_T(INDX-1)+T1*OLD_T(INDX)

	  IF(ATOM_EST .GT. 1.0E+09_LDP)THEN
	  IF(ATOM_EST .GT. 1.0D+09)THEN

	    GAM_FULL=GAM_EDD*(FM/RM)*(0.5_LDP*(KAP_ROSS_EST+RM)/KAP_ES)*ED_ON_NA_EST
	    GAM_FULL=GAM_EDD*(FM/RM)*(0.5D0*(KAP_ROSS_EST+RM)/KAP_ES)*ED_ON_NA_EST


do_full_r_grid_v1.f

	IB_RAT=2.0_LDP; OB_RAT=1.5_LDP
	IB_RAT=2.0D0; OB_RAT=1.5D0

	TAU_SCALE_FAC=0.0_LDP
	TAU_SCALE_FAC=0.0D0

	DTAU2_ON_DTAU1=100.0_LDP
	DTAU2_ON_DTAU1=100.0D0

	dLOGT_MAX=0.04_LDP
	dLOGT_MAX=0.04D0

	    T1=6.65E-15_LDP*ED(I)
	    T1=6.65D-15*ED(I)

	T1=TCHI(1)*R(1)/MAX(2.0_LDP,T1-1.0_LDP)*(1.0_LDP-TAU_SCALE_FAC)
	T1=TCHI(1)*R(1)/MAX(2.0D0,T1-1.0D0)*(1.0D0-TAU_SCALE_FAC)


do_gam_abs_approx.f

	TA(1:ND)=0.5_LDP                        !Number of electrons per baryon
	TA(1:ND)=0.5D0                        !Number of electrons per baryon

	   TA(1:ND)=0.5_LDP*(1.0_LDP+POP_SPECIES(1:ND,ISPEC)/POP_ATOM(1:ND))
	   TA(1:ND)=0.5D0*(1.0D0+POP_SPECIES(1:ND,ISPEC)/POP_ATOM(1:ND))

	CHI(1:ND)=0.06_LDP*TA(1:ND)*DENSITY(1:ND)*1.0E+10_LDP
	CHI(1:ND)=0.06D0*TA(1:ND)*DENSITY(1:ND)*1.0D+10

	R_EXT(2)=R(1)+(R(2)-R(1))/3.0_LDP
	R_EXT(2)=R(1)+(R(2)-R(1))/3.0D0

	R_EXT(3)=R(1)+(R(3)-R(1))/3.0_LDP
	R_EXT(3)=R(1)+(R(3)-R(1))/3.0D0

	R_EXT(4)=R(1)+(R(3)-R(1))/1.5_LDP
	R_EXT(4)=R(1)+(R(3)-R(1))/1.5D0

	  R_EXT(J+1)=R(I)+(R(I+1)-R(I))/3.0_LDP
	  R_EXT(J+1)=R(I)+(R(I+1)-R(I))/3.0D0

	  R_EXT(J+2)=R(I)+(R(I+1)-R(I))/1.5_LDP
	  R_EXT(J+2)=R(I)+(R(I+1)-R(I))/1.5D0

	R_EXT(ND_EXT-1)=R(ND)+(R(ND-1)-R(ND))/3.0_LDP
	R_EXT(ND_EXT-1)=R(ND)+(R(ND-1)-R(ND))/3.0D0

	DBB=0.0_LDP
	DBB=0.0D0

	T1=16.0_LDP*ATAN(1.0_LDP)*1.0E+30_LDP/3.826E+33_LDP
	T1=16.0D0*ATAN(1.0D0)*1.0D+30/3.826D+33


do_gam_abs_approx_v2.f

	TA(1:ND)=0.5_LDP                        !Number of electrons per baryon
	TA(1:ND)=0.5D0                        !Number of electrons per baryon

	   TA(1:ND)=0.5_LDP*(1.0_LDP+POP_SPECIES(1:ND,ISPEC)/POP_ATOM(1:ND))
	   TA(1:ND)=0.5D0*(1.0D0+POP_SPECIES(1:ND,ISPEC)/POP_ATOM(1:ND))

	CHI(1:ND)=0.06_LDP*TA(1:ND)*DENSITY(1:ND)*1.0E+10_LDP
	CHI(1:ND)=0.06D0*TA(1:ND)*DENSITY(1:ND)*1.0D+10

	R_EXT(2)=R(1)+(R(2)-R(1))/3.0_LDP
	R_EXT(2)=R(1)+(R(2)-R(1))/3.0D0

	R_EXT(3)=R(1)+(R(3)-R(1))/3.0_LDP
	R_EXT(3)=R(1)+(R(3)-R(1))/3.0D0

	R_EXT(4)=R(1)+(R(3)-R(1))/1.5_LDP
	R_EXT(4)=R(1)+(R(3)-R(1))/1.5D0

	  R_EXT(J+1)=R(I)+(R(I+1)-R(I))/3.0_LDP
	  R_EXT(J+1)=R(I)+(R(I+1)-R(I))/3.0D0

	  R_EXT(J+2)=R(I)+(R(I+1)-R(I))/1.5_LDP
	  R_EXT(J+2)=R(I)+(R(I+1)-R(I))/1.5D0

	R_EXT(ND_EXT-1)=R(ND)+(R(ND-1)-R(ND))/3.0_LDP
	R_EXT(ND_EXT-1)=R(ND)+(R(ND-1)-R(ND))/3.0D0

	DBB=0.0_LDP
	DBB=0.0D0

	T1=0.0_LDP
	T1=0.0D0

	ABS_OPT_DEPTH=0.5_LDP*T1
	ABS_OPT_DEPTH=0.5D0*T1

	CONV_FAC=16.0_LDP*ATAN(1.0_LDP)*1.0E+30_LDP/3.826E+33_LDP
	CONV_FAC=16.0D0*ATAN(1.0D0)*1.0D+30/3.826D+33

	 IF(MINVAL(SM_CLUMP_FAC) .LT. 0.99999_LDP)THEN
	 IF(MINVAL(SM_CLUMP_FAC) .LT. 0.99999D0)THEN


do_lev_pop_decays.f


do_ng_accel_band_v1.f

	  VEC_INC(L)=100.0_LDP*(LOCINC-1.0_LDP)
	  VEC_INC(L)=100.0D0*(LOCINC-1.0D0)

	  VEC_DEC(L)=100.0_LDP*(1.0_LDP/LOCDEC-1.0_LDP)
	  VEC_DEC(L)=100.0D0*(1.0D0/LOCDEC-1.0D0)

	  IF(LOCINC .GT. 10.1_LDP .OR. LOCDEC .LT. 0.09_LDP)THEN
	  IF(LOCINC .GT. 10.1D0 .OR. LOCDEC .LT. 0.09D0)THEN

	MAXINC=100.0_LDP*(MAXINC-1.0_LDP)
	MAXINC=100.0D0*(MAXINC-1.0D0)

	MAXDEC=100.0_LDP*(1.0_LDP/MAXDEC-1.0_LDP)
	MAXDEC=100.0D0*(1.0D0/MAXDEC-1.0D0)


do_ng_accel_band_v2.f

	BIG_POPS(NT+3,:)=SIGMA(:)+1.0_LDP
	BIG_POPS(NT+3,:)=SIGMA(:)+1.0D0

	  RDPOPS(NT+3,:,I)=SIGMA(:)+1.0_LDP
	  RDPOPS(NT+3,:,I)=SIGMA(:)+1.0D0

          SIGMA(2:ND-1)=BIG_POPS(NT+3,2:ND-1)-1.0_LDP
          SIGMA(2:ND-1)=BIG_POPS(NT+3,2:ND-1)-1.0D0

	MAXINC=-1000.0_LDP
	MAXINC=-1000.0D0

	MAXDEC=1000.0_LDP
	MAXDEC=1000.0D0

	  LOCINC=-1000.0_LDP
	  LOCINC=-1000.0D0

	  LOCDEC=1000.0_LDP
	  LOCDEC=1000.0D0

	  VEC_INC(L)=100.0_LDP*(LOCINC-1.0_LDP)
	  VEC_INC(L)=100.0D0*(LOCINC-1.0D0)

	  VEC_DEC(L)=100.0_LDP*(1.0_LDP/LOCDEC-1.0_LDP)
	  VEC_DEC(L)=100.0D0*(1.0D0/LOCDEC-1.0D0)

	  IF(LOCINC .GT. 10.1_LDP .OR. LOCDEC .LT. 0.09_LDP)THEN
	  IF(LOCINC .GT. 10.1D0 .OR. LOCDEC .LT. 0.09D0)THEN

	MAXINC=100.0_LDP*(MAXINC-1.0_LDP)
	MAXINC=100.0D0*(MAXINC-1.0D0)

	MAXDEC=100.0_LDP*(1.0_LDP/MAXDEC-1.0_LDP)
	MAXDEC=100.0D0*(1.0D0/MAXDEC-1.0D0)


do_ng_accel_band_v4.f

	BIG_POPS(NT+3,:)=SIGMA(:)+1.0_LDP
	BIG_POPS(NT+3,:)=SIGMA(:)+1.0D0

	  RDPOPS(NT+3,:,I)=SIGMA(:)+1.0_LDP
	  RDPOPS(NT+3,:,I)=SIGMA(:)+1.0D0

	  MIN_RATIO=1.0E+30_LDP; MAX_RATIO=-1.0E+30_LDP
	  MIN_RATIO=1.0D+30; MAX_RATIO=-1.0D+30

	  IF(MAXVAL(BIG_POPS(NT,:)-POPS(NT,:)) .GT. 0.0_LDP)THEN
	  IF(MAXVAL(BIG_POPS(NT,:)-POPS(NT,:)) .GT. 0.0D0)THEN

	    IF(MEAN .GT. 5.0_LDP .AND. MIN_RATIO .GT. 0.5_LDP*MEAN .AND.
	    IF(MEAN .GT. 5.0 .AND. MIN_RATIO .GT. 0.5D0*MEAN .AND.

	1             MAX_RATIO .LT. 2.0_LDP*MEAN)THEN
	1             MAX_RATIO .LT. 2.0D0*MEAN)THEN

          SIGMA(2:ND-1)=BIG_POPS(NT+3,2:ND-1)-1.0_LDP
          SIGMA(2:ND-1)=BIG_POPS(NT+3,2:ND-1)-1.0D0

	MAXINC=-1000.0_LDP
	MAXINC=-1000.0D0

	MAXDEC=1000.0_LDP
	MAXDEC=1000.0D0

	  LOCINC=-1000.0_LDP
	  LOCINC=-1000.0D0

	  LOCDEC=1000.0_LDP
	  LOCDEC=1000.0D0

	  VEC_INC(L)=100.0_LDP*(LOCINC-1.0_LDP)
	  VEC_INC(L)=100.0D0*(LOCINC-1.0D0)

	  VEC_DEC(L)=100.0_LDP*(1.0_LDP/LOCDEC-1.0_LDP)
	  VEC_DEC(L)=100.0D0*(1.0D0/LOCDEC-1.0D0)

	  IF(T1 .NE. 0.0_LDP)T2=(RDPOPS(NT,L,1)-RDPOPS(NT,L,2))/T1
	  IF(T1 .NE. 0.0D0)T2=(RDPOPS(NT,L,1)-RDPOPS(NT,L,2))/T1

	  IF(T1 .NE. 0 .AND. T2 .LT. 0.0_LDP)THEN
	  IF(T1 .NE. 0 .AND. T2 .LT. 0.0D0)THEN

	  ELSE IF(LOCINC .GT. 10.1_LDP .OR. LOCDEC .LT. 0.09_LDP)THEN
	  ELSE IF(LOCINC .GT. 10.1D0 .OR. LOCDEC .LT. 0.09D0)THEN

	MAXINC=100.0_LDP*(MAXINC-1.0_LDP)
	MAXINC=100.0D0*(MAXINC-1.0D0)

	MAXDEC=100.0_LDP*(1.0_LDP/MAXDEC-1.0_LDP)
	MAXDEC=100.0D0*(1.0D0/MAXDEC-1.0D0)


do_species_decays.f

	RADIOACTIVE_DECAY_ENERGY=0.0_LDP
	RADIOACTIVE_DECAY_ENERGY=0.0D0

	    ISO(JS)%OLD_POP_DECAY=ISO(JS)%OLD_POP + ISO(IS)%OLD_POP*(1.0_LDP-VEC1)
	    ISO(JS)%OLD_POP_DECAY=ISO(JS)%OLD_POP + ISO(IS)%OLD_POP*(1.0D0-VEC1)

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1)*NUC(IN)%ENERGY_PER_DECAY
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1)*NUC(IN)%ENERGY_PER_DECAY

	1                             ISO(JS)%OLD_POP*(1.0_LDP-VEC2) +
	1                             ISO(JS)%OLD_POP*(1.0D0-VEC2) +

	1                             ISO(IS)%OLD_POP*(1.0_LDP-VEC1-VEC3)
	1                             ISO(IS)%OLD_POP*(1.0D0-VEC1-VEC3)

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1)*NUC(IN)%ENERGY_PER_DECAY +
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1)*NUC(IN)%ENERGY_PER_DECAY +

	1            ISO(JS)%OLD_POP*(1.0_LDP-VEC2)*NUC(JN)%ENERGY_PER_DECAY +
	1            ISO(JS)%OLD_POP*(1.0D0-VEC2)*NUC(JN)%ENERGY_PER_DECAY +

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1-VEC3)*NUC(JN)%ENERGY_PER_DECAY
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1-VEC3)*NUC(JN)%ENERGY_PER_DECAY

	IF(DELTA_T .NE. 0.0_LDP)RADIOACTIVE_DECAY_ENERGY=RADIOACTIVE_DECAY_ENERGY/DELTA_T		!ergs/sec
	IF(DELTA_T .NE. 0.0D0)RADIOACTIVE_DECAY_ENERGY=RADIOACTIVE_DECAY_ENERGY/DELTA_T		!ergs/sec

	  PAR(IP)%OLD_POP=0.0_LDP
	  PAR(IP)%OLD_POP=0.0D0

	  PAR(IP)%OLD_POP_DECAY=0.0_LDP
	  PAR(IP)%OLD_POP_DECAY=0.0D0


do_species_decays_v2.f

	RADIOACTIVE_DECAY_ENERGY=0.0_LDP
	RADIOACTIVE_DECAY_ENERGY=0.0D0

	KINETIC_DECAY_ENERGY=0.0_LDP
	KINETIC_DECAY_ENERGY=0.0D0

	CUR_RAD_SUM=0.0_LDP
	CUR_RAD_SUM=0.0D0

	CUR_EK_SUM=0.0_LDP
	CUR_EK_SUM=0.0D0

	    ISO(JS)%OLD_POP_DECAY=ISO(JS)%OLD_POP + ISO(IS)%OLD_POP*(1.0_LDP-VEC1)
	    ISO(JS)%OLD_POP_DECAY=ISO(JS)%OLD_POP + ISO(IS)%OLD_POP*(1.0D0-VEC1)

	      ISO(IS)%NUM_DECAYS=ISO(IS)%OLD_POP*(1.0_LDP-VEC1)
	      ISO(IS)%NUM_DECAYS=ISO(IS)%OLD_POP*(1.0D0-VEC1)

	    IF(DELTA_T .EQ. 0.0_LDP)THEN
	    IF(DELTA_T .EQ. 0.0D0)THEN

	1             ISO(IS)%OLD_POP*(1.0_LDP-VEC1)*NUC(IN)%ENERGY_PER_DECAY
	1             ISO(IS)%OLD_POP*(1.0D0-VEC1)*NUC(IN)%ENERGY_PER_DECAY

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1)*NUC(IN)%KINETIC_PER_DECAY
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1)*NUC(IN)%KINETIC_PER_DECAY

	1                             ISO(JS)%OLD_POP*(1.0_LDP-VEC2) +
	1                             ISO(JS)%OLD_POP*(1.0D0-VEC2) +

	1                             ISO(IS)%OLD_POP*(1.0_LDP-VEC1-VEC3)
	1                             ISO(IS)%OLD_POP*(1.0D0-VEC1-VEC3)

		ISO(IS)%NUM_DECAYS=ISO(IS)%OLD_POP*(1.0_LDP-VEC1)
		ISO(IS)%NUM_DECAYS=ISO(IS)%OLD_POP*(1.0D0-VEC1)

		ISO(JS)%NUM_DECAYS=ISO(JS)%OLD_POP*(1.0_LDP-VEC2) +
		ISO(JS)%NUM_DECAYS=ISO(JS)%OLD_POP*(1.0D0-VEC2) +

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1-VEC3)
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1-VEC3)

	        IF(DELTA_T .EQ. 0.0_LDP)THEN
	        IF(DELTA_T .EQ. 0.0D0)THEN

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1)*NUC(IN)%ENERGY_PER_DECAY +
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1)*NUC(IN)%ENERGY_PER_DECAY +

	1            ISO(JS)%OLD_POP*(1.0_LDP-VEC2)*NUC(JN)%ENERGY_PER_DECAY +
	1            ISO(JS)%OLD_POP*(1.0D0-VEC2)*NUC(JN)%ENERGY_PER_DECAY +

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1-VEC3)*NUC(JN)%ENERGY_PER_DECAY
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1-VEC3)*NUC(JN)%ENERGY_PER_DECAY

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1)*NUC(IN)%KINETIC_PER_DECAY +
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1)*NUC(IN)%KINETIC_PER_DECAY +

	1            ISO(JS)%OLD_POP*(1.0_LDP-VEC2)*NUC(JN)%KINETIC_PER_DECAY +
	1            ISO(JS)%OLD_POP*(1.0D0-VEC2)*NUC(JN)%KINETIC_PER_DECAY +

	1            ISO(IS)%OLD_POP*(1.0_LDP-VEC1-VEC3)*NUC(JN)%KINETIC_PER_DECAY
	1            ISO(IS)%OLD_POP*(1.0D0-VEC1-VEC3)*NUC(JN)%KINETIC_PER_DECAY

	IF(DELTA_T .EQ. 0.0_LDP)THEN
	IF(DELTA_T .EQ. 0.0D0)THEN

	    PAR(IP)%OLD_POP=0.0_LDP
	    PAR(IP)%OLD_POP=0.0D0

	    PAR(IP)%OLD_POP_DECAY=0.0_LDP
	    PAR(IP)%OLD_POP_DECAY=0.0D0


do_tau_regrid.f

	  STRETCH_POW=1.5_LDP
	  STRETCH_POW=1.5D0

	  STRETCH_POW=1.0_LDP
	  STRETCH_POW=1.0D0

	  FG_MIN=-2.0_LDP; FG_MAX=1.0_LDP
	  FG_MIN=-2.0D0; FG_MAX=1.0D0

        TB(1:ND)=0.0_LDP                              !Used for dCHIdR
        TB(1:ND)=0.0D0                              !Used for dCHIdR

	IF(T1 .GT. 0.0_LDP)THEN
	IF(T1 .GT. 0.0D0)THEN

	  T1=8.0_LDP
	  T1=8.0D0

	IF(T1 .LT. 2.0_LDP)T1=2.0_LDP
	IF(T1 .LT. 2.0D0)T1=2.0D0

	TAU_OLD(1)=FLUX_MEAN(1)*R(1)/(T1-1.0_LDP)
	TAU_OLD(1)=FLUX_MEAN(1)*R(1)/(T1-1.0D0)

	  IF(STRETCH_POW .GT. 1 .OR. STRETCH_POW .LT. 0.2_LDP)THEN
	  IF(STRETCH_POW .GT. 1 .OR. STRETCH_POW .LT. 0.2D0)THEN

	  TAU(ND-1)=TAU(ND)-0.1_LDP*dLOG_TAU
	  TAU(ND-1)=TAU(ND)-0.1D0*dLOG_TAU

	  TAU(ND-2)=TAU(ND)-0.35_LDP*dLOG_TAU
	  TAU(ND-2)=TAU(ND)-0.35D0*dLOG_TAU

	  TAU(2)=TAU(1)+0.02_LDP*dLOG_TAU
	  TAU(2)=TAU(1)+0.02D0*dLOG_TAU

	  TAU(3)=TAU(1)+0.2_LDP*dLOG_TAU
	  TAU(3)=TAU(1)+0.2D0*dLOG_TAU


do_tau_regrid_v2.f

	  STRETCH_POW=1.5_LDP
	  STRETCH_POW=1.5D0

	  STRETCH_POW=1.0_LDP
	  STRETCH_POW=1.0D0

	  STRETCH_POW=1.0_LDP
	  STRETCH_POW=1.0D0

	  FG_MIN=-2.0_LDP; FG_MAX=1.0_LDP
	  FG_MIN=-2.0D0; FG_MAX=1.0D0

	  FG_MIN=-2.0_LDP; FG_MAX=1.0_LDP
	  FG_MIN=-2.0D0; FG_MAX=1.0D0

        TB(1:ND)=0.0_LDP                              !Used for dCHIdR
        TB(1:ND)=0.0D0                              !Used for dCHIdR

	IF(T1 .GT. 0.0_LDP)THEN
	IF(T1 .GT. 0.0D0)THEN

	  T1=8.0_LDP
	  T1=8.0D0

	IF(T1 .LT. 2.0_LDP)T1=2.0_LDP
	IF(T1 .LT. 2.0D0)T1=2.0D0

	TAU_OLD(1)=FLUX_MEAN(1)*R(1)/(T1-1.0_LDP)
	TAU_OLD(1)=FLUX_MEAN(1)*R(1)/(T1-1.0D0)

          TB(1:ND)=0.0_LDP                              !Used for dCHIdR
          TB(1:ND)=0.0D0                              !Used for dCHIdR

	  IF(T1 .GT. 0.0_LDP)THEN
	  IF(T1 .GT. 0.0D0)THEN

	    T1=8.0_LDP
	    T1=8.0D0

	  IF(T1 .LT. 2.0_LDP)T1=2.0_LDP
	  IF(T1 .LT. 2.0D0)T1=2.0D0

	  TAU_OLD(1)=TA(1)*R(1)/(T1-1.0_LDP)
	  TAU_OLD(1)=TA(1)*R(1)/(T1-1.0D0)

	  TAU_OLD(1:ND)=LOG10( TAU_OLD(1:ND)/(1.0_LDP + MIN(20.0_LDP,V(1:ND))) )   !(0.1D0+MIN(V(1)/2,V(1:ND)))**2 )
	  TAU_OLD(1:ND)=LOG10( TAU_OLD(1:ND)/(1.0D0 + MIN(20.0D0,V(1:ND))) )   !(0.1D0+MIN(V(1)/2,V(1:ND)))**2 )

	  TAU_OLD(1:ND)=TAU_OLD(1:ND)/(1.0_LDP+0.5_LDP*MIN(ABS(TAU_OLD(1:ND)),2.0_LDP))
	  TAU_OLD(1:ND)=TAU_OLD(1:ND)/(1.0+0.5D0*MIN(ABS(TAU_OLD(1:ND)),2.0D0))

	  IF(STRETCH_POW .LT. 1 .OR. STRETCH_POW .GT. 5.0_LDP)THEN
	  IF(STRETCH_POW .LT. 1 .OR. STRETCH_POW .GT. 5.0D0)THEN

	  TAU(IST)=0.5_LDP*(TAU(IST-1)+TAU(IST+1))
	  TAU(IST)=0.5D0*(TAU(IST-1)+TAU(IST+1))

	  TAU(IEND)=0.5_LDP*(TAU(IEND-1)+TAU(IEND+1))
	  TAU(IEND)=0.5D0*(TAU(IEND-1)+TAU(IEND+1))

	    T1=(EXP(TAU(IEND)-TAU(IEND-1))-1.0_LDP)/(1.0_LDP-EXP(TAU(IEND-2)-TAU(IEND-1)))
	    T1=(EXP(TAU(IEND)-TAU(IEND-1))-1.0D0)/(1.0D0-EXP(TAU(IEND-2)-TAU(IEND-1)))

	    T2=(EXP(TAU(IEND+1)-TAU(IEND))-1.0_LDP)/(1.0_LDP-EXP(TAU(IEND-1)-TAU(IEND)))
	    T2=(EXP(TAU(IEND+1)-TAU(IEND))-1.0D0)/(1.0D0-EXP(TAU(IEND-1)-TAU(IEND)))

	    IF(T2 .LT. 1.0_LDP)T2=1.0_LDP/T2
	    IF(T2 .LT. 1.0D0)T2=1.0D0/T2

	    IF(T2 .GT. 1.4_LDP .AND. T2 .GT. T1)THEN
	    IF(T2 .GT. 1.4D0 .AND. T2 .GT. T1)THEN

	    TAU(ND-1)=TAU(ND)-0.1_LDP*DLOG_TAU
	    TAU(ND-1)=TAU(ND)-0.1D0*DLOG_TAU

	    TAU(ND-2)=TAU(ND)-0.35_LDP*DLOG_TAU
	    TAU(ND-2)=TAU(ND)-0.35D0*DLOG_TAU

	    TAU(2)=TAU(1)+0.02_LDP*DLOG_TAU
	    TAU(2)=TAU(1)+0.02D0*DLOG_TAU

	    TAU(3)=TAU(1)+0.2_LDP*DLOG_TAU
	    TAU(3)=TAU(1)+0.2D0*DLOG_TAU

	  T1=0.0_LDP
	  T1=0.0D0

	  IF(I .NE. 1 .AND. I .NE. ND)T1=(EXP(TAU(I+1)-TAU(I))-1.0_LDP)/(1.0_LDP-EXP(TAU(I-1)-TAU(I)))
	  IF(I .NE. 1 .AND. I .NE. ND)T1=(EXP(TAU(I+1)-TAU(I))-1.0D0)/(1.0D0-EXP(TAU(I-1)-TAU(I)))

	R=10.0_LDP**(LOG_R)
	R=10.0D0**(LOG_R)


do_vel_regrid.f

	dV_MAX=500.0_LDP
	dV_MAX=500.0D0

	dV=EXP(2.0_LDP*LOG(V(JST)/V(JEND))/(NI-1))
	dV=EXP(2.0D0*LOG(V(JST)/V(JEND))/(NI-1))

	dV=1.04_LDP
	dV=1.04D0

	    dV=dV*1.02_LDP
	    dV=dV*1.02D0

	  IF(VNEW(L)-0.2_LDP*(VNEW(L-1)-VNEW(L)) .LE. V(JEND))THEN
	  IF(VNEW(L)-0.2D0*(VNEW(L-1)-VNEW(L)) .LE. V(JEND))THEN

	  LOG_ATOM_DEN=T1*LOG(POP_ATOM(K+1))+(1.0_LDP-T1)*LOG(POP_ATOM(K))
	  LOG_ATOM_DEN=T1*LOG(POP_ATOM(K+1))+(1.0D0-T1)*LOG(POP_ATOM(K))

	  T2=-1000.0_LDP
	  T2=-1000.0D0

	    CUR_LOG_POP(I)=T1*LOG(POPS(I,K+1))+(1.0_LDP-T1)*LOG(POPS(I,K))
	    CUR_LOG_POP(I)=T1*LOG(POPS(I,K+1))+(1.0D0-T1)*LOG(POPS(I,K))

	    IF(CUR_LOG_POP(I) .GT. LOG_ATOM_DEN-12.0_LDP)THEN
	    IF(CUR_LOG_POP(I) .GT. LOG_ATOM_DEN-12.0D0)THEN

	    VNEW(L)=VNEW(L-1)+0.95_LDP*(VNEW(L)-VNEW(L-1))
	    VNEW(L)=VNEW(L-1)+0.95D0*(VNEW(L)-VNEW(L-1))

	TA=0.0_LDP; TB=0.0_LDP
	TA=0.0D0; TB=0.0D0

	  REVX(I)=1.0_LDP+FLOAT((I-1)*(L-1))/(NI-1)
	  REVX(I)=1.0D0+FLOAT((I-1)*(L-1))/(NI-1)

	    R(2)=R(1)-0.02_LDP*(REVR(1)-REVR(2))
	    R(2)=R(1)-0.02D0*(REVR(1)-REVR(2))

	    R(3)=R(1)-0.30_LDP*(REVR(1)-REVR(2))
	    R(3)=R(1)-0.30D0*(REVR(1)-REVR(2))

	    R(ND-2)=R(ND)+0.4_LDP*(REVR(NI-1)-REVR(NI))
	    R(ND-2)=R(ND)+0.4D0*(REVR(NI-1)-REVR(NI))

	    R(ND-1)=R(ND)+0.1_LDP*(REVR(NI-1)-REVR(NI))
	    R(ND-1)=R(ND)+0.1D0*(REVR(NI-1)-REVR(NI))


do_vel_regrid_v2.f

	dV_MAX=500.0_LDP
	dV_MAX=500.0D0

	dV=EXP(2.0_LDP*LOG(V(JST)/V(JEND))/(NI-1))
	dV=EXP(2.0D0*LOG(V(JST)/V(JEND))/(NI-1))

	dV=1.04_LDP
	dV=1.04D0

	    dV=dV*1.02_LDP
	    dV=dV*1.02D0

	  IF(VNEW(L)-0.2_LDP*(VNEW(L-1)-VNEW(L)) .LE. V(JEND))THEN
	  IF(VNEW(L)-0.2D0*(VNEW(L-1)-VNEW(L)) .LE. V(JEND))THEN

	  LOG_ATOM_DEN=T1*LOG(POP_ATOM(K+1))+(1.0_LDP-T1)*LOG(POP_ATOM(K))
	  LOG_ATOM_DEN=T1*LOG(POP_ATOM(K+1))+(1.0D0-T1)*LOG(POP_ATOM(K))

	  T2=-1000.0_LDP
	  T2=-1000.0D0

	    CUR_LOG_POP(I)=T1*LOG(POPS(I,K+1))+(1.0_LDP-T1)*LOG(POPS(I,K))
	    CUR_LOG_POP(I)=T1*LOG(POPS(I,K+1))+(1.0D0-T1)*LOG(POPS(I,K))

	    IF(CUR_LOG_POP(I) .GT. LOG_ATOM_DEN-12.0_LDP)THEN
	    IF(CUR_LOG_POP(I) .GT. LOG_ATOM_DEN-12.0D0)THEN

	    VNEW(L)=VNEW(L-1)+0.95_LDP*(VNEW(L)-VNEW(L-1))
	    VNEW(L)=VNEW(L-1)+0.95D0*(VNEW(L)-VNEW(L-1))

	TA=0.0_LDP; TB=0.0_LDP
	TA=0.0D0; TB=0.0D0

	  REVX(I)=1.0_LDP+T1/(NI-1)
	  REVX(I)=1.0D0+T1/(NI-1)

	    R(2)=R(1)-0.02_LDP*(REVR(1)-REVR(2))
	    R(2)=R(1)-0.02D0*(REVR(1)-REVR(2))

	    R(3)=R(1)-0.30_LDP*(REVR(1)-REVR(2))
	    R(3)=R(1)-0.30D0*(REVR(1)-REVR(2))

	    R(ND-2)=R(ND)+0.4_LDP*(REVR(NI-1)-REVR(NI))
	    R(ND-2)=R(ND)+0.4D0*(REVR(NI-1)-REVR(NI))

	    R(ND-1)=R(ND)+0.1_LDP*(REVR(NI-1)-REVR(NI))
	    R(ND-1)=R(ND)+0.1D0*(REVR(NI-1)-REVR(NI))


do_wind_vel_v1.f

	GRAV_CONST=6.67259E-08_LDP
	GRAV_CONST=6.67259D-08

	MSUN=1.989E+33_LDP
	MSUN=1.989D+33

	ALPHA=0.5_LDP; ALLOWED_CHANGE_IN_GRAD=0.02_LDP; IT_FREQ=10; NINS=0
	ALPHA=0.5D0; ALLOWED_CHANGE_IN_GRAD=0.02D0; IT_FREQ=10; NINS=0

	  ALLOCATE(GRAD_STORE(ND_RD)); GRAD_STORE=0.0_LDP
	  ALLOCATE(GRAD_STORE(ND_RD)); GRAD_STORE=0.0D0

	ERROR=0.0_LDP
	ERROR=0.0D0

	  T1=2.0_LDP*ABS(GRAD_RD(I)-GRAD_STORE(I))/( ABS(GRAD_RD(I))+ABS(GRAD_STORE(I)) )
	  T1=2.0D0*ABS(GRAD_RD(I)-GRAD_STORE(I))/( ABS(GRAD_RD(I))+ABS(GRAD_STORE(I)) )

            SIGMA_OLD(I)=T1*R_OLD(I)/V_OLD(I)-1.0_LDP
            SIGMA_OLD(I)=T1*R_OLD(I)/V_OLD(I)-1.0D0

	    RSOUND=R_OLD(J)*T1 + (1.0_LDP-T1)*R_OLD(J+1)
	    RSOUND=R_OLD(J)*T1 + (1.0D0-T1)*R_OLD(J+1)

	VCRIT=1.0E-10_LDP*SQRT(GRAV_CONST*(MSTAR*MSUN)/RSTAR)
	VCRIT=1.0D-10*SQRT(GRAV_CONST*(MSTAR*MSUN)/RSTAR)

          IF(V_OLD(I) .GT. VSOUND)GRAD_MIN(I)=1.02E-20_LDP*GRAV_CONST*(MSTAR*MSUN)/R_OLD(I)**2
          IF(V_OLD(I) .GT. VSOUND)GRAD_MIN(I)=1.02D-20*GRAV_CONST*(MSTAR*MSUN)/R_OLD(I)**2

	F_CORR=0.0_LDP
	F_CORR=0.0D0

	  GINT=0.0_LDP
	  GINT=0.0D0

	    GINT=GINT+0.5_LDP*(RHAT(I)-RHAT(I+1))*(MAX(GRAD_MIN(I),GRAD(I)+F_CORR(I))+
	    GINT=GINT+0.5D0*(RHAT(I)-RHAT(I+1))*(MAX(GRAD_MIN(I),GRAD(I)+F_CORR(I))+

	    T1=2*LOG(VX)-VX*VX-2*VCRIT*VCRIT*(1.0_LDP/RHAT(I)-1.0_LDP/RX)-2.0_LDP*GINT
	    T1=2*LOG(VX)-VX*VX-2*VCRIT*VCRIT*(1.0D0/RHAT(I)-1.0D0/RX)-2.0D0*GINT

	    V_NEW=0.5_LDP*(V_NEW+V_OLD)
	    V_NEW=0.5D0*(V_NEW+V_OLD)

	    CLUMP_FAC=0.5_LDP*(CLUMP_FAC_OLD+F_CORR)
	    CLUMP_FAC=0.5D0*(CLUMP_FAC_OLD+F_CORR)

            SIGMA_NEW(I)=R_OLD(I)*SIGMA_NEW(I)/V_NEW(I)-1.0_LDP
            SIGMA_NEW(I)=R_OLD(I)*SIGMA_NEW(I)/V_NEW(I)-1.0D0

	R_RD(ND_RD/2)=R_RD(ND_RD/2)*(1.0_LDP+1.0E-12_LDP)
	R_RD(ND_RD/2)=R_RD(ND_RD/2)*(1.0D0+1.0D-12)


eval_adiabatic_v2.f

	  SCALE=1.0E+09_LDP*BOLTZMANN_CONSTANT()/4.0_LDP/PI
	  SCALE=1.0D+09*BOLTZMANN_CONSTANT()/4.0D0/PI

	1                (1.5_LDP*AD_CR_DT(I)+SIGMA(I)+3.0_LDP)/R(I)
	1                (1.5*AD_CR_DT(I)+SIGMA(I)+3.0D0)/R(I)

	1                         1.5_LDP*(POPION(1)+ED(1))*SCALE*VEL(1)/
	1                         1.5D0*(POPION(1)+ED(1))*SCALE*VEL(1)/

	1                         1.5_LDP*(POPION(1)+ED(1))*SCALE*VEL(1)*
	1                         1.5D0*(POPION(1)+ED(1))*SCALE*VEL(1)*

	1                           1.5_LDP*(POPION(I)+ED(I))*SCALE*VEL(I)*
	1                           1.5D0*(POPION(I)+ED(I))*SCALE*VEL(I)*

	1                           1.5_LDP*(POPION(I)+ED(I))*SCALE*VEL(I)*
	1                           1.5D0*(POPION(I)+ED(I))*SCALE*VEL(I)*

	    T1=1.5_LDP*POPION(1)*SCALE*VEL(1)/R(1)
	    T1=1.5D0*POPION(1)*SCALE*VEL(1)/R(1)

	SCALE=0.1_LDP*BOLTZMANN_CONSTANT()
	SCALE=0.1*BOLTZMANN_CONSTANT()

	1                VEL(I)*T(I)/R(I)*(3.0_LDP+SIGMA(I))
	1                VEL(I)*T(I)/R(I)*(3.0D0+SIGMA(I))

	1                (1.5_LDP*AD_CR_DT(I))
	1                (1.5D0*AD_CR_DT(I))


eval_adiabatic_v3.f

	TOT_ENERGY(1:NT)=0.0_LDP
	TOT_ENERGY(1:NT)=0.0D0

	ION_EN(1:NT)=0.0_LDP
	ION_EN(1:NT)=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	INT_EN(:)=0.0_LDP
	INT_EN(:)=0.0D0

	COL_EN(:)=0.0_LDP
	COL_EN(:)=0.0D0

	SCALE=1.0E+09_LDP*BOLTZMANN_CONSTANT()/4.0_LDP/PI
	SCALE=1.0D+09*BOLTZMANN_CONSTANT()/4.0D0/PI

	  A(I)=1.5_LDP*SCALE*(POP_ATOM(I)+ED(I))*V(I)/T1
	  A(I)=1.5D0*SCALE*(POP_ATOM(I)+ED(I))*V(I)/T1

	  B(I)=SCALE*(POP_ATOM(I)+ED(I))*V(I)*(3.0_LDP+SIGMA(I))/R(I)
	  B(I)=SCALE*(POP_ATOM(I)+ED(I))*V(I)*(3.0D0+SIGMA(I))/R(I)

	  C(I)=1.5_LDP*SCALE*POP_ATOM(I)*V(I)/T1
	  C(I)=1.5D0*SCALE*POP_ATOM(I)*V(I)/T1

	T1=4.0E-10_LDP*PI
	T1=4.0D-10*PI


eval_rad_decay_v1.f

	PI=ACOS(-1.0_LDP)
	PI=ACOS(-1.0D0)

	SCALE=1.0E+10_LDP/4.0_LDP/PI
	SCALE=1.0D+10/4.0D0/PI


evalse_lowt_v1.f

	      IF(ION_LEV .EQ. 0 .OR. MINVAL(ATM(ID)%XzVLTE) .GT. 0.0_LDP)EXIT
	      IF(ION_LEV .EQ. 0 .OR. MINVAL(ATM(ID)%XzVLTE) .GT. 0.0D0)EXIT

	        SUM_SE=0.0_LDP
	        SUM_SE=0.0D0

	          IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0_LDP .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0_LDP)THEN
	          IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0D0 .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0D0)THEN

	            IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0_LDP .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0_LDP)THEN
	            IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0D0 .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0D0)THEN


evalse_lowt_v2.f

	       XzVLTE_MIN(ID)=0.0_LDP
	       XzVLTE_MIN(ID)=0.0D0

	  IF(ATM(ID)%XzV_PRES .AND. XzVLTE_MIN(ID) .EQ. 0.0_LDP)THEN
	  IF(ATM(ID)%XzV_PRES .AND. XzVLTE_MIN(ID) .EQ. 0.0D0)THEN

	        SUM_SE=0.0_LDP
	        SUM_SE=0.0D0

	          IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0_LDP .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0_LDP)THEN
	          IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0D0 .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0D0)THEN

	            IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0_LDP .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0_LDP)THEN
	            IF(ATM(ID)%XzVLTE(J,K) .EQ. 0.0D0 .AND. ATM(ID)%WSXzV(J,K,IPR) .GT. 0.0D0)THEN


evalse_qwvj_v6.f

	  SUM_SE=0.0_LDP
	  SUM_SE=0.0D0

	  SUM_VJ_R=0.0_LDP
	  SUM_VJ_R=0.0D0

	  SUM_VJ_P=0.0_LDP
	  SUM_VJ_P=0.0D0


evalse_qwvj_v7.f

	  SUM_SE=0.0_LDP
	  SUM_SE=0.0D0

	  SUM_VJ_R=0.0_LDP
	  SUM_VJ_R=0.0D0

	  SUM_VJ_P=0.0_LDP
	  SUM_VJ_P=0.0D0

	    IF(WSE(I,J) .NE. 0.0_LDP)THEN
	    IF(WSE(I,J) .NE. 0.0D0)THEN


evalse_qwvj_v8.f

	PC=1.0E+15_LDP*PLANCKS_CONSTANT()            !1.0D+15 due to units of NU.
	PC=1.0D+15*PLANCKS_CONSTANT()            !1.0D+15 due to units of NU.

	  SUM_SE=0.0_LDP
	  SUM_SE=0.0D0

	  SUM_VJ_R=0.0_LDP
	  SUM_VJ_R=0.0D0

	  SUM_VJ_P=0.0_LDP
	  SUM_VJ_P=0.0D0

	    IF(WSE(I,J) .NE. 0.0_LDP)THEN
	    IF(WSE(I,J) .NE. 0.0D0)THEN


evalse_x_qwvj_v4.f

	  SUM_SE=0.0_LDP
	  SUM_SE=0.0D0

	  SUM_VJ_R=0.0_LDP
	  SUM_VJ_R=0.0D0

	  SUM_VJ_P=0.0_LDP
	  SUM_VJ_P=0.0D0

	  IF(JREC(J) .NE. 0.0_LDP)THEN
	  IF(JREC(J) .NE. 0.0D0)THEN

	    B_ION=0.0_LDP
	    B_ION=0.0D0

	    J_B_ION=0.0_LDP
	    J_B_ION=0.0D0


eval_shock_power.f

      PI             = ACOS(-1.0_LDP)
      PI             = ACOS(-1.0D0)

      SCALE          = 1.0E+10_LDP/4.0_LDP/PI
      SCALE          = 1.0D+10/4.0D0/PI


eval_temp_ddt_v1.f

	TOT_ENERGY(1:NT)=0.0_LDP
	TOT_ENERGY(1:NT)=0.0D0

	ION_EN(1:NT)=0.0_LDP
	ION_EN(1:NT)=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	OLD_POP_ATOM=0.0_LDP
	OLD_POP_ATOM=0.0D0

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	DELTA_T_SECS=1.0E+05_LDP*(R(ND)-OLD_R(ND))/V(ND)
	DELTA_T_SECS=1.0D+05*(R(ND)-OLD_R(ND))/V(ND)

	INT_EN(:)=0.0_LDP
	INT_EN(:)=0.0D0

	COL_EN(:)=0.0_LDP
	COL_EN(:)=0.0D0

	OLD_INT_EN(:)=0.0_LDP
	OLD_INT_EN(:)=0.0D0

	OLD_COL_EN(:)=0.0_LDP
	OLD_COL_EN(:)=0.0D0

	SCALE=1.0E+14_LDP*BOLTZMANN_CONSTANT()/4.0_LDP/PI
	SCALE=1.0D+14*BOLTZMANN_CONSTANT()/4.0D0/PI

	  EK_VEC(I)=1.5_LDP*SCALE*POP_ATOM(I)/DELTA_T_SECS
	  EK_VEC(I)=1.5D0*SCALE*POP_ATOM(I)/DELTA_T_SECS

 	    WORK(I)=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*T(I)- (1.0_LDP+OLD_GAMMA(I))*OLD_T(I) ) +
 	    WORK(I)=EK_VEC(I)*( (1.0D0+GAMMA(I))*T(I)- (1.0D0+OLD_GAMMA(I))*OLD_T(I) ) +

	T1=4.0E-10_LDP*PI
	T1=4.0D-10*PI

	  AD_CR_DT(I)=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*T(I)- (1.0_LDP+OLD_GAMMA(I))*OLD_T(I) )
	  AD_CR_DT(I)=EK_VEC(I)*( (1.0D0+GAMMA(I))*T(I)- (1.0D0+OLD_GAMMA(I))*OLD_T(I) )

	    T1=EK_VEC(I)*(1.0_LDP+GAMMA(I))*T(I)
	    T1=EK_VEC(I)*(1.0D0+GAMMA(I))*T(I)

	    T3=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*T(I)-(1.0_LDP+OLD_GAMMA(I))*OLD_T(I) )
	    T3=EK_VEC(I)*( (1.0D0+GAMMA(I))*T(I)-(1.0D0+OLD_GAMMA(I))*OLD_T(I) )


eval_temp_ddt_v2.f

	TOT_ENERGY(1:NT)=0.0_LDP
	TOT_ENERGY(1:NT)=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	OLD_POP_ATOM=0.0_LDP
	OLD_POP_ATOM=0.0D0

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	DELTA_T_SECS=1.0E+05_LDP*(R(ND)-OLD_R(ND))/V(ND)
	DELTA_T_SECS=1.0D+05*(R(ND)-OLD_R(ND))/V(ND)

	INT_EN(:)=0.0_LDP
	INT_EN(:)=0.0D0

	OLD_INT_EN(:)=0.0_LDP
	OLD_INT_EN(:)=0.0D0

	EHB_CONSTANT=4.0E-10_LDP*PI
	EHB_CONSTANT=4.0D-10*PI

	SCALE=1.0E+14_LDP*BOLTZMANN_CONSTANT()/4.0_LDP/PI
	SCALE=1.0D+14*BOLTZMANN_CONSTANT()/4.0D0/PI

	  EK_VEC(I)=1.5_LDP*SCALE*POP_ATOM(I)/DELTA_T_SECS
	  EK_VEC(I)=1.5D0*SCALE*POP_ATOM(I)/DELTA_T_SECS

 	    WORK(I)=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*T(I)- (1.0_LDP+OLD_GAMMA(I))*OLD_T(I) ) +
 	    WORK(I)=EK_VEC(I)*( (1.0D0+GAMMA(I))*T(I)- (1.0D0+OLD_GAMMA(I))*OLD_T(I) ) +

	  AD_CR_DT(I)=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*T(I)- (1.0_LDP+OLD_GAMMA(I))*OLD_T(I) )
	  AD_CR_DT(I)=EK_VEC(I)*( (1.0D0+GAMMA(I))*T(I)- (1.0D0+OLD_GAMMA(I))*OLD_T(I) )

	    T1=EK_VEC(I)*(1.0_LDP+GAMMA(I))*T(I)
	    T1=EK_VEC(I)*(1.0D0+GAMMA(I))*T(I)

	    T3=EK_VEC(I)*( (1.0_LDP+GAMMA(I))*T(I)-(1.0_LDP+OLD_GAMMA(I))*OLD_T(I) )
	    T3=EK_VEC(I)*( (1.0D0+GAMMA(I))*T(I)-(1.0D0+OLD_GAMMA(I))*OLD_T(I) )

	    T1=4*ACOS(-1.0_LDP)*1.0E-10_LDP
	    T1=4*ACOS(-1.0D0)*1.0D-10

	      T2=T1*EK_VEC(I)*(1.0_LDP+GAMMA(I))*T(I)*DELTA_T_SECS
	      T2=T1*EK_VEC(I)*(1.0D0+GAMMA(I))*T(I)*DELTA_T_SECS

	      T4=4.0E+16_LDP*STEFAN_BOLTZ()*(T(I)**4)/SPEED_OF_LIGHT()
	      T4=4.0D+16*STEFAN_BOLTZ()*(T(I)**4)/SPEED_OF_LIGHT()


fiddle_pop_corrections.f

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

        LIT_LIM=1.0_LDP-CHANGE_LIM
        LIT_LIM=1.0D0-CHANGE_LIM

	MIN_SCALE=1.0E+20_LDP
	MIN_SCALE=1.0D+20

	RELAX_VARIABLE=1.0_LDP
	RELAX_VARIABLE=1.0D0

	T_LIM_VARIABLE=0.2_LDP
	T_LIM_VARIABLE=0.2D0

	POP_LIM_VARIABLE=100.0_LDP*CHANGE_LIM		!=>implies no effect
	POP_LIM_VARIABLE=100.0D0*CHANGE_LIM		!=>implies no effect

	BAD_DECREASE_LIMIT=1.0_LDP-1.0E-10_LDP
	BAD_DECREASE_LIMIT=1.0D0-1.0D-10

	BAD_INCREASE_LIMIT=-1.0E+10_LDP
	BAD_INCREASE_LIMIT=-1.0D+10

	    RELAX_VARIABLE=1.0_LDP; T_LIM_VARIABLE=0.2_LDP
	    RELAX_VARIABLE=1.0D0; T_LIM_VARIABLE=0.2D0

	    POP_LIM_VARIABLE=100.0_LDP*CHANGE_LIM		!=>implies no effect
	    POP_LIM_VARIABLE=100.0D0*CHANGE_LIM		!=>implies no effect

	  IF(T_LIM_VARIABLE .LT. 0.0_LDP .OR. T_LIM_VARIABLE .GT. 0.20_LDP)THEN
	  IF(T_LIM_VARIABLE .LT. 0.0D0 .OR. T_LIM_VARIABLE .GT. 0.20D0)THEN

	    T_LIM_VARIABLE=0.2_LDP
	    T_LIM_VARIABLE=0.2D0

	  IF(POP_LIM_VARIABLE .LE. 1.0_LDP)THEN
	  IF(POP_LIM_VARIABLE .LE. 1.0D0)THEN

	    POP_LIM_VARIABLE=100.0_LDP*CHANGE_LIM		!=>implies no effect
	    POP_LIM_VARIABLE=100.0D0*CHANGE_LIM		!=>implies no effect

	  IF(RELAX_VARIABLE .LT. 0.0_LDP .OR. RELAX_VARIABLE .GT. 2.0_LDP)THEN
	  IF(RELAX_VARIABLE .LT. 0.0D0 .OR. RELAX_VARIABLE .GT. 2.0D0)THEN

	    RELAX_VARIABLE=1.0_LDP
	    RELAX_VARIABLE=1.0D0

	IF(LAMBDA_IT)RELAX_PARAM(1:ND)=1.0_LDP
	IF(LAMBDA_IT)RELAX_PARAM(1:ND)=1.0D0

	IF(LAMBDA_IT)POP_LIM(1:ND)=100.0_LDP*CHANGE_LIM
	IF(LAMBDA_IT)POP_LIM(1:ND)=100.0D0*CHANGE_LIM

	      IF(POPS(J,I) .GT. 1.0E-10_LDP*POPS(NT-1,I))THEN
	      IF(POPS(J,I) .GT. 1.0D-10*POPS(NT-1,I))THEN

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    IF(SCALE .GT. 1.0_LDP)SCALE=1.0_LDP             !i.e., will not force T to T_MIN
	    IF(SCALE .GT. 1.0D0)SCALE=1.0D0             !i.e., will not force T to T_MIN

	    IF(SCALE .EQ. 1.0_LDP)SCALE=RELAX_PARAM(I)
	    IF(SCALE .EQ. 1.0D0)SCALE=RELAX_PARAM(I)

	    T2=(POP_LIM(I)-1.0_LDP)/POP_LIM(I)
	    T2=(POP_LIM(I)-1.0D0)/POP_LIM(I)

	    DPTH_LIT_LIM=MAX(LIT_LIM,1.0_LDP-POP_LIM(I))
	    DPTH_LIT_LIM=MAX(LIT_LIM,1.0D0-POP_LIM(I))

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-T1)
	      POPS(J,I)=POPS(J,I)*(1.0D0-T1)


fiddle_pop_corrections_v2.f

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

        LIT_LIM=1.0_LDP-CHANGE_LIM
        LIT_LIM=1.0D0-CHANGE_LIM

	MIN_SCALE=1.0E+20_LDP
	MIN_SCALE=1.0D+20

	RELAX_VARIABLE=1.0_LDP
	RELAX_VARIABLE=1.0D0

	POP_LIM_VARIABLE=100.0_LDP*CHANGE_LIM		!=>implies no effect
	POP_LIM_VARIABLE=100.0D0*CHANGE_LIM		!=>implies no effect

	BAD_DECREASE_LIMIT=1.0_LDP-1.0E-10_LDP
	BAD_DECREASE_LIMIT=1.0D0-1.0D-10

	BAD_INCREASE_LIMIT=-1.0E+10_LDP
	BAD_INCREASE_LIMIT=-1.0D+10

	    RELAX_VARIABLE=1.0_LDP; T_LIM_VARIABLE=0.2_LDP
	    RELAX_VARIABLE=1.0D0; T_LIM_VARIABLE=0.2D0

	    POP_LIM_VARIABLE=100.0_LDP*CHANGE_LIM		!=>implies no effect
	    POP_LIM_VARIABLE=100.0D0*CHANGE_LIM		!=>implies no effect

	  IF(T_LIM_VARIABLE .LT. 0.0_LDP .OR. T_LIM_VARIABLE .GT. 0.20_LDP)THEN
	  IF(T_LIM_VARIABLE .LT. 0.0D0 .OR. T_LIM_VARIABLE .GT. 0.20D0)THEN

	    T_LIM_VARIABLE=0.2_LDP
	    T_LIM_VARIABLE=0.2D0

	  IF(POP_LIM_VARIABLE .LE. 1.0_LDP)THEN
	  IF(POP_LIM_VARIABLE .LE. 1.0D0)THEN

	    POP_LIM_VARIABLE=100.0_LDP*CHANGE_LIM		!=>implies no effect
	    POP_LIM_VARIABLE=100.0D0*CHANGE_LIM		!=>implies no effect

	  IF(RELAX_VARIABLE .LT. 0.0_LDP .OR. RELAX_VARIABLE .GT. 2.0_LDP)THEN
	  IF(RELAX_VARIABLE .LT. 0.0D0 .OR. RELAX_VARIABLE .GT. 2.0D0)THEN

	    RELAX_VARIABLE=1.0_LDP
	    RELAX_VARIABLE=1.0D0

	IF(LAMBDA_IT)RELAX_PARAM(1:ND)=1.0_LDP
	IF(LAMBDA_IT)RELAX_PARAM(1:ND)=1.0D0

	IF(LAMBDA_IT)POP_LIM(1:ND)=100.0_LDP*CHANGE_LIM
	IF(LAMBDA_IT)POP_LIM(1:ND)=100.0D0*CHANGE_LIM

	      IF(POPS(J,I) .GT. 1.0E-10_LDP*POPS(NT-1,I))THEN
	      IF(POPS(J,I) .GT. 1.0D-10*POPS(NT-1,I))THEN

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    IF(SCALE .GT. 1.0_LDP)SCALE=1.0_LDP             !i.e., will not force T to T_MIN
	    IF(SCALE .GT. 1.0D0)SCALE=1.0D0             !i.e., will not force T to T_MIN

	    IF(SCALE .EQ. 1.0_LDP)SCALE=RELAX_PARAM(I)
	    IF(SCALE .EQ. 1.0D0)SCALE=RELAX_PARAM(I)

	    T2=(POP_LIM(I)-1.0_LDP)/POP_LIM(I)
	    T2=(POP_LIM(I)-1.0D0)/POP_LIM(I)

	    DPTH_LIT_LIM=MAX(LIT_LIM,1.0_LDP-POP_LIM(I))
	    DPTH_LIT_LIM=MAX(LIT_LIM,1.0D0-POP_LIM(I))

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-T1)
	      POPS(J,I)=POPS(J,I)*(1.0D0-T1)


fixpop_in_ba_v2.f

	        IF(T1 .LT. 1.0E-15_LDP)THEN
	        IF(T1 .LT. 1.0D-15)THEN

	          BA(LOC_EQ,:)=0.0_LDP
	          BA(LOC_EQ,:)=0.0D0

	          BA(LOC_EQ,LOC_EQ)=1.0_LDP
	          BA(LOC_EQ,LOC_EQ)=1.0D0

	          STEQ(LOC_EQ)=0.0_LDP
	          STEQ(LOC_EQ)=0.0D0

	        BA(LOC_EQ,:)=0.0_LDP
	        BA(LOC_EQ,:)=0.0D0

	        BA(LOC_EQ,LOC_EQ)=1.0_LDP
	        BA(LOC_EQ,LOC_EQ)=1.0D0

	        STEQ(LOC_EQ)=0.0_LDP
	        STEQ(LOC_EQ)=0.0D0

	      IF( T1/POP_SPECIES(DEPTH_INDX,SPECIES_LNK(ID)) .GT. 1.0E-15_LDP )FIX_N=-10
	      IF( T1/POP_SPECIES(DEPTH_INDX,SPECIES_LNK(ID)) .GT. 1.0D-15 )FIX_N=-10

	        BA(I,J)=0.0_LDP
	        BA(I,J)=0.0D0

	      BA(I,I)=1.0_LDP
	      BA(I,I)=1.0D0

	      STEQ(I)=0.0_LDP
	      STEQ(I)=0.0D0


fixpop_in_ba_v3.f

	  BA(NT-1,:)=0.0_LDP
	  BA(NT-1,:)=0.0D0

	    BA(NT-1,NT-1)=1.0_LDP
	    BA(NT-1,NT-1)=1.0D0

	    STEQ(NT-1)=0.0_LDP
	    STEQ(NT-1)=0.0D0

	  BA(NT,:)=0.0_LDP
	  BA(NT,:)=0.0D0

	    BA(NT,NT)=1.0_LDP
	    BA(NT,NT)=1.0D0

	    STEQ(NT)=0.0_LDP
	    STEQ(NT)=0.0D0

	  BA(NT,:)=0.0_LDP
	  BA(NT,:)=0.0D0

	    BA(NT,NT)=1.0_LDP
	    BA(NT,NT)=1.0D0

	    STEQ(NT)=0.0_LDP
	    STEQ(NT)=0.0D0

	    IF( (FIX_SPECIES(ISPEC) .NE. 0) .OR. T1 .LT. 1.0E-15_LDP)THEN
	    IF( (FIX_SPECIES(ISPEC) .NE. 0) .OR. T1 .LT. 1.0D-15)THEN

	      BA(LOC_EQ,:)=0.0_LDP
	      BA(LOC_EQ,:)=0.0D0

	        BA(LOC_EQ,LOC_EQ)=1.0_LDP
	        BA(LOC_EQ,LOC_EQ)=1.0D0

	        STEQ(LOC_EQ)=0.0_LDP
	        STEQ(LOC_EQ)=0.0D0

	      IF( T1/POP_SPECIES(DEPTH_INDX,SPECIES_LNK(ID)) .GT. 1.0E-15_LDP )FIX_N=-10
	      IF( T1/POP_SPECIES(DEPTH_INDX,SPECIES_LNK(ID)) .GT. 1.0D-15 )FIX_N=-10

	          BA(I,J)=0.0_LDP
	          BA(I,J)=0.0D0

	          BA(I,I)=1.0_LDP
	          BA(I,I)=1.0D0

	          STEQ(I)=0.0_LDP
	          STEQ(I)=0.0D0


fixpop_t.f

	BA_T(:,:,DST:DEND)=0.0_LDP
	BA_T(:,:,DST:DEND)=0.0D0

	BA_T(NT,DIAG_INDX,DST:DEND)=1.0_LDP
	BA_T(NT,DIAG_INDX,DST:DEND)=1.0D0

	STEQ_T(DST:DEND)=0.0_LDP
	STEQ_T(DST:DEND)=0.0D0


generate_full_matrix.f

	REAL(KIND=LDP), PARAMETER :: FAC=1.0E+02_LDP
	REAL(KIND=LDP), PARAMETER :: FAC=1.0D+02

	C_MAT(:,:)=0.0_LDP
	C_MAT(:,:)=0.0D0

	C_ION(:,:)=0.0_LDP
	C_ION(:,:)=0.0D0

	C_NC(:,:)=0.0_LDP
	C_NC(:,:)=0.0D0

	  STEQ_VEC(:)=0.0_LDP
	  STEQ_VEC(:)=0.0D0

	  STEQ_ION(:)=0.0_LDP
	  STEQ_ION(:)=0.0D0

	  STEQ_NC(:)=0.0_LDP
	  STEQ_NC(:)=0.0D0


generate_full_matrix_v2.f

	REAL(KIND=LDP), PARAMETER :: FAC=1.0E+02_LDP
	REAL(KIND=LDP), PARAMETER :: FAC=1.0D+02

	C_MAT(:,:)=0.0_LDP
	C_MAT(:,:)=0.0D0

	C_ION(:,:)=0.0_LDP
	C_ION(:,:)=0.0D0

	C_NC(:,:)=0.0_LDP
	C_NC(:,:)=0.0D0

	  STEQ_VEC(:)=0.0_LDP
	  STEQ_VEC(:)=0.0D0

	  STEQ_ION(:)=0.0_LDP
	  STEQ_ION(:)=0.0D0

	  STEQ_NC(:)=0.0_LDP
	  STEQ_NC(:)=0.0D0

                G_SUM(1:NS)=0.0_LDP
                G_SUM(1:NS)=0.0D0

                EDGE_SUM(1:NS)=0.0_LDP
                EDGE_SUM(1:NS)=0.0D0

	          SUM=0.0_LDP
	          SUM=0.0D0

	            SUM=SUM+5.27296E-03_LDP*T1*STEQ_VEC(EQ)
	            SUM=SUM+5.27296D-03*T1*STEQ_VEC(EQ)

	          SUM=0.0_LDP
	          SUM=0.0D0

	            SUM=SUM+5.27296E-03_LDP*T1*C_MAT(EQ,J)
	            SUM=SUM+5.27296D-03*T1*C_MAT(EQ,J)

	     IF(ZERO_STEQ(I))STEQ_VEC(I)=0.0_LDP
	     IF(ZERO_STEQ(I))STEQ_VEC(I)=0.0D0


generate_full_matrix_v3.f

	REAL(KIND=LDP), SAVE ::  FAC=1.0E+02_LDP
	REAL(KIND=LDP), SAVE ::  FAC=1.0D+02

	C_MAT(:,:)=0.0_LDP
	C_MAT(:,:)=0.0D0

	C_ION(:,:)=0.0_LDP
	C_ION(:,:)=0.0D0

	C_NC(:,:)=0.0_LDP
	C_NC(:,:)=0.0D0

	  STEQ_VEC(:)=0.0_LDP
	  STEQ_VEC(:)=0.0D0

	  STEQ_ION(:)=0.0_LDP
	  STEQ_ION(:)=0.0D0

	  STEQ_NC(:)=0.0_LDP
	  STEQ_NC(:)=0.0D0

                G_SUM(1:NS)=0.0_LDP
                G_SUM(1:NS)=0.0D0

                EDGE_SUM(1:NS)=0.0_LDP
                EDGE_SUM(1:NS)=0.0D0

	          SUM=0.0_LDP
	          SUM=0.0D0

	            SUM=SUM+5.27296E-03_LDP*T1*STEQ_VEC(EQ)
	            SUM=SUM+5.27296D-03*T1*STEQ_VEC(EQ)

	          SUM=0.0_LDP
	          SUM=0.0D0

	            SUM=SUM+5.27296E-03_LDP*T1*C_MAT(EQ,J)
	            SUM=SUM+5.27296D-03*T1*C_MAT(EQ,J)

	     IF(ZERO_STEQ(I))STEQ_VEC(I)=0.0_LDP
	     IF(ZERO_STEQ(I))STEQ_VEC(I)=0.0D0


get_decay_lum_v1.f

	RAD_DECAY_LUM=3.2845E-03_LDP*SUM(WORK)
	RAD_DECAY_LUM=3.2845D-03*SUM(WORK)


get_edep_shock_power.f

      wgt(1:nd) = 0.0_LDP
      wgt(1:nd) = 0.0d0

         if (abs(t1).lt.8._LDP) wgt(i) = exp(-t1*t1)
         if (abs(t1).lt.8.d0) wgt(i) = exp(-t1*t1)

            if (clump_fac(i).le.0._LDP) then
            if (clump_fac(i).le.0.) then

      if (sum(wrk).eq.0._LDP) then
      if (sum(wrk).eq.0.) then

     1     (4._LDP*acos(-1._LDP)*sum(wrk)*1d30)
     1     (4.d0*acos(-1.d0)*sum(wrk)*1d30)


get_excite_temp.f

	    T1=EXP(NU_HDKT*(1.0_LDP/TEXC(L)-1.0_LDP/T(L)))
	    T1=EXP(NU_HDKT*(1.0E0_LDP/TEXC(L)-1.0E0/T(L)))

	    T2=DC(L)-T1*(T(L)/TEXC(L))**1.5_LDP
	    T2=DC(L)-T1*(T(L)/TEXC(L))**1.5E0_LDP

	    T3=( NU_HDKT/TEXC(L)+1.5_LDP*(T(L)/TEXC(L))**(1.5_LDP) )*T1
	    T3=( NU_HDKT/TEXC(L)+1.5E0_LDP*(T(L)/TEXC(L))**(1.5_LDP) )*T1

	      TEXC(L)=TEXC(L)*(1.0_LDP+dTONT)
	      TEXC(L)=TEXC(L)*(1.0E0_LDP+dTONT)

	    IF(ABS(TEXC(L)/OLD_VAL-1.0_LDP) .LT. ACCURACY)EXIT
	    IF(ABS(TEXC(L)/OLD_VAL-1.0E0_LDP) .LT. ACCURACY)EXIT


get_non_loc_gamma_energy.f


get_non_loc_gamma_energy_v2.f

	     VTMP(1)=VTMP(1)+0.01_LDP*(VTMP(1)-VTMP(2))
	     VTMP(1)=VTMP(1)+0.01D0*(VTMP(1)-VTMP(2))

	   CONV_CONST=16.0_LDP*ATAN(1.0_LDP)*1.0E+30_LDP/3.826E+33_LDP
	   CONV_CONST=16.0D0*ATAN(1.0D0)*1.0D+30/3.826D+33

	    T1=-1.0_LDP; NDTMP=-1
	    T1=-1.0; NDTMP=-1

	    IF (ABS( (T1-SN_AGE_DAYS)/(T1+SN_AGE_DAYS) ) .GT. 1.0E-07_LDP) THEN
	    IF (ABS( (T1-SN_AGE_DAYS)/(T1+SN_AGE_DAYS) ) .GT. 1.0D-07) THEN

	    IF( (VTMP(1)-V(1))/V(1) .LT. 1.0E-06_LDP)VTMP(1)=V(1)
	    IF( (VTMP(1)-V(1))/V(1) .LT. 1.0D-06)VTMP(1)=V(1)

	    IF( (V(ND)-VTMP(NDTMP))/V(ND) .LT. 1.0E-06_LDP)VTMP(NDTMP)=V(ND)
	    IF( (V(ND)-VTMP(NDTMP))/V(ND) .LT. 1.0D-06)VTMP(NDTMP)=V(ND)

	    RADIOACTIVE_DECAY_ENERGY=0.0_LDP
	    RADIOACTIVE_DECAY_ENERGY=0.0D0


get_pops_at_prev_time_step_v2.f

	T1=1.0E-12_LDP
	T1=1.0D-12

	    T2=0.0_LDP
	    T2=0.0D0

	OLD_ED=0.0_LDP
	OLD_ED=0.0D0

	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0_LDP)*OLD_POPS(K,J)
	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0D0)*OLD_POPS(K,J)


get_pops_at_prev_time_step_v3.f

	T1=1.0E-06_LDP
	T1=1.0D-06

	      T2=0.0_LDP
	      T2=0.0D0

	OLD_ED=0.0_LDP
	OLD_ED=0.0D0

	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0_LDP)*OLD_POPS(K,J)
	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0D0)*OLD_POPS(K,J)


get_pops_at_prev_time_step_v4.f

	T1=1.0E-06_LDP
	T1=1.0D-06

	      T2=0.0_LDP
	      T2=0.0D0

	OLD_ED=0.0_LDP
	OLD_ED=0.0D0

	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0_LDP)*OLD_POPS(K,J)
	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0D0)*OLD_POPS(K,J)


get_pops_at_prev_time_step_v5.f

	T1=1.0E-06_LDP
	T1=1.0D-06

	      T2=0.0_LDP
	      T2=0.0D0

	OLD_ED=0.0_LDP
	OLD_ED=0.0D0

	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0_LDP)*OLD_POPS(K,J)
	        OLD_ED(J)=OLD_ED(J)+(ATM(ID)%ZXzV-1.0D0)*OLD_POPS(K,J)


get_rad_decay_energy.f


jnk.f

	TA(1:ND)=0.5_LDP                        !Number of electrons per baryon
	TA(1:ND)=0.5D0                        !Number of electrons per baryon

	   TA(1:ND)=0.5_LDP*(1.0_LDP+POP_SPECIES(1:ND,ISPEC)/POP_ATOM(1:ND))
	   TA(1:ND)=0.5D0*(1.0D0+POP_SPECIES(1:ND,ISPEC)/POP_ATOM(1:ND))

	CHI(1:ND)=0.06_LDP*TA(1:ND)*DENSITY(1:ND)*1.0E+10_LDP
	CHI(1:ND)=0.06D0*TA(1:ND)*DENSITY(1:ND)*1.0D+10

	R_EXT(2)=R(1)+(R(2)-R(1))/3.0_LDP
	R_EXT(2)=R(1)+(R(2)-R(1))/3.0D0

	R_EXT(3)=R(1)+(R(3)-R(1))/3.0_LDP
	R_EXT(3)=R(1)+(R(3)-R(1))/3.0D0

	R_EXT(4)=R(1)+(R(3)-R(1))/1.5_LDP
	R_EXT(4)=R(1)+(R(3)-R(1))/1.5D0

	  R_EXT(J+1)=R(I)+(R(I+1)-R(I))/3.0_LDP
	  R_EXT(J+1)=R(I)+(R(I+1)-R(I))/3.0D0

	  R_EXT(J+2)=R(I)+(R(I+1)-R(I))/1.5_LDP
	  R_EXT(J+2)=R(I)+(R(I+1)-R(I))/1.5D0

	R_EXT(ND_EXT-1)=R(ND)+(R(ND-1)-R(ND))/3.0_LDP
	R_EXT(ND_EXT-1)=R(ND)+(R(ND-1)-R(ND))/3.0D0

	DBB=0.0_LDP
	DBB=0.0D0

	T1=0.0_LDP
	T1=0.0D0

	ABS_OPT_DEPTH=0.5_LDP*T1
	ABS_OPT_DEPTH=0.5D0*T1

	CONV_FAC=16.0_LDP*ATAN(1.0_LDP)*1.0E+30_LDP/3.826E+33_LDP
	CONV_FAC=16.0D0*ATAN(1.0D0)*1.0D+30/3.826D+33

	 IF(MINVAL(SM_CLUMP_FAC) .LT. 0.99999_LDP)THEN
	 IF(MINVAL(SM_CLUMP_FAC) .LT. 0.99999D0)THEN


new_ba_up_tst.f

	IF(dJ_CHK_FAC .LT. 1.0E-10_LDP .OR. dJ_CHK_FAC .GT. 0.1_LDP)THEN
	IF(dJ_CHK_FAC .LT. 1.0D-10 .OR. dJ_CHK_FAC .GT. 0.1)THEN

	                IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
	                IF( COMP_VEC(J) .GE. 0.0D0 )THEN

	            IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
	            IF( COMP_VEC(J) .GE. 0.0D0 )THEN

	              IF( COMP_VEC(JJ) .GE. 0.0_LDP )THEN
	              IF( COMP_VEC(JJ) .GE. 0.0D0 )THEN

	              IF( COMP_VEC(JJ) .GE. 0.0_LDP )THEN
	              IF( COMP_VEC(JJ) .GE. 0.0D0 )THEN


old_grid_module.f


open_rw_eddfactor.f

	      IF(T1 .EQ. 0.0_LDP .OR. IOS .NE. 0)THEN
	      IF(T1 .EQ. 0.0D0 .OR. IOS .NE. 0)THEN

	  T1=0.0_LDP
	  T1=0.0D0


out_line_force.f


out_sn_pops.f

	  IF(SUM(POP_SPECIES(I,:)) .NE. 0.0_LDP)ICOUNT=ICOUNT+1
	  IF(SUM(POP_SPECIES(I,:)) .NE. 0.0D0)ICOUNT=ICOUNT+1

	TMP_VEC=1.0E-10_LDP*ROSS_MEAN/DENSITY
	TMP_VEC=1.0D-10*ROSS_MEAN/DENSITY

	  IF(SUM(POP_SPECIES(:,I))  .NE. 0.0_LDP)THEN
	  IF(SUM(POP_SPECIES(:,I))  .NE. 0.0D0)THEN

	    TMP_VEC=1.66E-24_LDP*POP_SPECIES(:,I)*AT_MASS(I)/DENSITY
	    TMP_VEC=1.66D-24*POP_SPECIES(:,I)*AT_MASS(I)/DENSITY

	  TMP_VEC=1.66E-24_LDP*ISO(I)%POP*ISO(I)%MASS/DENSITY
	  TMP_VEC=1.66D-24*ISO(I)%POP*ISO(I)%MASS/DENSITY


out_sn_pops_v2.f

	  IF(SUM(POP_SPECIES(I,:)) .NE. 0.0_LDP)ICOUNT=ICOUNT+1
	  IF(SUM(POP_SPECIES(I,:)) .NE. 0.0D0)ICOUNT=ICOUNT+1

	TMP_VEC=1.0E-10_LDP*ROSS_MEAN/DENSITY
	TMP_VEC=1.0D-10*ROSS_MEAN/DENSITY

	  TMP_VEC=1.66E-24_LDP*POP_SPECIES(:,I)*AT_MASS(I)/DENSITY
	  TMP_VEC=1.66D-24*POP_SPECIES(:,I)*AT_MASS(I)/DENSITY

	  IF(SUM(POP_SPECIES(:,I))  .NE. 0.0_LDP)THEN
	  IF(SUM(POP_SPECIES(:,I))  .NE. 0.0D0)THEN

	  TMP_VEC=1.66E-24_LDP*ISO(I)%POP*ISO(I)%MASS/DENSITY
	  TMP_VEC=1.66D-24*ISO(I)%POP*ISO(I)%MASS/DENSITY


out_sn_pops_v3.f

	  IF(SUM(POP_SPECIES(I,:)) .NE. 0.0_LDP)ICOUNT=ICOUNT+1
	  IF(SUM(POP_SPECIES(I,:)) .NE. 0.0D0)ICOUNT=ICOUNT+1

	TMP_VEC=1.0E-10_LDP*ROSS_MEAN/DENSITY
	TMP_VEC=1.0D-10*ROSS_MEAN/DENSITY

	  IF(SUM(POP_SPECIES(:,I))  .NE. 0.0_LDP)THEN
	  IF(SUM(POP_SPECIES(:,I))  .NE. 0.0D0)THEN

	    TMP_VEC=0.0_LDP
	    TMP_VEC=0.0D0

	        TMP_VEC=TMP_VEC+1.66E-24_LDP*ISO(IS)%POP*ISO(IS)%MASS/DENSITY
	        TMP_VEC=TMP_VEC+1.66D-24*ISO(IS)%POP*ISO(IS)%MASS/DENSITY

	      TMP_VEC=1.66E-24_LDP*POP_SPECIES(:,I)*AT_MASS(I)/DENSITY
	      TMP_VEC=1.66D-24*POP_SPECIES(:,I)*AT_MASS(I)/DENSITY

	    IF(SUM(ISO(IS)%POP) .NE. 0.0_LDP)THEN
	    IF(SUM(ISO(IS)%POP) .NE. 0.0D0)THEN

	      TMP_VEC=1.66E-24_LDP*ISO(IS)%POP*ISO(IS)%MASS/DENSITY
	      TMP_VEC=1.66D-24*ISO(IS)%POP*ISO(IS)%MASS/DENSITY


par_gen_mat.f


prevent_low_t.f

	HEAT(1:ND)=0.0_LDP
	HEAT(1:ND)=0.0D0

	EHB_CONSTANT=1.25663706E-09_LDP		!4P x E-10 (for electron heating equation).
	EHB_CONSTANT=1.25663706D-09		!4P x E-10 (for electron heating equation).

	IF(T_MIN .GT. 0.0_LDP)THEN
	IF(T_MIN .GT. 0.0D0)THEN

	    TA(K) = 1.0E-10_LDP*ED(K)*POPION(K)
	    TA(K) = 1.0D-10*ED(K)*POPION(K)

	    HEAT(K)= TA(K)*EXP(1000.0_LDP*(T_MIN-T(K)))
	    HEAT(K)= TA(K)*EXP(1000.0D0*(T_MIN-T(K)))

	       IF(HEAT(K) .GT. -100.0_LDP*STEQ_T(K) .AND. STEQ_T(K) .LT. 0.0_LDP)THEN
	       IF(HEAT(K) .GT. -100.0D0*STEQ_T(K) .AND. STEQ_T(K) .LT. 0.0D0)THEN

	         T1=T_MIN-T(K)-LOG(ABS(STEQ_T(K))/TA(K))/1000.0_LDP
	         T1=T_MIN-T(K)-LOG(ABS(STEQ_T(K))/TA(K))/1000.0D0

	         BA_T(NT,L,K)=BA_T(NT,L,K) - 1000.0_LDP*HEAT(K)
	         BA_T(NT,L,K)=BA_T(NT,L,K) - 1000.0D0*HEAT(K)

	         BA_T_EHB(NT,L,K)=BA_T_EHB(NT,L,K) - 1000.0_LDP*EHB_CONSTANT*HEAT(K)
	         BA_T_EHB(NT,L,K)=BA_T_EHB(NT,L,K) - 1000.0D0*EHB_CONSTANT*HEAT(K)

	       BA_T(NT-1,L,K)=BA_T(NT-1,L,K) + 2.0_LDP*HEAT(K)/ED(K)
	       BA_T(NT-1,L,K)=BA_T(NT-1,L,K) + 2.0D0*HEAT(K)/ED(K)

	       BA_T_EHB(NT-1,L,K)=BA_T_EHB(NT-1,L,K) + 2.0_LDP*EHB_CONSTANT*HEAT(K)/ED(K)
	       BA_T_EHB(NT-1,L,K)=BA_T_EHB(NT-1,L,K) + 2.0D0*EHB_CONSTANT*HEAT(K)/ED(K)


rd_nuc_decay_data.f

	  NUC(IN)%HALF_LIFE=NUC(IN)%HALF_LIFE*24.0_LDP*3600.0_LDP		!Convert to seconds
	  NUC(IN)%HALF_LIFE=NUC(IN)%HALF_LIFE*24.0D0*3600.0D0		!Convert to seconds

	  T1=2.0_LDP
	  T1=2.0D0

	  NUC(IN)%ENERGY_PER_DECAY=1.0E+06_LDP*ELECTRON_VOLT()*NUC(IN)%ENERGY_PER_DECAY	!now in ergs
	  NUC(IN)%ENERGY_PER_DECAY=1.0D+06*ELECTRON_VOLT()*NUC(IN)%ENERGY_PER_DECAY	!now in ergs

	    NUC(IN)%KINETIC_PER_DECAY=1.0E+06_LDP*ELECTRON_VOLT()*NUC(IN)%KINETIC_PER_DECAY	!now in ergs
	    NUC(IN)%KINETIC_PER_DECAY=1.0D+06*ELECTRON_VOLT()*NUC(IN)%KINETIC_PER_DECAY	!now in ergs

	    NUC(IN)%KINETIC_PER_DECAY=0.0_LDP
	    NUC(IN)%KINETIC_PER_DECAY=0.0D0

	  ALLOCATE (PAR(IP)%OLD_POP(ND));	   PAR(IP)%OLD_POP(:)=0.0_LDP
	  ALLOCATE (PAR(IP)%OLD_POP(ND));	   PAR(IP)%OLD_POP(:)=0.0D0

	  ALLOCATE (PAR(IP)%OLD_POP_DECAY(ND));    PAR(IP)%OLD_POP_DECAY(:)=0.0_LDP
	  ALLOCATE (PAR(IP)%OLD_POP_DECAY(ND));    PAR(IP)%OLD_POP_DECAY(:)=0.0D0

	  ALLOCATE (ISO(IS)%POP(ND));              ISO(IS)%POP=0.0_LDP
	  ALLOCATE (ISO(IS)%POP(ND));              ISO(IS)%POP=0.0D0

	  ALLOCATE (ISO(IS)%OLD_POP(ND));          ISO(IS)%OLD_POP=0.0_LDP
	  ALLOCATE (ISO(IS)%OLD_POP(ND));          ISO(IS)%OLD_POP=0.0D0

	  ALLOCATE (ISO(IS)%OLD_POP_DECAY(ND));    ISO(IS)%OLD_POP_DECAY=0.0_LDP
	  ALLOCATE (ISO(IS)%OLD_POP_DECAY(ND));    ISO(IS)%OLD_POP_DECAY=0.0D0

	ALLOCATE (RADIOACTIVE_DECAY_ENERGY(ND));   RADIOACTIVE_DECAY_ENERGY=0.0_LDP
	ALLOCATE (RADIOACTIVE_DECAY_ENERGY(ND));   RADIOACTIVE_DECAY_ENERGY=0.0D0

	ALLOCATE (KINETIC_DECAY_ENERGY(ND));       KINETIC_DECAY_ENERGY=0.0_LDP
	ALLOCATE (KINETIC_DECAY_ENERGY(ND));       KINETIC_DECAY_ENERGY=0.0D0


rd_nuc_decay_data_v2.f

	  NUC(IN)%HALF_LIFE=NUC(IN)%HALF_LIFE*24.0_LDP*3600.0_LDP		!Convert to seconds
	  NUC(IN)%HALF_LIFE=NUC(IN)%HALF_LIFE*24.0D0*3600.0D0		!Convert to seconds

	  T1=2.0_LDP
	  T1=2.0D0

	  NUC(IN)%ENERGY_PER_DECAY=1.0E+06_LDP*ELECTRON_VOLT()*NUC(IN)%ENERGY_PER_DECAY	!now in ergs
	  NUC(IN)%ENERGY_PER_DECAY=1.0D+06*ELECTRON_VOLT()*NUC(IN)%ENERGY_PER_DECAY	!now in ergs

	    NUC(IN)%KINETIC_PER_DECAY=1.0E+06_LDP*ELECTRON_VOLT()*NUC(IN)%KINETIC_PER_DECAY	!now in ergs
	    NUC(IN)%KINETIC_PER_DECAY=1.0D+06*ELECTRON_VOLT()*NUC(IN)%KINETIC_PER_DECAY	!now in ergs

	    NUC(IN)%KINETIC_PER_DECAY=0.0_LDP
	    NUC(IN)%KINETIC_PER_DECAY=0.0D0

	  ALLOCATE (PAR(IP)%OLD_POP(ND));	   PAR(IP)%OLD_POP(:)=0.0_LDP
	  ALLOCATE (PAR(IP)%OLD_POP(ND));	   PAR(IP)%OLD_POP(:)=0.0D0

	  ALLOCATE (PAR(IP)%OLD_POP_DECAY(ND));    PAR(IP)%OLD_POP_DECAY(:)=0.0_LDP
	  ALLOCATE (PAR(IP)%OLD_POP_DECAY(ND));    PAR(IP)%OLD_POP_DECAY(:)=0.0D0

	  ALLOCATE (ISO(IS)%POP(ND));              ISO(IS)%POP=0.0_LDP
	  ALLOCATE (ISO(IS)%POP(ND));              ISO(IS)%POP=0.0D0

	  ALLOCATE (ISO(IS)%OLD_POP(ND));          ISO(IS)%OLD_POP=0.0_LDP
	  ALLOCATE (ISO(IS)%OLD_POP(ND));          ISO(IS)%OLD_POP=0.0D0

	  ALLOCATE (ISO(IS)%OLD_POP_DECAY(ND));    ISO(IS)%OLD_POP_DECAY=0.0_LDP
	  ALLOCATE (ISO(IS)%OLD_POP_DECAY(ND));    ISO(IS)%OLD_POP_DECAY=0.0D0

	  ALLOCATE (ISO(IS)%NUM_DECAYS(ND));       ISO(IS)%NUM_DECAYS=0.0_LDP
	  ALLOCATE (ISO(IS)%NUM_DECAYS(ND));       ISO(IS)%NUM_DECAYS=0.0D0

	  ALLOCATE (ISO(IS)%DECAY_LUM(ND));        ISO(IS)%DECAY_LUM=0.0_LDP
	  ALLOCATE (ISO(IS)%DECAY_LUM(ND));        ISO(IS)%DECAY_LUM=0.0D0

	ALLOCATE (RADIOACTIVE_DECAY_ENERGY(ND));   RADIOACTIVE_DECAY_ENERGY=0.0_LDP
	ALLOCATE (RADIOACTIVE_DECAY_ENERGY(ND));   RADIOACTIVE_DECAY_ENERGY=0.0D0

	ALLOCATE (KINETIC_DECAY_ENERGY(ND));       KINETIC_DECAY_ENERGY=0.0_LDP
	ALLOCATE (KINETIC_DECAY_ENERGY(ND));       KINETIC_DECAY_ENERGY=0.0D0


rd_sn_data.f

	  NX=0; NSP=0; NISO=0; OLD_SN_AGE_DAYS=0.0_LDP
	  NX=0; NSP=0; NISO=0; OLD_SN_AGE_DAYS=0.0D0

	      IF(NSP .EQ. 0 .OR. NX .EQ. 0 .OR. NISO .EQ. 0 .OR. OLD_SN_AGE_DAYS.EQ. 0.0_LDP)THEN
	      IF(NSP .EQ. 0 .OR. NX .EQ. 0 .OR. NISO .EQ. 0 .OR. OLD_SN_AGE_DAYS.EQ. 0.0D0)THEN

	  ALLOCATE (R_HYDRO(NX));           R_HYDRO=0.0_LDP
	  ALLOCATE (R_HYDRO(NX));           R_HYDRO=0.0D0

	  ALLOCATE (LOG_R_HYDRO(NX));       LOG_R_HYDRO=0.0_LDP
	  ALLOCATE (LOG_R_HYDRO(NX));       LOG_R_HYDRO=0.0D0

	  ALLOCATE (V_HYDRO(NX));           V_HYDRO=0.0_LDP
	  ALLOCATE (V_HYDRO(NX));           V_HYDRO=0.0D0

	  ALLOCATE (SIGMA_HYDRO(NX));       SIGMA_HYDRO=0.0_LDP
	  ALLOCATE (SIGMA_HYDRO(NX));       SIGMA_HYDRO=0.0D0

	  ALLOCATE (T_HYDRO(NX));           T_HYDRO=0.0_LDP
	  ALLOCATE (T_HYDRO(NX));           T_HYDRO=0.0D0

	  ALLOCATE (ELEC_DEN_HYDRO(NX));    ELEC_DEN_HYDRO=0.0_LDP
	  ALLOCATE (ELEC_DEN_HYDRO(NX));    ELEC_DEN_HYDRO=0.0D0

	  ALLOCATE (CLUMP_FAC_HYDRO(NX));   CLUMP_FAC_HYDRO=1.0_LDP
	  ALLOCATE (CLUMP_FAC_HYDRO(NX));   CLUMP_FAC_HYDRO=1.0D0

	  ALLOCATE (ATOM_DEN_HYDRO(NX));    ATOM_DEN_HYDRO=0.0_LDP
	  ALLOCATE (ATOM_DEN_HYDRO(NX));    ATOM_DEN_HYDRO=0.0D0

	  ALLOCATE (DENSITY_HYDRO(NX));     DENSITY_HYDRO=0.0_LDP
	  ALLOCATE (DENSITY_HYDRO(NX));     DENSITY_HYDRO=0.0D0

	  ALLOCATE (WRK_HYDRO(NX));         WRK_HYDRO=0.0_LDP
	  ALLOCATE (WRK_HYDRO(NX));         WRK_HYDRO=0.0D0

	  ALLOCATE (POP_HYDRO(NX,NSP));     POP_HYDRO=0.0_LDP
	  ALLOCATE (POP_HYDRO(NX,NSP));     POP_HYDRO=0.0D0

	  ALLOCATE (ISO_HYDRO(NX,NISO));    ISO_HYDRO=0.0_LDP
	  ALLOCATE (ISO_HYDRO(NX,NISO));    ISO_HYDRO=0.0D0

	      IF(R_HYDRO(1) .EQ. 0.0_LDP .OR.
	      IF(R_HYDRO(1) .EQ. 0.0D0 .OR.

	1	      T_HYDRO(1) .EQ. 0.0_LDP .OR.
	1	      T_HYDRO(1) .EQ. 0.0D0 .OR.

	1	      ATOM_DEN_HYDRO(1) .EQ. 0.0_LDP .OR.
	1	      ATOM_DEN_HYDRO(1) .EQ. 0.0D0 .OR.

	1	      ELEC_DEN_HYDRO(1) .EQ. 0.0_LDP)THEN
	1	      ELEC_DEN_HYDRO(1) .EQ. 0.0D0)THEN

	  T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*OLD_SN_AGE_DAYS/1.0E+10_LDP
	  T1=24.0D0*3600.0D0*1.0D+05*OLD_SN_AGE_DAYS/1.0D+10

	    SIGMA_HYDRO(I)=0.0_LDP
	    SIGMA_HYDRO(I)=0.0D0

	T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0E+10_LDP
	T1=24.0D0*3600.0D0*1.0D+05*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0D+10

	  T2=(1.0_LDP+T1*V_HYDRO(I)/R_HYDRO(I)*(SIGMA_HYDRO(I)+1.0_LDP))*
	  T2=(1.0D0+T1*V_HYDRO(I)/R_HYDRO(I)*(SIGMA_HYDRO(I)+1.0D0))*

	1                   (1.0_LDP+T1*V_HYDRO(I)/R_HYDRO(I))**2
	1                   (1.0D0+T1*V_HYDRO(I)/R_HYDRO(I))**2

	IF( ABS(R_HYDRO(1)/R(1)-1.0_LDP) .LE. 1.0E-07_LDP )R_HYDRO(1)=R(1)
	IF( ABS(R_HYDRO(1)/R(1)-1.0D0) .LE. 1.0D-07 )R_HYDRO(1)=R(1)

	IF( ABS(R_HYDRO(NX)/R(ND)-1.0_LDP) .LE. 1.0E-07_LDP )R_HYDRO(NX)=R(ND)
	IF( ABS(R_HYDRO(NX)/R(ND)-1.0D0) .LE. 1.0D-07 )R_HYDRO(NX)=R(ND)

	  VOL_EXP_FAC(I)=1.0_LDP/(1.0_LDP-T1*V(I)/R(I)*(SIGMA(I)+1.0_LDP))/
	  VOL_EXP_FAC(I)=1.0D0/(1.0D0-T1*V(I)/R(I)*(SIGMA(I)+1.0D0))/

	1                   (1.0_LDP-T1*V(I)/R(I))**2
	1                   (1.0D0-T1*V(I)/R(I))**2

	POP_SPECIES=0.0_LDP
	POP_SPECIES=0.0D0

	T1=0.0_LDP
	T1=0.0D0

	      IF(MINVAL(POP_HYDRO(1:NX,L)) .GT. 0.0_LDP .AND. .NOT. LIN_INTERP_RD_SN_DATA)THEN
	      IF(MINVAL(POP_HYDRO(1:NX,L)) .GT. 0.0D0 .AND. .NOT. LIN_INTERP_RD_SN_DATA)THEN

	WRK_HYDRO=0.0_LDP
	WRK_HYDRO=0.0D0

	       IF(MINVAL(ISO_HYDRO(1:NX,L)) .GT. 0.0_LDP .AND. .NOT.  LIN_INTERP_RD_SN_DATA)THEN
	       IF(MINVAL(ISO_HYDRO(1:NX,L)) .GT. 0.0D0 .AND. .NOT.  LIN_INTERP_RD_SN_DATA)THEN

	WRK(:)=0.0_LDP
	WRK(:)=0.0D0

	    POP_SPECIES(:,L)=0.0_LDP
	    POP_SPECIES(:,L)=0.0D0

	MASS_SPECIES=0.0_LDP
	MASS_SPECIES=0.0D0

	    MASS_SPECIES(L)=4.0_LDP*3.1416_LDP*SUM(WRK(1:ND))/1.989E+03_LDP
	    MASS_SPECIES(L)=4.0D0*3.1416D0*SUM(WRK(1:ND))/1.989D+03

	  POP_SPECIES(:,L)=POP_SPECIES(:,L)*DENSITY(:)/AT_MASS(L)/1.66E-24_LDP
	  POP_SPECIES(:,L)=POP_SPECIES(:,L)*DENSITY(:)/AT_MASS(L)/1.66D-24

	  ISO(IS)%OLD_POP=ISO(IS)%OLD_POP*DENSITY/ISO(IS)%MASS/1.66E-24_LDP
	  ISO(IS)%OLD_POP=ISO(IS)%OLD_POP*DENSITY/ISO(IS)%MASS/1.66D-24

	    WRK(1:ND)=0.0_LDP
	    WRK(1:ND)=0.0D0

	          ISO(IS)%OLD_POP=0.0_LDP
	          ISO(IS)%OLD_POP=0.0D0

	    WRK(1:ND)=0.0_LDP
	    WRK(1:ND)=0.0D0

	      T1=1.0E-100_LDP
	      T1=1.0D-100

	         T2=(POP_SPECIES(I,PAR(IP)%ISPEC)+T1)/(WRK(I)+T1)-1.0_LDP
	         T2=(POP_SPECIES(I,PAR(IP)%ISPEC)+T1)/(WRK(I)+T1)-1.0D0

	         IF(SPECIES_PRES(PAR(IP)%ISPEC) .AND. ABS(T2) .GT. 0.20_LDP)THEN
	         IF(SPECIES_PRES(PAR(IP)%ISPEC) .AND. ABS(T2) .GT. 0.20D0)THEN

	           T1=DENSITY(I)/AT_MASS(L)/1.66E-24_LDP
	           T1=DENSITY(I)/AT_MASS(L)/1.66D-24

	      POP_SPECIES(K,L)=MAX(1.0E-20_LDP,POP_SPECIES(K,L))
	      POP_SPECIES(K,L)=MAX(1.0D-20,POP_SPECIES(K,L))

	DELTA_T_SECS=24.0_LDP*3600.0_LDP*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)
	DELTA_T_SECS=24.0D0*3600.0D0*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)

	IF(ABS(DELTA_T_SECS/SN_AGE_DAYS) .LT. 1.0E-05_LDP .AND.
	IF(ABS(DELTA_T_SECS/SN_AGE_DAYS) .LT. 1.0D-05 .AND.

	    IF(T1 .NE. 0.0_LDP)THEN
	    IF(T1 .NE. 0.0D0)THEN

	      T1=0.0_LDP
	      T1=0.0D0

	        T2=1.0_LDP-ISO(IS)%OLD_POP_DECAY(I)/ISO(IS)%OLD_POP(I)
	        T2=1.0D0-ISO(IS)%OLD_POP_DECAY(I)/ISO(IS)%OLD_POP(I)

	        IF( (T2 .LE. -2.0_LDP .OR. T2 .GT. 0.67_LDP) .AND. ISO(IS)%OLD_POP(I) .GT. 1.0E-10_LDP)THEN
	        IF( (T2 .LE. -2.0D0 .OR. T2 .GT. 0.67D0) .AND. ISO(IS)%OLD_POP(I) .GT. 1.0D-10)THEN

	    T2=0.0_LDP
	    T2=0.0D0

	    MF_OB=1.66E-24_LDP*AT_MASS(L)*POP_SPECIES(1,L)/DENSITY(1)
	    MF_OB=1.66D-24*AT_MASS(L)*POP_SPECIES(1,L)/DENSITY(1)

	    MF_IB=1.66E-24_LDP*AT_MASS(L)*POP_SPECIES(ND,L)/DENSITY(ND)
	    MF_IB=1.66D-24*AT_MASS(L)*POP_SPECIES(ND,L)/DENSITY(ND)

	          MF_OB=0.0_LDP; MF_IB=0.0_LDP
	          MF_OB=0.0D0; MF_IB=0.0D0

	        T1=4.0_LDP*3.1416_LDP*1.66E-24_LDP*SUM(WRK(1:ND))*ISO(IS)%MASS/1.989E+03_LDP
	        T1=4.0D0*3.1416D0*1.66D-24*SUM(WRK(1:ND))*ISO(IS)%MASS/1.989D+03

	        ISO_MF_OB=ISO(IS)%POP(1)*1.66E-24_LDP*ISO(IS)%MASS/DENSITY(1)
	        ISO_MF_OB=ISO(IS)%POP(1)*1.66D-24*ISO(IS)%MASS/DENSITY(1)

	        ISO_MF_IB=ISO(IS)%POP(ND)*1.66E-24_LDP*ISO(IS)%MASS/DENSITY(ND)
	        ISO_MF_IB=ISO(IS)%POP(ND)*1.66D-24*ISO(IS)%MASS/DENSITY(ND)

	    IF(T2 .NE. 0.0_LDP)MASS_SPECIES(L)=T2
	    IF(T2 .NE. 0.0D0)MASS_SPECIES(L)=T2

	POP_ATOM(:)=0.0_LDP
	POP_ATOM(:)=0.0D0


read_ba_data_v2.f


read_ba_data_v3.f


read_bcd_mat.f


read_seq_time_file_v1.f

        HDKT=4.7994145_LDP					!1.0D+15*H/k/1.0D+04
        HDKT=4.7994145D0					!1.0D+15*H/k/1.0D+04

	POPS=0.0_LDP
	POPS=0.0D0


read_time_model_v1.f


rv_sn_model_sniin.f

	IF(BETA1 .LT. 0.0_LDP)THEN
	IF(BETA1 .LT. 0.0D0)THEN

	    SIGMA(I)=BETA1-1.0_LDP
	    SIGMA(I)=BETA1-1.0D0

	  R(ND-1)=R(ND)+(TA(MND-1)-TA(MND))/20.0_LDP
	  R(ND-1)=R(ND)+(TA(MND-1)-TA(MND))/20.0D0

	  R(2)=TA(1)-(TA(1)-TA(2))/50.0_LDP
	  R(2)=TA(1)-(TA(1)-TA(2))/50.0D0

	  R(ND-1)=R(ND)+(TA(MND-1)-TA(MND))/10.0_LDP
	  R(ND-1)=R(ND)+(TA(MND-1)-TA(MND))/10.0D0

	  R(3)=TA(1)-(TA(1)-TA(2))/5.0_LDP
	  R(3)=TA(1)-(TA(1)-TA(2))/5.0D0

	  R(ND-2)=R(ND)+(TA(MND-1)-TA(MND))/3.0_LDP
	  R(ND-2)=R(ND)+(TA(MND-1)-TA(MND))/3.0D0

	  R(2)=TA(1)-(TA(1)-TA(2))/20.0_LDP
	  R(2)=TA(1)-(TA(1)-TA(2))/20.0D0

	  R(ND-1)=R(ND)+(TA(MND-1)-TA(MND))/20.0_LDP
	  R(ND-1)=R(ND)+(TA(MND-1)-TA(MND))/20.0D0

	  R(3)=TA(1)-(TA(1)-TA(2))/8.0_LDP
	  R(3)=TA(1)-(TA(1)-TA(2))/8.0D0

	  R(ND-2)=R(ND)+(TA(MND-1)-TA(MND))/8.0_LDP
	  R(ND-2)=R(ND)+(TA(MND-1)-TA(MND))/8.0D0

	  R(4)=TA(1)-(TA(1)-TA(2))/3.0_LDP
	  R(4)=TA(1)-(TA(1)-TA(2))/3.0D0

	  R(ND-3)=R(ND)+(TA(MND-1)-TA(MND))/3.0_LDP
	  R(ND-3)=R(ND)+(TA(MND-1)-TA(MND))/3.0D0

	  SIGMA(I)=R(I)*SIGMA(I)/V(I)-1.0_LDP
	  SIGMA(I)=R(I)*SIGMA(I)/V(I)-1.0D0

	SIGMA(1)=R(1)*(V(1)-V(2))/(R(1)-R(2))/V(1)-1.0_LDP
	SIGMA(1)=R(1)*(V(1)-V(2))/(R(1)-R(2))/V(1)-1.0D0

	SIGMA(ND)=R(ND)*(V(ND-1)-V(ND))/(R(ND-1)-R(ND))/V(ND)-1.0_LDP
	SIGMA(ND)=R(ND)*(V(ND-1)-V(ND))/(R(ND-1)-R(ND))/V(ND)-1.0D0

               SIGMA(I)=BETA1-1.0_LDP
               SIGMA(I)=BETA1-1.0D0

               T0 = (VCORE-VMIN) / (1._LDP-R(ND)/RINT)**BETA_ACC ! V=VCORE at RINT
               T0 = (VCORE-VMIN) / (1.-R(ND)/RINT)**BETA_ACC ! V=VCORE at RINT

                   T1 = VMIN + T0   * (1._LDP-R(ND)/R(I))**BETA_ACC
                   T1 = VMIN + T0   * (1.-R(ND)/R(I))**BETA_ACC

               T2 = 1._LDP    + VRAT * EXP( (R(ND)-R(I))/HRHO )
               T2 = 1.    + VRAT * EXP( (R(ND)-R(I))/HRHO )

                   S1 = T0*BETA_ACC*R(ND)*(1._LDP-R(ND)/R(I))**(BETA_ACC-1._LDP)/R(I)/T1
                   S1 = T0*BETA_ACC*R(ND)*(1.-R(ND)/R(I))**(BETA_ACC-1.)/R(I)/T1

	        SIGMA(I)=BETA1-1.0_LDP
	        SIGMA(I)=BETA1-1.0D0


set_ba_storage.f

      MEMORY=0.0_LDP
      MEMORY=0.0D0


set_depth_consistency.f

	IF(BAD_INCREASE_LIMIT .GT. -1.0E+05_LDP)THEN
	IF(BAD_INCREASE_LIMIT .GT. -1.0D+05)THEN

	IF(BAD_DECREASE_LIMIT .LT. 0.9999_LDP)THEN
	IF(BAD_DECREASE_LIMIT .LT. 0.9999)THEN

	  IF(MAX_COR_VEC(K) .EQ. 0.0_LDP .AND. MIN_COR_VEC(K) .EQ. 0.0_LDP)BAD_SOLUTION_VEC(K)=.TRUE.
	  IF(MAX_COR_VEC(K) .EQ. 0.0D0 .AND. MIN_COR_VEC(K) .EQ. 0.0D0)BAD_SOLUTION_VEC(K)=.TRUE.

	  IF(MAX_COR_VEC(K) .LT. 0.5_LDP .AND. MIN_COR_VEC(K) .GT. -2.0_LDP .AND.
	  IF(MAX_COR_VEC(K) .LT. 0.5 .AND. MIN_COR_VEC(K) .GT. -2.0D0 .AND.

	        IF(MAX_COR .LT. 0.5_LDP .AND. MIN_COR .GT. -2.0_LDP .AND.
	        IF(MAX_COR .LT. 0.5 .AND. MIN_COR .GT. -2.0D0 .AND.

	            IF(MAX_COR .LT. 0.5_LDP .AND. MIN_COR .GT. -2.0_LDP .AND. .NOT.
	            IF(MAX_COR .LT. 0.5 .AND. MIN_COR .GT. -2.0D0 .AND. .NOT.

	    IF( (STEQ_VALS(L,K)   .LT. -1000.0_LDP .OR. STEQ_VALS(L,K)   .GT. 0.99_LDP) .AND.
	    IF( (STEQ_VALS(L,K)   .LT. -1000.0D0 .OR. STEQ_VALS(L,K)   .GT. 0.99D0) .AND.

	1        STEQ_VALS(L,K-1) .GT. -2.0_LDP   .AND. STEQ_VALS(L,K-1) .LT. 0.5_LDP .AND.
	1        STEQ_VALS(L,K-1) .GT. -2.0D0   .AND. STEQ_VALS(L,K-1) .LT. 0.5D0 .AND.

	1        STEQ_VALS(L,K+1) .GT. -2.0_LDP   .AND. STEQ_VALS(L,K+1) .LT. 0.5_LDP )THEN
	1        STEQ_VALS(L,K+1) .GT. -2.0D0   .AND. STEQ_VALS(L,K+1) .LT. 0.5D0 )THEN


set_imp_vec.f


set_new_grid.f


set_new_grid_v2.f


set_pops_to_pure_lte.f

	Z_POP=0.0_LDP
	Z_POP=0.0D0

	  REVISED_ED=0.0_LDP
	  REVISED_ED=0.0D0

	          REVISED_ED(L)=REVISED_ED(L)+(ATM(ID)%ZXzV-1.0_LDP)*SUM(ATM(ID)%XzV_F(:,L))
	          REVISED_ED(L)=REVISED_ED(L)+(ATM(ID)%ZXzV-1.0D0)*SUM(ATM(ID)%XzV_F(:,L))


set_rv_hydro_model.f

	NX=0; NSP=0; OLD_SN_AGE_DAYS=0.0_LDP
	NX=0; NSP=0; OLD_SN_AGE_DAYS=0.0D0

	ALLOCATE (V_HYDRO(NX));          V_HYDRO=0.0_LDP
	ALLOCATE (V_HYDRO(NX));          V_HYDRO=0.0D0

	ALLOCATE (SIGMA_HYDRO(NX));      SIGMA_HYDRO=0.0_LDP
	ALLOCATE (SIGMA_HYDRO(NX));      SIGMA_HYDRO=0.0D0

	ALLOCATE (DENSITY_HYDRO(NX));    DENSITY_HYDRO=0.0_LDP
	ALLOCATE (DENSITY_HYDRO(NX));    DENSITY_HYDRO=0.0D0

	ALLOCATE (KAPPA_HYDRO(NX));      KAPPA_HYDRO=0.0_LDP
	ALLOCATE (KAPPA_HYDRO(NX));      KAPPA_HYDRO=0.0D0

	ALLOCATE (R_HYDRO(NX));          R_HYDRO=0.0_LDP
	ALLOCATE (R_HYDRO(NX));          R_HYDRO=0.0D0

	ALLOCATE (TAU_HYDRO(NX));        TAU_HYDRO=0.0_LDP
	ALLOCATE (TAU_HYDRO(NX));        TAU_HYDRO=0.0D0

	ALLOCATE (LOG_R_HYDRO(NX));      LOG_R_HYDRO=0.0_LDP
	ALLOCATE (LOG_R_HYDRO(NX));      LOG_R_HYDRO=0.0D0

	    IF(R_HYDRO(1) .EQ. 0.0_LDP .OR.
	    IF(R_HYDRO(1) .EQ. 0.0D0 .OR.

	1             V_HYDRO(1) .EQ. 0.0_LDP .OR.
	1             V_HYDRO(1) .EQ. 0.0D0 .OR.

	1             DENSITY_HYDRO(1) .EQ. 0.0_LDP)THEN
	1             DENSITY_HYDRO(1) .EQ. 0.0D0)THEN

	    ELSE IF(KAPPA_HYDRO(1) .EQ. 0.0_LDP)THEN
	    ELSE IF(KAPPA_HYDRO(1) .EQ. 0.0D0)THEN

	  SIGMA=0.0_LDP
	  SIGMA=0.0D0

	  KAPPA_HYDRO=1.0E+10_LDP*KAPPA_HYDRO*DENSITY_HYDRO
	  KAPPA_HYDRO=1.0D+10*KAPPA_HYDRO*DENSITY_HYDRO

	  IF(T1 .GT. 1.5_LDP)TAU_HYDRO(1)=TAU_HYDRO(1)/(T1-1)
	  IF(T1 .GT. 1.5D0)TAU_HYDRO(1)=TAU_HYDRO(1)/(T1-1)

	    TAU_HYDRO(I)=TAU_HYDRO(I-1)+0.5_LDP*(KAPPA_HYDRO(I-1)+KAPPA_HYDRO(I))*
	    TAU_HYDRO(I)=TAU_HYDRO(I-1)+0.5D0*(KAPPA_HYDRO(I-1)+KAPPA_HYDRO(I))*

	  LOG_R(2)=LOG_R_HYDRO(1)-0.01_LDP*dLOGR
	  LOG_R(2)=LOG_R_HYDRO(1)-0.01*dLOGR

	  LOG_R(3)=LOG_R_HYDRO(1)-0.03_LDP*dLOGR
	  LOG_R(3)=LOG_R_HYDRO(1)-0.03*dLOGR

	  LOG_R(4)=LOG_R_HYDRO(1)-0.1_LDP*dLOGR
	  LOG_R(4)=LOG_R_HYDRO(1)-0.1*dLOGR

	  LOG_R(5)=LOG_R_HYDRO(1)-0.4_LDP*dLOGR
	  LOG_R(5)=LOG_R_HYDRO(1)-0.4*dLOGR

	    TAU_BEG=T1*TAU_HYDRO(J+1)+(1.0_LDP-T1)*TAU_HYDRO(J)
	    TAU_BEG=T1*TAU_HYDRO(J+1)+(1.0D0-T1)*TAU_HYDRO(J)

	    TAU_END=T1*TAU_HYDRO(J+1)+(1.0_LDP-T1)*TAU_HYDRO(J)
	    TAU_END=T1*TAU_HYDRO(J+1)+(1.0D0-T1)*TAU_HYDRO(J)

	    IF(LOG_R(I)-1.5_LDP*dLOGR .LT. LOG_R_HYDRO(NX))EXIT
	    IF(LOG_R(I)-1.5*dLOGR .LT. LOG_R_HYDRO(NX))EXIT

	  LOG_R(I+2)=LOG_R_HYDRO(NX)+0.1_LDP*dLOGR
	  LOG_R(I+2)=LOG_R_HYDRO(NX)+0.1*dLOGR

	  LOG_R(I+1)=LOG_R_HYDRO(NX)+0.4_LDP*dLOGR
	  LOG_R(I+1)=LOG_R_HYDRO(NX)+0.4*dLOGR

	    XN(I)=1.0_LDP+(I-1.0_LDP)*(ND_TMP-1.0_LDP)/(ND-1.0_LDP)
	    XN(I)=1.0D0+(I-1.0D0)*(ND_TMP-1.0D0)/(ND-1.0D0)

	  SIGMA=0.0_LDP
	  SIGMA=0.0D0


set_rv_hydro_model_v2.f

	NX=0; NSP=0; OLD_SN_AGE_DAYS=0.0_LDP
	NX=0; NSP=0; OLD_SN_AGE_DAYS=0.0D0

	ALLOCATE (V_HYDRO(NX));          V_HYDRO=0.0_LDP
	ALLOCATE (V_HYDRO(NX));          V_HYDRO=0.0D0

	ALLOCATE (SIGMA_HYDRO(NX));      SIGMA_HYDRO=0.0_LDP
	ALLOCATE (SIGMA_HYDRO(NX));      SIGMA_HYDRO=0.0D0

	ALLOCATE (DENSITY_HYDRO(NX));    DENSITY_HYDRO=0.0_LDP
	ALLOCATE (DENSITY_HYDRO(NX));    DENSITY_HYDRO=0.0D0

	ALLOCATE (KAPPA_HYDRO(NX));      KAPPA_HYDRO=0.0_LDP
	ALLOCATE (KAPPA_HYDRO(NX));      KAPPA_HYDRO=0.0D0

	ALLOCATE (R_HYDRO(NX));          R_HYDRO=0.0_LDP
	ALLOCATE (R_HYDRO(NX));          R_HYDRO=0.0D0

	ALLOCATE (LOG_R_HYDRO(NX));      LOG_R_HYDRO=0.0_LDP
	ALLOCATE (LOG_R_HYDRO(NX));      LOG_R_HYDRO=0.0D0

	ALLOCATE (TAU_HYDRO(NX));        TAU_HYDRO=0.0_LDP
	ALLOCATE (TAU_HYDRO(NX));        TAU_HYDRO=0.0D0

	ALLOCATE (OLD_R(NX));		 OLD_R=0.0_LDP
	ALLOCATE (OLD_R(NX));		 OLD_R=0.0D0

	ALLOCATE (LOG_OLD_R(NX));        LOG_OLD_R=0.0_LDP
	ALLOCATE (LOG_OLD_R(NX));        LOG_OLD_R=0.0D0

	ALLOCATE (OLD_TAU(NX));		 OLD_TAU=0.0_LDP
	ALLOCATE (OLD_TAU(NX));		 OLD_TAU=0.0D0

	    IF(R_HYDRO(1) .EQ. 0.0_LDP .OR.
	    IF(R_HYDRO(1) .EQ. 0.0D0 .OR.

	1             V_HYDRO(1) .EQ. 0.0_LDP .OR.
	1             V_HYDRO(1) .EQ. 0.0D0 .OR.

	1             DENSITY_HYDRO(1) .EQ. 0.0_LDP)THEN
	1             DENSITY_HYDRO(1) .EQ. 0.0D0)THEN

	    ELSE IF(KAPPA_HYDRO(1) .EQ. 0.0_LDP)THEN
	    ELSE IF(KAPPA_HYDRO(1) .EQ. 0.0D0)THEN

          T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*OLD_SN_AGE_DAYS/1.0E+10_LDP
          T1=24.0D0*3600.0D0*1.0D+05*OLD_SN_AGE_DAYS/1.0D+10

            SIGMA_HYDRO(I)=0.0_LDP
            SIGMA_HYDRO(I)=0.0D0

	T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0E+10_LDP
	T1=24.0D0*3600.0D0*1.0D+05*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0D+10

	  DEN_SCL_FAC=1.0_LDP/(1.0_LDP+T1*V_HYDRO(I)/R_HYDRO(I)*(SIGMA_HYDRO(I)+1.0_LDP))/
	  DEN_SCL_FAC=1.0D0/(1.0D0+T1*V_HYDRO(I)/R_HYDRO(I)*(SIGMA_HYDRO(I)+1.0D0))/

	1                   (1.0_LDP+T1*V_HYDRO(I)/R_HYDRO(I))**2
	1                   (1.0D0+T1*V_HYDRO(I)/R_HYDRO(I))**2

	  T1=ABS(R(1)/R_HYDRO(1)-1.0_LDP)
	  T1=ABS(R(1)/R_HYDRO(1)-1.0D0)

	  T2=ABS(R(ND)/R_HYDRO(NX)-1.0_LDP)
	  T2=ABS(R(ND)/R_HYDRO(NX)-1.0D0)

	  IF( T1 .GT. 1.0E-06_LDP .OR. T2 .GT. 1.0E-06_LDP)THEN
	  IF( T1 .GT. 1.0D-06 .OR. T2 .GT. 1.0D-06)THEN

	  T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0E+10_LDP
	  T1=24.0D0*3600.0D0*1.0D+05*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0D+10

	  IF(RMAX_ON_RCORE .GT. 1.0_LDP)THEN
	  IF(RMAX_ON_RCORE .GT. 1.0D0)THEN

	    IF(RMAX .GT. (1.0_LDP+1.0E-07_LDP)*R_HYDRO(1))THEN
	    IF(RMAX .GT. (1.0D0+1.0D-07)*R_HYDRO(1))THEN

	    ELSE IF(RMAX .GT. (1.0_LDP-1.0E-07_LDP)*R_HYDRO(1))THEN
	    ELSE IF(RMAX .GT. (1.0D0-1.0D-07)*R_HYDRO(1))THEN

	  KAPPA_HYDRO=1.0E+10_LDP*KAPPA_HYDRO*DENSITY_HYDRO
	  KAPPA_HYDRO=1.0D+10*KAPPA_HYDRO*DENSITY_HYDRO

	  IF(T1 .GT. 1.5_LDP)TAU_HYDRO(1)=TAU_HYDRO(1)/(T1-1)
	  IF(T1 .GT. 1.5D0)TAU_HYDRO(1)=TAU_HYDRO(1)/(T1-1)

	    TAU_HYDRO(I)=TAU_HYDRO(I-1)+0.5_LDP*(KAPPA_HYDRO(I-1)+KAPPA_HYDRO(I))*
	    TAU_HYDRO(I)=TAU_HYDRO(I-1)+0.5D0*(KAPPA_HYDRO(I-1)+KAPPA_HYDRO(I))*

	    OLD_TAU(1)=T1*TAU_HYDRO(J-1)+(1.0_LDP-T1)*TAU_HYDRO(J)
	    OLD_TAU(1)=T1*TAU_HYDRO(J-1)+(1.0D0-T1)*TAU_HYDRO(J)

	    TAU_BEG=T1*OLD_TAU(J)+(1.0_LDP-T1)*OLD_TAU(J+1)
	    TAU_BEG=T1*OLD_TAU(J)+(1.0D0-T1)*OLD_TAU(J+1)

	    TAU_END=T1*OLD_TAU(J)+(1.0_LDP-T1)*OLD_TAU(J+1)
	    TAU_END=T1*OLD_TAU(J)+(1.0D0-T1)*OLD_TAU(J+1)

	    IF(LOG_R(I)-1.5_LDP*dLOGR .LT. LOG_OLD_R(NS))EXIT
	    IF(LOG_R(I)-1.5*dLOGR .LT. LOG_OLD_R(NS))EXIT

	    LOG_R(I+1)=LOG_OLD_R(NS)+0.2_LDP*T1
	    LOG_R(I+1)=LOG_OLD_R(NS)+0.2D0*T1

	    LOG_R(I+2)=LOG_OLD_R(NS)+0.1_LDP*T1
	    LOG_R(I+2)=LOG_OLD_R(NS)+0.1D0*T1

	    LOG_R(I+1)=LOG_OLD_R(NS)+0.4_LDP*T1
	    LOG_R(I+1)=LOG_OLD_R(NS)+0.4D0*T1

	    LOG_R(I+3)=LOG_OLD_R(NS)+0.06_LDP*T1
	    LOG_R(I+3)=LOG_OLD_R(NS)+0.06D0*T1

	    LOG_R(I+2)=LOG_OLD_R(NS)+0.16_LDP*T1
	    LOG_R(I+2)=LOG_OLD_R(NS)+0.16D0*T1

	    LOG_R(I+1)=LOG_OLD_R(NS)+0.4_LDP*T1
	    LOG_R(I+1)=LOG_OLD_R(NS)+0.4D0*T1

	    LOG_R(2)=LOG_OLD_R(1)-0.01_LDP*T1
	    LOG_R(2)=LOG_OLD_R(1)-0.01D0*T1

	    LOG_R(3)=LOG_OLD_R(1)-0.03_LDP*T1
	    LOG_R(3)=LOG_OLD_R(1)-0.03D0*T1

	    LOG_R(4)=LOG_OLD_R(1)-0.1_LDP*T1
	    LOG_R(4)=LOG_OLD_R(1)-0.1D0*T1

	    LOG_R(5)=LOG_OLD_R(1)-0.4_LDP*T1
	    LOG_R(5)=LOG_OLD_R(1)-0.4D0*T1

	    LOG_R(2)=LOG_OLD_R(1)-0.01_LDP*T1
	    LOG_R(2)=LOG_OLD_R(1)-0.01D0*T1

	    LOG_R(3)=LOG_OLD_R(1)-0.1_LDP*T1
	    LOG_R(3)=LOG_OLD_R(1)-0.1D0*T1

	    LOG_R(4)=LOG_OLD_R(1)-0.3_LDP*T1
	    LOG_R(4)=LOG_OLD_R(1)-0.3D0*T1

	    LOG_R(2)=LOG_OLD_R(1)-0.01_LDP*T1
	    LOG_R(2)=LOG_OLD_R(1)-0.01D0*T1

	    LOG_R(3)=LOG_OLD_R(1)-0.3_LDP*T1
	    LOG_R(3)=LOG_OLD_R(1)-0.3D0*T1

	    LOG_R(2)=LOG_OLD_R(1)-0.01_LDP*T1
	    LOG_R(2)=LOG_OLD_R(1)-0.01D0*T1

	    XN(I)=1.0_LDP+(I-1.0_LDP)*(ND_TMP-1.0_LDP)/(ND-1.0_LDP)
	    XN(I)=1.0D0+(I-1.0D0)*(ND_TMP-1.0D0)/(ND-1.0D0)

	    SIGMA(I)=((3.0_LDP*COEF(J,1)*T1+2.0_LDP*COEF(J,2))*T1+COEF(J,3))*R(I)/V(I)-1.0_LDP
	    SIGMA(I)=((3.0D0*COEF(J,1)*T1+2.0D0*COEF(J,2))*T1+COEF(J,3))*R(I)/V(I)-1.0D0

	IF(MAXVAL(ABS(SIGMA)) .LT. 1.0E-04_LDP)SIGMA(1:ND)=0.0_LDP
	IF(MAXVAL(ABS(SIGMA)) .LT. 1.0D-04)SIGMA(1:ND)=0.0D0

	IF(T1 .GT. 1.5_LDP)TAU(1)=TAU(1)/(T1-1)
	IF(T1 .GT. 1.5D0)TAU(1)=TAU(1)/(T1-1)

	  TAU(I)=TAU(I-1)+0.5_LDP*(KAPPA(I-1)+KAPPA(I))*(R(I-1)-R(I))
	  TAU(I)=TAU(I-1)+0.5D0*(KAPPA(I-1)+KAPPA(I))*(R(I-1)-R(I))


set_rv_hydro_model_v3.f

	REAL(KIND=LDP), PARAMETER :: IB_FAC=2.5_LDP
	REAL(KIND=LDP), PARAMETER :: IB_FAC=2.5D0

	REAL(KIND=LDP), PARAMETER :: OB_FAC=1.5_LDP
	REAL(KIND=LDP), PARAMETER :: OB_FAC=1.5D0

	NX=0; NSP=0; OLD_SN_AGE_DAYS=0.0_LDP
	NX=0; NSP=0; OLD_SN_AGE_DAYS=0.0D0

	ALLOCATE (V_HYDRO(NX));          V_HYDRO=0.0_LDP
	ALLOCATE (V_HYDRO(NX));          V_HYDRO=0.0D0

	ALLOCATE (SIGMA_HYDRO(NX));      SIGMA_HYDRO=0.0_LDP
	ALLOCATE (SIGMA_HYDRO(NX));      SIGMA_HYDRO=0.0D0

	ALLOCATE (DENSITY_HYDRO(NX));    DENSITY_HYDRO=0.0_LDP
	ALLOCATE (DENSITY_HYDRO(NX));    DENSITY_HYDRO=0.0D0

	ALLOCATE (KAPPA_HYDRO(NX));      KAPPA_HYDRO=0.0_LDP
	ALLOCATE (KAPPA_HYDRO(NX));      KAPPA_HYDRO=0.0D0

	ALLOCATE (R_HYDRO(NX));          R_HYDRO=0.0_LDP
	ALLOCATE (R_HYDRO(NX));          R_HYDRO=0.0D0

	ALLOCATE (LOG_R_HYDRO(NX));      LOG_R_HYDRO=0.0_LDP
	ALLOCATE (LOG_R_HYDRO(NX));      LOG_R_HYDRO=0.0D0

	ALLOCATE (TAU_HYDRO(NX));        TAU_HYDRO=0.0_LDP
	ALLOCATE (TAU_HYDRO(NX));        TAU_HYDRO=0.0D0

	ALLOCATE (T_HYDRO(NX));          T_HYDRO=0.0_LDP
	ALLOCATE (T_HYDRO(NX));          T_HYDRO=0.0D0

	ALLOCATE (OLD_R(NX));		 OLD_R=0.0_LDP
	ALLOCATE (OLD_R(NX));		 OLD_R=0.0D0

	ALLOCATE (LOG_OLD_R(NX));        LOG_OLD_R=0.0_LDP
	ALLOCATE (LOG_OLD_R(NX));        LOG_OLD_R=0.0D0

	ALLOCATE (OLD_TAU(NX));		 OLD_TAU=0.0_LDP
	ALLOCATE (OLD_TAU(NX));		 OLD_TAU=0.0D0

	ALLOCATE (OLD_T(NX));		 OLD_T=0.0_LDP
	ALLOCATE (OLD_T(NX));		 OLD_T=0.0D0

	    IF(R_HYDRO(1) .EQ. 0.0_LDP .OR.
	    IF(R_HYDRO(1) .EQ. 0.0D0 .OR.

	1             V_HYDRO(1) .EQ. 0.0_LDP .OR.
	1             V_HYDRO(1) .EQ. 0.0D0 .OR.

	1             DENSITY_HYDRO(1) .EQ. 0.0_LDP)THEN
	1             DENSITY_HYDRO(1) .EQ. 0.0D0)THEN

	    ELSE IF(KAPPA_HYDRO(1) .EQ. 0.0_LDP)THEN
	    ELSE IF(KAPPA_HYDRO(1) .EQ. 0.0D0)THEN

          T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*OLD_SN_AGE_DAYS/1.0E+10_LDP
          T1=24.0D0*3600.0D0*1.0D+05*OLD_SN_AGE_DAYS/1.0D+10

            SIGMA_HYDRO(I)=0.0_LDP
            SIGMA_HYDRO(I)=0.0D0

	T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0E+10_LDP
	T1=24.0D0*3600.0D0*1.0D+05*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0D+10

	  DEN_SCL_FAC=1.0_LDP/(1.0_LDP+T1*V_HYDRO(I)/R_HYDRO(I)*(SIGMA_HYDRO(I)+1.0_LDP))/
	  DEN_SCL_FAC=1.0D0/(1.0D0+T1*V_HYDRO(I)/R_HYDRO(I)*(SIGMA_HYDRO(I)+1.0D0))/

	1                   (1.0_LDP+T1*V_HYDRO(I)/R_HYDRO(I))**2
	1                   (1.0D0+T1*V_HYDRO(I)/R_HYDRO(I))**2

	  T2=1.0_LDP-R(ND)/R_HYDRO(NX)
	  T2=1.0D0-R(ND)/R_HYDRO(NX)

	  IF(T2 .GT. 1.0E-06_LDP)THEN
	  IF(T2 .GT. 1.0D-06)THEN

	    T1=24.0_LDP*3600.0_LDP*1.0E+05_LDP*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0E+10_LDP
	    T1=24.0D0*3600.0D0*1.0D+05*(SN_AGE_DAYS-OLD_SN_AGE_DAYS)/1.0D+10

	    T2=ABS(R(ND)/R_HYDRO(NX)-1.0_LDP)
	    T2=ABS(R(ND)/R_HYDRO(NX)-1.0D0)

	    IF(T2 .GT. 1.0E-06_LDP)THEN
	    IF(T2 .GT. 1.0D-06)THEN

	  dLOGR=0.0_LDP; dTAU=0.0_LDP		!Set for diagnostic output file.
	  dLOGR=0.0D0; dTAU=0.0D0		!Set for diagnostic output file.

	  IF(RMAX_ON_RCORE .GT. 1.0_LDP)THEN
	  IF(RMAX_ON_RCORE .GT. 1.0D0)THEN

	    IF(RMAX .GT. (1.0_LDP+1.0E-07_LDP)*R_HYDRO(1))THEN
	    IF(RMAX .GT. (1.0D0+1.0D-07)*R_HYDRO(1))THEN

	    ELSE IF(RMAX .GT. (1.0_LDP-1.0E-07_LDP)*R_HYDRO(1))THEN
	    ELSE IF(RMAX .GT. (1.0D0-1.0D-07)*R_HYDRO(1))THEN

	  KAPPA_HYDRO=1.0E+10_LDP*KAPPA_HYDRO*DENSITY_HYDRO
	  KAPPA_HYDRO=1.0D+10*KAPPA_HYDRO*DENSITY_HYDRO

	  IF(T1 .GT. 1.5_LDP)TAU_HYDRO(1)=TAU_HYDRO(1)/(T1-1)
	  IF(T1 .GT. 1.5D0)TAU_HYDRO(1)=TAU_HYDRO(1)/(T1-1)

	    TAU_HYDRO(I)=TAU_HYDRO(I-1)+0.5_LDP*(KAPPA_HYDRO(I-1)+KAPPA_HYDRO(I))*
	    TAU_HYDRO(I)=TAU_HYDRO(I-1)+0.5D0*(KAPPA_HYDRO(I-1)+KAPPA_HYDRO(I))*

	    OLD_TAU(1)=T1*TAU_HYDRO(J-1)+(1.0_LDP-T1)*TAU_HYDRO(J)
	    OLD_TAU(1)=T1*TAU_HYDRO(J-1)+(1.0D0-T1)*TAU_HYDRO(J)

	    OLD_T(1)=T1*T_HYDRO(J-1)+(1.0_LDP-T1)*T_HYDRO(J)
	    OLD_T(1)=T1*T_HYDRO(J-1)+(1.0D0-T1)*T_HYDRO(J)

	  R_SCL_FAC=1.2_LDP; dLOG_T=0.04_LDP; IB_RAT=2.0_LDP; OB_RAT=1.5_LDP; DTAU2_ON_DTAU1=100.0_LDP
	  R_SCL_FAC=1.2D0; dLOG_T=0.04D0; IB_RAT=2.0D0; OB_RAT=1.5D0; DTAU2_ON_DTAU1=100.0D0

	    SIGMA(I)=((3.0_LDP*COEF(J,1)*T1+2.0_LDP*COEF(J,2))*T1+COEF(J,3))*R(I)/V(I)-1.0_LDP
	    SIGMA(I)=((3.0D0*COEF(J,1)*T1+2.0D0*COEF(J,2))*T1+COEF(J,3))*R(I)/V(I)-1.0D0

	IF(MAXVAL(ABS(SIGMA)) .LT. 1.0E-04_LDP)SIGMA(1:ND)=0.0_LDP
	IF(MAXVAL(ABS(SIGMA)) .LT. 1.0D-04)SIGMA(1:ND)=0.0D0

	IF(T1 .GT. 1.5_LDP)TAU(1)=TAU(1)/(T1-1)
	IF(T1 .GT. 1.5D0)TAU(1)=TAU(1)/(T1-1)

	  TAU(I)=TAU(I-1)+0.5_LDP*(KAPPA(I-1)+KAPPA(I))*(R(I-1)-R(I))
	  TAU(I)=TAU(I-1)+0.5D0*(KAPPA(I-1)+KAPPA(I))*(R(I-1)-R(I))


set_sn_r_grid.f

	LOG_R_MAX=T1*LOG_OLD_R(I+1)+(1.0_LDP-T1)*LOG_OLD_R(I)
	LOG_R_MAX=T1*LOG_OLD_R(I+1)+(1.0D0-T1)*LOG_OLD_R(I)

	  TAU_BEG=T1*LOG_OLD_TAU(J)+(1.0_LDP-T1)*LOG_OLD_TAU(J+1)
	  TAU_BEG=T1*LOG_OLD_TAU(J)+(1.0D0-T1)*LOG_OLD_TAU(J+1)

	  TAU_END=T1*LOG_OLD_TAU(J)+(1.0_LDP-T1)*LOG_OLD_TAU(J+1)
	  TAU_END=T1*LOG_OLD_TAU(J)+(1.0D0-T1)*LOG_OLD_TAU(J+1)

	  IF(T1 .GT. dTAU .AND. dTAU/dTAU_OLD .LE. 1.4_LDP)THEN
	  IF(T1 .GT. dTAU .AND. dTAU/dTAU_OLD .LE. 1.4D0)THEN

	  ELSE IF(T1/dTAU_OLD .GT. 1.4_LDP)THEN
	  ELSE IF(T1/dTAU_OLD .GT. 1.4D0)THEN

	    dTAU_OLD=dTAU_OLD*1.4_LDP
	    dTAU_OLD=dTAU_OLD*1.4D0

	  ELSE IF(dTAU_OLD/T1 .GT. 1.4_LDP)THEN
	  ELSE IF(dTAU_OLD/T1 .GT. 1.4D0)THEN

	    dTAU_OLD=dTAU_OLD*0.71_LDP
	    dTAU_OLD=dTAU_OLD*0.71D0

	  IF(LOG_R(I)-1.5_LDP*(LOG_R(I-1)-LOG_R(I)) .LT. LOG_OLD_R(NS))EXIT
	  IF(LOG_R(I)-1.5D0*(LOG_R(I-1)-LOG_R(I)) .LT. LOG_OLD_R(NS))EXIT

	LOG_R(I)=LOG_R(I-1)-0.5_LDP*T1
	LOG_R(I)=LOG_R(I-1)-0.5D0*T1

	LOG_TAU(I)=LOG_TAU(I-1)-0.5_LDP*T2
	LOG_TAU(I)=LOG_TAU(I-1)-0.5D0*T2

	  XN(I)=1.0_LDP+(I-1.0_LDP)*(ND_TMP-1.0_LDP)/(J-1.0_LDP)
	  XN(I)=1.0D0+(I-1.0D0)*(ND_TMP-1.0D0)/(J-1.0D0)

	  LOG_R(I)=LOG_OLD_R(NS)+0.2_LDP*T1
	  LOG_R(I)=LOG_OLD_R(NS)+0.2D0*T1

	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.2_LDP*T2
	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.2D0*T2

	  LOG_R(I+1)=LOG_OLD_R(NS)+0.1_LDP*T1     !0.1D0
	  LOG_R(I+1)=LOG_OLD_R(NS)+0.1D0*T1     !0.1D0

	  LOG_R(I)=LOG_OLD_R(NS)+0.4_LDP*T1      !0.4D0
	  LOG_R(I)=LOG_OLD_R(NS)+0.4D0*T1      !0.4D0

	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.1_LDP*T2     !0.1D0
	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.1D0*T2     !0.1D0

	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4_LDP*T2      !0.4D0
	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4D0*T2      !0.4D0

	  LOG_R(I+2)=LOG_OLD_R(NS)+0.06_LDP*T1
	  LOG_R(I+2)=LOG_OLD_R(NS)+0.06D0*T1

	  LOG_R(I+1)=LOG_OLD_R(NS)+0.16_LDP*T1
	  LOG_R(I+1)=LOG_OLD_R(NS)+0.16D0*T1

	  LOG_R(I)=LOG_OLD_R(NS)+0.4_LDP*T1
	  LOG_R(I)=LOG_OLD_R(NS)+0.4D0*T1

	  LOG_TAU(I+2)=LOG_OLD_TAU(NS)+0.06_LDP*T2
	  LOG_TAU(I+2)=LOG_OLD_TAU(NS)+0.06D0*T2

	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.16_LDP*T2
	  LOG_TAU(I+1)=LOG_OLD_TAU(NS)+0.16D0*T2

	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4_LDP*T2
	  LOG_TAU(I)=LOG_OLD_TAU(NS)+0.4D0*T2

	    T2=IB_RAT*T2+1.0_LDP
	    T2=IB_RAT*T2+1.0D0

	LOG_R(2)=LOG_R(1)-0.05_LDP*T1
	LOG_R(2)=LOG_R(1)-0.05D0*T1

	LOG_TAU(2)=LOG_TAU(1)-0.05_LDP*T2
	LOG_TAU(2)=LOG_TAU(1)-0.05D0*T2

	LOG_R(N_OB_INS+2)=0.4_LDP*LOG_R(N_OB_INS+1)+0.6_LDP*LOG_R(N_OB_INS+3)
	LOG_R(N_OB_INS+2)=0.4D0*LOG_R(N_OB_INS+1)+0.6D0*LOG_R(N_OB_INS+3)

	LOG_TAU(N_OB_INS+2)=0.4_LDP*LOG_TAU(N_OB_INS+1)+0.6_LDP*LOG_TAU(N_OB_INS+3)
	LOG_TAU(N_OB_INS+2)=0.4D0*LOG_TAU(N_OB_INS+1)+0.6D0*LOG_TAU(N_OB_INS+3)

	T1=0.0_LDP
	T1=0.0D0


smooth_pops_as_we_iterate.f

	        ELSE IF(STEQ_VALS(J,L) .GE. 0.998_LDP .OR. STEQ_VALS(J,L)  .LT. -1.0E+05_LDP)THEN
	        ELSE IF(STEQ_VALS(J,L) .GE. 0.998D0 .OR. STEQ_VALS(J,L)  .LT. -1.0D+05)THEN

	          IF( ABS(LOG10(RAT23/RAT12)) .LT. 1.0_LDP)THEN
	          IF( ABS(LOG10(RAT23/RAT12)) .LT. 1.0D0)THEN

	            IF(ABS(LOG10(RAT01/RAT12)) .GT. 5.0_LDP .AND. ABS(LOG10(RAT23)) .LT.  3.0_LDP)THEN
	            IF(ABS(LOG10(RAT01/RAT12)) .GT. 5.0D0 .AND. ABS(LOG10(RAT23)) .LT.  3.0D0)THEN


solveba_v10.f

	  STEQ(:,2)=0.0_LDP
	  STEQ(:,2)=0.0D0

	      IF(STEQ(J,I) .GT. 1.1_LDP)THEN
	      IF(STEQ(J,I) .GT. 1.1)THEN

	        STEQ(J,I)=0.999_LDP
	        STEQ(J,I)=0.999D0

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+06_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+06*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07

	MAX_INC_VEC=0.0_LDP
	MAX_INC_VEC=0.0D0

	MAX_DEC_VEC=0.0_LDP
	MAX_DEC_VEC=0.0D0

	    IF(T1 .LE. 0.0_LDP)THEN
	    IF(T1 .LE. 0.0D0)THEN

	    ELSE IF(STEQ(I,J) .GT. 0.0_LDP)THEN
	    ELSE IF(STEQ(I,J) .GT. 0.0D0)THEN

	IF(MAX_INC_VEC(NV) .GT. -0.1_LDP .AND. MAX_DEC_VEC(NV) .LT. 0.1_LDP)DO_LEVEL_CHK=.TRUE.
	IF(MAX_INC_VEC(NV) .GT. -0.1D0 .AND. MAX_DEC_VEC(NV) .LT. 0.1D0)DO_LEVEL_CHK=.TRUE.

	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0_LDP-MIN(MAX_DEC_VEC(NV),0.9999_LDP)))
	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0D0-MIN(MAX_DEC_VEC(NV),0.9999D0)))

	  MAXCH=100.0_LDP*MAXCH
	  MAXCH=100.0D0*MAXCH

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	LIT_LIM=1.0_LDP-CHANGE_LIM
	LIT_LIM=1.0D0-CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)


solveba_v11.f

	  STEQ(:,2)=0.0_LDP
	  STEQ(:,2)=0.0D0

	      IF(STEQ(J,I) .GT. 1.1_LDP)THEN
	      IF(STEQ(J,I) .GT. 1.1)THEN

	        STEQ(J,I)=0.999_LDP
	        STEQ(J,I)=0.999D0

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+06_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+06*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07

	MAX_INC_VEC=0.0_LDP
	MAX_INC_VEC=0.0D0

	MAX_DEC_VEC=0.0_LDP
	MAX_DEC_VEC=0.0D0

	    IF(T1 .LE. 0.0_LDP)THEN
	    IF(T1 .LE. 0.0D0)THEN

	    ELSE IF(STEQ(I,J) .GT. 0.0_LDP)THEN
	    ELSE IF(STEQ(I,J) .GT. 0.0D0)THEN

	IF(MAX_INC_VEC(NV) .GT. -0.1_LDP .AND. MAX_DEC_VEC(NV) .LT. 0.1_LDP)DO_LEVEL_CHK=.TRUE.
	IF(MAX_INC_VEC(NV) .GT. -0.1D0 .AND. MAX_DEC_VEC(NV) .LT. 0.1D0)DO_LEVEL_CHK=.TRUE.

	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0_LDP-MIN(MAX_DEC_VEC(NV),0.9999_LDP)))
	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0D0-MIN(MAX_DEC_VEC(NV),0.9999D0)))

	  MAXCH=100.0_LDP*MAXCH
	  MAXCH=100.0D0*MAXCH

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	LIT_LIM=1.0_LDP-CHANGE_LIM
	LIT_LIM=1.0D0-CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)


solveba_v12.f

	  STEQ(:,2)=0.0_LDP
	  STEQ(:,2)=0.0D0

	      IF(STEQ(J,I) .GT. 1.1_LDP)THEN
	      IF(STEQ(J,I) .GT. 1.1)THEN

	        STEQ(J,I)=0.999_LDP
	        STEQ(J,I)=0.999D0

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+06_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+06*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07

	MAX_INC_VEC=0.0_LDP
	MAX_INC_VEC=0.0D0

	MAX_DEC_VEC=0.0_LDP
	MAX_DEC_VEC=0.0D0

	    IF(T1 .LE. 0.0_LDP)THEN
	    IF(T1 .LE. 0.0D0)THEN

	    ELSE IF(STEQ(I,J) .GT. 0.0_LDP)THEN
	    ELSE IF(STEQ(I,J) .GT. 0.0D0)THEN

	IF(MAX_INC_VEC(NV) .GT. -0.1_LDP .AND. MAX_DEC_VEC(NV) .LT. 0.1_LDP)DO_LEVEL_CHK=.TRUE.
	IF(MAX_INC_VEC(NV) .GT. -0.1D0 .AND. MAX_DEC_VEC(NV) .LT. 0.1D0)DO_LEVEL_CHK=.TRUE.

	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0_LDP-MIN(MAX_DEC_VEC(NV),0.9999_LDP)))
	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0D0-MIN(MAX_DEC_VEC(NV),0.9999D0)))

	  MAXCH=100.0_LDP*MAXCH
	  MAXCH=100.0D0*MAXCH

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	LIT_LIM=1.0_LDP-CHANGE_LIM
	LIT_LIM=1.0D0-CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)


solveba_v13.f

	  STEQ(:,2)=0.0_LDP
	  STEQ(:,2)=0.0D0

	      IF(STEQ(J,I) .GT. 1.1_LDP)THEN
	      IF(STEQ(J,I) .GT. 1.1)THEN

	        STEQ(J,I)=0.999_LDP
	        STEQ(J,I)=0.999D0

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+06_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+06*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07

	MAX_INC_VEC=0.0_LDP
	MAX_INC_VEC=0.0D0

	MAX_DEC_VEC=0.0_LDP
	MAX_DEC_VEC=0.0D0

	    IF(T1 .LE. 0.0_LDP)THEN
	    IF(T1 .LE. 0.0D0)THEN

	    ELSE IF(STEQ(I,J) .GT. 0.0_LDP)THEN
	    ELSE IF(STEQ(I,J) .GT. 0.0D0)THEN

	IF(MAX_INC_VEC(NV) .GT. -0.1_LDP .AND. MAX_DEC_VEC(NV) .LT. 0.1_LDP)DO_LEVEL_CHK=.TRUE.
	IF(MAX_INC_VEC(NV) .GT. -0.1D0 .AND. MAX_DEC_VEC(NV) .LT. 0.1D0)DO_LEVEL_CHK=.TRUE.

	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0_LDP-MIN(MAX_DEC_VEC(NV),0.9999_LDP)))
	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0D0-MIN(MAX_DEC_VEC(NV),0.9999D0)))

	  MAXCH=100.0_LDP*MAXCH
	  MAXCH=100.0D0*MAXCH

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	LIT_LIM=1.0_LDP-CHANGE_LIM
	LIT_LIM=1.0D0-CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)


solveba_v6.f

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	      IF(POPS(J,I) .GT. 1.0E-10_LDP*POPS(NT-1,I))THEN
	      IF(POPS(J,I) .GT. 1.0E-10*POPS(NT-1,I))THEN

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    SCALE=MIN( 0.2_LDP/T3,SCALE )
	    SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-T1)
	      POPS(J,I)=POPS(J,I)*(1.0D0-T1)

	  T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	  T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07


solveba_v7.f

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	      IF(POPS(J,I) .GT. 1.0E-10_LDP*POPS(NT-1,I))THEN
	      IF(POPS(J,I) .GT. 1.0E-10*POPS(NT-1,I))THEN

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    SCALE=MIN( 0.2_LDP/T3,SCALE )
	    SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-T1)
	      POPS(J,I)=POPS(J,I)*(1.0D0-T1)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+05_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+05*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07


solveba_v8.f

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	      IF(POPS(J,I) .GT. 1.0E-10_LDP*POPS(NT-1,I))THEN
	      IF(POPS(J,I) .GT. 1.0E-10*POPS(NT-1,I))THEN

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    SCALE=MIN( 0.2_LDP/T3,SCALE )
	    SCALE=MIN( 0.2D0/T3,SCALE )

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    IF(SCALE .GT. 1.0_LDP)SCALE=1.0_LDP		!i.e. will not force T to T_MIN
	    IF(SCALE .GT. 1.0D0)SCALE=1.0D0		!i.e. will not force T to T_MIN

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-T1)
	      POPS(J,I)=POPS(J,I)*(1.0D0-T1)

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+06_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+06*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07


solveba_v9.f

	      IF(STEQ(J,I) .GT. 1.1_LDP)THEN
	      IF(STEQ(J,I) .GT. 1.1)THEN

	        STEQ(J,I)=0.999_LDP
	        STEQ(J,I)=0.999D0

	DECREASE=0.0_LDP
	DECREASE=0.0D0

	INCREASE=0.0_LDP
	INCREASE=0.0D0

	    T1=1.0E+06_LDP*ABS(STEQ(J,I))+1.0E-31_LDP		!to ensure non-zero.
	    T1=1.0D+06*ABS(STEQ(J,I))+1.0D-31		!to ensure non-zero.

	DECREASE=100.0_LDP*DECREASE
	DECREASE=100.0D0*DECREASE

	INCREASE=100.0_LDP*INCREASE
	INCREASE=100.0D0*INCREASE

	IF(DECREASE .LT. 99.999_LDP)THEN
	IF(DECREASE .LT. 99.999D0)THEN

	  DECREASE=100.0_LDP*DECREASE/(100.0_LDP-DECREASE)
	  DECREASE=100.0D0*DECREASE/(100.0D0-DECREASE)

	  DECREASE=1.0E+07_LDP
	  DECREASE=1.0D+07

	MAX_INC_VEC=0.0_LDP
	MAX_INC_VEC=0.0D0

	MAX_DEC_VEC=0.0_LDP
	MAX_DEC_VEC=0.0D0

	    IF(T1 .LE. 0.0_LDP)THEN
	    IF(T1 .LE. 0.0D0)THEN

	    ELSE IF(STEQ(I,J) .GT. 0.0_LDP)THEN
	    ELSE IF(STEQ(I,J) .GT. 0.0D0)THEN

	IF(MAX_INC_VEC(NV) .GT. -0.1_LDP .AND. MAX_DEC_VEC(NV) .LT. 0.1_LDP)DO_LEVEL_CHK=.TRUE.
	IF(MAX_INC_VEC(NV) .GT. -0.1D0 .AND. MAX_DEC_VEC(NV) .LT. 0.1D0)DO_LEVEL_CHK=.TRUE.

	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0_LDP-MIN(MAX_DEC_VEC(NV),0.9999_LDP)))
	  MAXCH=MAX( ABS(MAX_INC_VEC(NV)), MAX_DEC_VEC(NV)/(1.0D0-MIN(MAX_DEC_VEC(NV),0.9999D0)))

	  MAXCH=100.0_LDP*MAXCH
	  MAXCH=100.0D0*MAXCH

	IF(CHANGE_LIM .LE. 1.0_LDP)THEN
	IF(CHANGE_LIM .LE. 1.0D0)THEN

	BIG_LIM=(CHANGE_LIM-1.0_LDP)/CHANGE_LIM
	BIG_LIM=(CHANGE_LIM-1.0D0)/CHANGE_LIM

	LIT_LIM=1.0_LDP-CHANGE_LIM
	LIT_LIM=1.0D0-CHANGE_LIM

	MINSCALE=1.0_LDP
	MINSCALE=1.0D0

	    T1=0.2_LDP
	    T1=0.2D0

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	      SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	      SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-BIG_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-BIG_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-LIT_LIM)
	        POPS(J,I)=POPS(J,I)*(1.0D0-LIT_LIM)

	        POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I))
	        POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I))

	    SCALE=0.2_LDP/MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    SCALE=0.2D0/MAX( 0.2D0,ABS(STEQ(NT,I)) )

	    POPS(NT,I)=POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE)
	    POPS(NT,I)=POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE)

	1                      POPS(NT,I)*(1.0_LDP-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN
	1                      POPS(NT,I)*(1.0D0-STEQ(NT,I)*SCALE) .LT. T_MIN)THEN

	        SCALE=(1.0_LDP-T_MIN/POPS(NT,I))/STEQ(NT,I)
	        SCALE=(1.0D0-T_MIN/POPS(NT,I))/STEQ(NT,I)

	    T3=MAX( 0.2_LDP,ABS(STEQ(NT,I)) )
	    T3=MAX( 0.2D0,ABS(STEQ(NT,I)) )

	  SCALE=MIN( 0.2_LDP/T3,SCALE )
	  SCALE=MIN( 0.2D0/T3,SCALE )

	      POPS(J,I)=POPS(J,I)*(1.0_LDP-STEQ(J,I)*SCALE)
	      POPS(J,I)=POPS(J,I)*(1.0D0-STEQ(J,I)*SCALE)


spl_clump.f


steq_advec_v1.f

	  DERIV_CONST=1.0E-05_LDP*VEL(K)/R(K)
	  DERIV_CONST=1.0D-05*VEL(K)/R(K)

	    DERIV_CONST=1.0E-05_LDP*VEL(K)/R(K)
	    DERIV_CONST=1.0D-05*VEL(K)/R(K)


steq_advec_v2.f

	    DERIV_CONST=1.0E-05_LDP/R(K)/R(K)
	    DERIV_CONST=1.0D-05/R(K)/R(K)

	      DERIV_CONST=1.0E-05_LDP/(R(K)-R(KP1))
	      DERIV_CONST=1.0D-05/(R(K)-R(KP1))

	    DERIV_CONST=1.0E-05_LDP*VEL(K)/R(K)
	    DERIV_CONST=1.0D-05*VEL(K)/R(K)

	      DERIV_CONST=1.0E-05_LDP*VEL(K)/R(K)
	      DERIV_CONST=1.0D-05*VEL(K)/R(K)


steq_advec_v3.f

	DERIV_FAC=1.0E-05_LDP                         !Should be 1.0D-05
	DERIV_FAC=1.0D-05                         !Should be 1.0D-05

	    ADVEC_RR(K)=0.0_LDP
	    ADVEC_RR(K)=0.0D0

	    ADVEC_RR(K)=0.0_LDP
	    ADVEC_RR(K)=0.0D0


steq_advec_v4.f

	SUM(:,:)=0.0_LDP
	SUM(:,:)=0.0D0

	  SE(ID)%STEQ_ADV(:)=0.0_LDP
	  SE(ID)%STEQ_ADV(:)=0.0D0

	  SE(ID)%STRT_ADV_ID(:)=0.0_LDP
	  SE(ID)%STRT_ADV_ID(:)=0.0D0

	  SE(ID)%END_ADV_ID(:)=0.0_LDP
	  SE(ID)%END_ADV_ID(:)=0.0D0

	BA_ADV_TERM(:,:)=0.0_LDP
	BA_ADV_TERM(:,:)=0.0D0

	UNIT_CONST=1.0E-05_LDP*RELAXATION_PARAMETER
	UNIT_CONST=1.0D-05*RELAXATION_PARAMETER

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0


steq_co_mov_deriv_v1.f

	SUM(:,:)=0.0_LDP
	SUM(:,:)=0.0D0

	  SE(ID)%STEQ_ADV(:)=0.0_LDP
	  SE(ID)%STEQ_ADV(:)=0.0D0

	  SE(ID)%STRT_ADV_ID(:)=0.0_LDP
	  SE(ID)%STRT_ADV_ID(:)=0.0D0

	  SE(ID)%END_ADV_ID(:)=0.0_LDP
	  SE(ID)%END_ADV_ID(:)=0.0D0

	BA_ADV_TERM(:,:)=0.0_LDP
	BA_ADV_TERM(:,:)=0.0D0

	DELTA_TIME_SECS=1.0E+05_LDP*(R(ND)-OLD_R(ND))/V(ND)
	DELTA_TIME_SECS=1.0D+05*(R(ND)-OLD_R(ND))/V(ND)

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0


steq_co_mov_deriv_v2.f

	SUM(:,:)=0.0_LDP
	SUM(:,:)=0.0D0

	  SE(ID)%STEQ_ADV(:)=0.0_LDP
	  SE(ID)%STEQ_ADV(:)=0.0D0

	  SE(ID)%STRT_ADV_ID(:)=0.0_LDP
	  SE(ID)%STRT_ADV_ID(:)=0.0D0

	  SE(ID)%END_ADV_ID(:)=0.0_LDP
	  SE(ID)%END_ADV_ID(:)=0.0D0

	BA_ADV_TERM(:,:)=0.0_LDP
	BA_ADV_TERM(:,:)=0.0D0

	DELTA_TIME_SECS=1.0E+05_LDP*(R(ND)-OLD_R(ND))/V(ND)
	DELTA_TIME_SECS=1.0D+05*(R(ND)-OLD_R(ND))/V(ND)

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0


steq_co_mov_deriv_v3.f

	SUM(:,:)=0.0_LDP
	SUM(:,:)=0.0D0

	  SE(ID)%STEQ_ADV(:)=0.0_LDP
	  SE(ID)%STEQ_ADV(:)=0.0D0

	  SE(ID)%STRT_ADV_ID(:)=0.0_LDP
	  SE(ID)%STRT_ADV_ID(:)=0.0D0

	  SE(ID)%END_ADV_ID(:)=0.0_LDP
	  SE(ID)%END_ADV_ID(:)=0.0D0

	BA_ADV_TERM(:,:)=0.0_LDP
	BA_ADV_TERM(:,:)=0.0D0

	DELTA_TIME_SECS=1.0E+05_LDP*(R(ND)-OLD_R(ND))/V(ND)
	DELTA_TIME_SECS=1.0D+05*(R(ND)-OLD_R(ND))/V(ND)

	          T1=0.0_LDP
	          T1=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0

	          IF(.NOT. OLD_LEV_POP_AVAIL(J))T1=0.0_LDP
	          IF(.NOT. OLD_LEV_POP_AVAIL(J))T1=0.0D0


steq_multi_v10.f

	  TMP_VEC_ED(1)=1.0_LDP		!Electron density
	  TMP_VEC_ED(1)=1.0D0		!Electron density

	  TMP_VEC_COOL(1)=0.0_LDP		!Initialize cooling rate even
	  TMP_VEC_COOL(1)=0.0D0		!Initialize cooling rate even

	  T1=1.0E+15_LDP*PLANCKS_CONSTANT()*ED(I)              !1.0D+15 due to units of NU.
	  T1=1.0D+15*PLANCKS_CONSTANT()*ED(I)              !1.0D+15 due to units of NU.

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	          T1=0.0_LDP
	          T1=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0_LDP)
	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0D0)

	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0_LDP
	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0_LDP)*T1
	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0D0)*T1

	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0_LDP
	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0D0


steq_multi_v10_save.f

	  TMP_VEC_ED(1)=1.0_LDP		!Electron density
	  TMP_VEC_ED(1)=1.0D0		!Electron density

	  TMP_VEC_COOL(1)=0.0_LDP		!Initialize cooling rate even
	  TMP_VEC_COOL(1)=0.0D0		!Initialize cooling rate even

	  T1=1.0E+15_LDP*PLANCKS_CONSTANT()*ED(I)              !1.0D+15 due to units of NU.
	  T1=1.0D+15*PLANCKS_CONSTANT()*ED(I)              !1.0D+15 due to units of NU.

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	          T1=0.0_LDP
	          T1=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0_LDP)
	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0D0)

	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0_LDP
	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0_LDP)*T1
	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0D0)*T1

	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0_LDP
	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0D0


steq_multi_v7.f

	  TMP_VEC_ED(1)=1.0_LDP		!Electron density
	  TMP_VEC_ED(1)=1.0D0		!Electron density

	  TMP_VEC_COOL(1)=0.0_LDP		!Initialize cooling rate even
	  TMP_VEC_COOL(1)=0.0D0		!Initialize cooling rate even

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	          T1=0.0_LDP
	          T1=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0_LDP)
	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0D0)

	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0_LDP
	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0_LDP)*T1
	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0D0)*T1

	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0_LDP
	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0D0


steq_multi_v8.f

	  TMP_VEC_ED(1)=1.0_LDP		!Electron density
	  TMP_VEC_ED(1)=1.0D0		!Electron density

	  TMP_VEC_COOL(1)=0.0_LDP		!Initialize cooling rate even
	  TMP_VEC_COOL(1)=0.0D0		!Initialize cooling rate even

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	          T1=0.0_LDP
	          T1=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0_LDP)
	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0D0)

	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0_LDP
	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0_LDP)*T1
	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0D0)*T1

	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0_LDP
	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0D0


steq_multi_v9.f

	  TMP_VEC_ED(1)=1.0_LDP		!Electron density
	  TMP_VEC_ED(1)=1.0D0		!Electron density

	  TMP_VEC_COOL(1)=0.0_LDP		!Initialize cooling rate even
	  TMP_VEC_COOL(1)=0.0D0		!Initialize cooling rate even

	    T1=0.0_LDP
	    T1=0.0D0

	    T2=0.0_LDP
	    T2=0.0D0

	          T1=0.0_LDP
	          T1=0.0D0

	      T1=0.0_LDP
	      T1=0.0D0

	      T2=0.0_LDP
	      T2=0.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  T2=0.0_LDP
	  T2=0.0D0

	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0_LDP)
	      BA_ED(JJ,M,I)=BA_ED(JJ,M,I)+(ZION-1.0D0)

	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0_LDP
	      SE(ID)%BA(EQ_NUM_CONV,J,M,I)=SE(ID)%BA(EQ_NUM_CONV,J,M,I)+1.0D0

	  T1=0.0_LDP
	  T1=0.0D0

	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0_LDP)*T1
	  STEQ_ED(I)=STEQ_ED(I)+(ZION-1.0D0)*T1

	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0_LDP
	    SE(ID)%BA(JJ,VION,M,I)=SE(ID)%BA(JJ,VION,M,I)+1.0D0


steqne_v4.f

	    BA_ED(NT-1,DIAG_INDX,K)=BA_ED(NT-1,DIAG_INDX,K)-1.0_LDP
	    BA_ED(NT-1,DIAG_INDX,K)=BA_ED(NT-1,DIAG_INDX,K)-1.0D0


store_ba_data_v2.f


store_ba_data_v3.f


store_old_grid.f

	MEAN_ATOMIC_MASS=0.0_LDP
	MEAN_ATOMIC_MASS=0.0D0

	OLD_ESEC=6.65E-15_LDP*OLD_ED
	OLD_ESEC=6.65D-15*OLD_ED

	OLD_KAP_ROSS=1.0E-10_LDP*OLD_ROSS_MEAN/OLD_MASS_DENSITY
	OLD_KAP_ROSS=1.0D-10*OLD_ROSS_MEAN/OLD_MASS_DENSITY

	OLD_KAP_FLUX=1.0E-10_LDP*OLD_FLUX_MEAN/OLD_MASS_DENSITY
	OLD_KAP_FLUX=1.0D-10*OLD_FLUX_MEAN/OLD_MASS_DENSITY

	OLD_KAP_ESEC=1.0E-10_LDP*OLD_ESEC/OLD_MASS_DENSITY
	OLD_KAP_ESEC=1.0D-10*OLD_ESEC/OLD_MASS_DENSITY


sub_guess_dc.f

	PHOT_SUM(1:ND)=0.0_LDP
	PHOT_SUM(1:ND)=0.0D0

	RECOM_SUM(1:ND)=0.0_LDP
	RECOM_SUM(1:ND)=0.0D0

	    PHOT_SUM(I)=PHOT_SUM(I)+0.5_LDP*(NU(ML)-NU(ML+1))*(RJ(I,ML)+RJ(I,ML+1))
	    PHOT_SUM(I)=PHOT_SUM(I)+0.5D0*(NU(ML)-NU(ML+1))*(RJ(I,ML)+RJ(I,ML+1))

	    RECOM_SUM(I)=RECOM_SUM(I)+0.5_LDP*(NU(ML)-NU(ML+1))*(T1+T2)
	    RECOM_SUM(I)=RECOM_SUM(I)+0.5D0*(NU(ML)-NU(ML+1))*(T1+T2)

	IF(NU(EDGE_ML) .GT. 1.00000001_LDP*FEDGE(1))THEN
	IF(NU(EDGE_ML) .GT. 1.00000001D0*FEDGE(1))THEN

	      RJ1=(1.0_LDP-T1)*RJ(I,EDGE_ML)+T1*RJ(I,EDGE_ML+1)
	      RJ1=(1.0D0-T1)*RJ(I,EDGE_ML)+T1*RJ(I,EDGE_ML+1)

	      RJ2=(1.0_LDP-T2)*RJ(I,EDGE_ML)+T2*RJ(I,EDGE_ML+1)
	      RJ2=(1.0D0-T2)*RJ(I,EDGE_ML)+T2*RJ(I,EDGE_ML+1)

	      PHOT_SUM(I)=PHOT_SUM(I)+0.5_LDP*(NU1-NU2)*(RJ1+RJ2)
	      PHOT_SUM(I)=PHOT_SUM(I)+0.5D0*(NU1-NU2)*(RJ1+RJ2)

	      RECOM_SUM(I)=RECOM_SUM(I)+0.5_LDP*(NU1-NU2)*(T3+T4)
	      RECOM_SUM(I)=RECOM_SUM(I)+0.5D0*(NU1-NU2)*(T3+T4)

	T1=1.0E-02_LDP      !Accuracy parameter
	T1=1.0D-02      !Accuracy parameter

	   DC(J,I)=((T(I)/T_EXC(I))**1.5_LDP )*EXP(HDKT*FEDGE(J)*(1.0_LDP/T_EXC(I)-1.0_LDP/T(I)))
	   DC(J,I)=((T(I)/T_EXC(I))**1.5 )*EXP(HDKT*FEDGE(J)*(1.0D0/T_EXC(I)-1.0D0/T(I)))

	  ION_POP(1:ND)=1.0E-50_LDP
	  ION_POP(1:ND)=1.0D-50

	    T1=LOG(2.07078E-22_LDP*ED(I)*DC(1,I))
	    T1=LOG(2.07078D-22*ED(I)*DC(1,I))

	    T1=GION_REF/(T(I)**1.5_LDP)/GION_SPEC
	    T1=GION_REF/(T(I)**1.5D0)/GION_SPEC

	    IF(ION_POP(I) .LT. 1.0E-10_LDP*GS_ION_POP(I))THEN
	    IF(ION_POP(I) .LT. 1.0D-10*GS_ION_POP(I))THEN

	      T1=1.0E-10_LDP*GS_ION_POP(I)/ION_POP(I)
	      T1=1.0D-10*GS_ION_POP(I)/ION_POP(I)


sum_steq_sol.f

	  MAX_CHANGE=0.0_LDP
	  MAX_CHANGE=0.0D0

	  MIN_CHANGE=0.0_LDP
	  MIN_CHANGE=0.0D0

	  SOL(:,LMIN)=0.0_LDP
	  SOL(:,LMIN)=0.0D0

	  SOL(:,LMAX)=0.0_LDP
	  SOL(:,LMAX)=0.0D0


tst_1.f


tst_2.f

	PARAMETER (DP_ZERO=0.0_LDP)
	PARAMETER (DP_ZERO=0.0)

	PARAMETER (DP_ONE=1.0_LDP)
	PARAMETER (DP_ONE=1.0)

	PARAMETER (DP_NEG_ONE=-1.0_LDP)
	PARAMETER (DP_NEG_ONE=-1.0)

            ST_CPU(I)=0._LDP
            ST_CPU(I)=0.D0

            IST_WALL(I)=0._LDP
            IST_WALL(I)=0.D0

            CPUTOT(I)=0._LDP
            CPUTOT(I)=0.D0

            WALLTOT(I)=0._LDP
            WALLTOT(I)=0.D0

          OVERHEAD=2.0_LDP*(ETIME(TARRY)-T0)
          OVERHEAD=2.0D0*(ETIME(TARRY)-T0)

            ST_CPU(I)=0._LDP
            ST_CPU(I)=0.D0

            IST_WALL(I)=0._LDP
            IST_WALL(I)=0.D0

            CPUTOT(I)=0._LDP
            CPUTOT(I)=0.D0

            WALLTOT(I)=0._LDP
            WALLTOT(I)=0.D0


tst_add.f

	T2=2.345E00_LDP
	T2=2.345D00

	T1=4.345E00_LDP
	T1=4.345D00

	  VJ(10,2,30)=1.1_LDP*VJ(10,2,30)
	  VJ(10,2,30)=1.1*VJ(10,2,30)

	    T1=4.345E00_LDP+0.001_LDP*(L-1)
	    T1=4.345D00+0.001*(L-1)

	T2=2.345E00_LDP
	T2=2.345D00

	T1=4.345E00_LDP
	T1=4.345D00

	  VJ(10,2,30)=1.1_LDP*VJ(10,2,30)
	  VJ(10,2,30)=1.1*VJ(10,2,30)

	  VJ(10,2,30)=1.1_LDP*VJ(10,2,30)
	  VJ(10,2,30)=1.1*VJ(10,2,30)

	    T1=4.345E00_LDP+0.001_LDP*(L-1)
	    T1=4.345D00+0.001*(L-1)

	T2=2.345E00_LDP
	T2=2.345D00

	T1=4.345E00_LDP
	T1=4.345D00

	  VJ(10,2,30)=1.1_LDP*VJ(10,2,30)
	  VJ(10,2,30)=1.1*VJ(10,2,30)

	    T1=4.345E00_LDP+0.001_LDP*(L-1)
	    T1=4.345D00+0.001*(L-1)

	T2=2.345E00_LDP
	T2=2.345D00

	T1=4.345E00_LDP
	T1=4.345D00

	T2=2.345E00_LDP
	T2=2.345D00

	     T2=2.345_LDP+(L-1)*0.001_LDP
	     T2=2.345D0+(L-1)*0.001D0

	T2=2.345E00_LDP
	T2=2.345D00

	     T2=2.345_LDP+(L-1)*0.001_LDP
	     T2=2.345D0+(L-1)*0.001D0

            ST_CPU(I)=0._LDP
            ST_CPU(I)=0.D0

            IST_WALL(I)=0._LDP
            IST_WALL(I)=0.D0

            CPUTOT(I)=0._LDP
            CPUTOT(I)=0.D0

            WALLTOT(I)=0._LDP
            WALLTOT(I)=0.D0

          OVERHEAD=2.0_LDP*(ETIME(TARRY)-T0)
          OVERHEAD=2.0D0*(ETIME(TARRY)-T0)

            ST_CPU(I)=0._LDP
            ST_CPU(I)=0.D0

            IST_WALL(I)=0._LDP
            IST_WALL(I)=0.D0

            CPUTOT(I)=0._LDP
            CPUTOT(I)=0.D0

            WALLTOT(I)=0._LDP
            WALLTOT(I)=0.D0


tst_ba_1.f

	IF(dJ_CHK_FAC .LT. 1.0E-10_LDP .OR. dJ_CHK_FAC .GT. 0.1_LDP)THEN
	IF(dJ_CHK_FAC .LT. 1.0D-10 .OR. dJ_CHK_FAC .GT. 0.1)THEN

	              IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
	              IF( COMP_VEC(J) .GE. 0.0D0 )THEN

	              IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
	              IF( COMP_VEC(J) .GE. 0.0D0 )THEN

                      IF( COMP_VEC(J) .GE. 0.0_LDP )THEN
                      IF( COMP_VEC(J) .GE. 0.0D0 )THEN

                      IF( COMP_VEC(J) .GE. 0.0_LDP)THEN
                      IF( COMP_VEC(J) .GE. 0.0D0)THEN


tst_loop.f

	VJ_SUM(:,:,:)=0.0_LDP
	VJ_SUM(:,:,:)=0.0D0

	VJ_SUM2(:,:,:)=0.0_LDP
	VJ_SUM2(:,:,:)=0.0D0

	RJ(:)=0.0_LDP
	RJ(:)=0.0D0

	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0_LDP*VJ(:,:,L)
	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0D0*VJ(:,:,L)

	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0_LDP*VJ(J,K,L)
	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0D0*VJ(J,K,L)

	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0_LDP*VJ(J,K,L)
	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0D0*VJ(J,K,L)

	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0_LDP*VJ(:,:,L)
	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0D0*VJ(:,:,L)


tst_loop_v2.f

	  T(L)=1.0_LDP+(L-1)*0.01_LDP
	  T(L)=1.0D0+(L-1)*0.01

	VJ_SUM(:,:,:)=0.0_LDP
	VJ_SUM(:,:,:)=0.0D0

	VJ_SUM2(:,:,:)=0.0_LDP
	VJ_SUM2(:,:,:)=0.0D0

	RJ(:)=0.0_LDP
	RJ(:)=0.0D0

	     T1=EXP(-4.7994_LDP/T(L))
	     T1=EXP(-4.7994/T(L))

	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0_LDP*T1*VJ(:,:,L)
	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0*T1*VJ(:,:,L)

	    T1=EXP(-4.7994_LDP/T(L))
	    T1=EXP(-4.7994/T(L))

	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0_LDP*T1*VJ(J,K,L)
	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0*T1*VJ(J,K,L)

	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0_LDP*VJ(J,K,L)
	        VJ_SUM2(J,K,L)=VJ_SUM2(J,K,L)-2.0*VJ(J,K,L)

	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0_LDP*VJ(:,:,L)
	     VJ_SUM2(:,:,L)=VJ_SUM2(:,:,L)-2.0*VJ(:,:,L)


tst_mat.f

	PARAMETER (DP_ZERO=0.0_LDP)
	PARAMETER (DP_ZERO=0.0)

	PARAMETER (DP_ONE=1.0_LDP)
	PARAMETER (DP_ONE=1.0)

	PARAMETER (DP_NEG_ONE=-1.0_LDP)
	PARAMETER (DP_NEG_ONE=-1.0)


tst_rd_seq.f

	T1=0.0_LDP
	T1=0.0D0

	    IF(OLD_POPS(I,L) .EQ. 0.0_LDP)THEN
	    IF(OLD_POPS(I,L) .EQ. 0.0D0)THEN


update_ba_for_line.f

	  SUM_BA=0.0_LDP
	  SUM_BA=0.0D0

	      TC(1:INDX_BA_METH-1)=0.0_LDP;                        TC(INDX_BA_METH:ND)=CHI_SCAT(INDX_BA_METH:ND)
	      TC(1:INDX_BA_METH-1)=0.0D0;                        TC(INDX_BA_METH:ND)=CHI_SCAT(INDX_BA_METH:ND)

	      TA(1:ND)=0.0_LDP
	      TA(1:ND)=0.0D0

	      SCL_FAC=1.0_LDP
	      SCL_FAC=1.0D0

	        IF(ABS(SCL_FAC-1.0_LDP) .GT. SCL_LINE_HT_FAC)SCL_FAC=1.0_LDP
	        IF(ABS(SCL_FAC-1.0D0) .GT. SCL_LINE_HT_FAC)SCL_FAC=1.0D0

	        IF(POP_ATOM(K) .GE. SCL_LINE_DENSITY_LIMIT)T4=1.0_LDP
	        IF(POP_ATOM(K) .GE. SCL_LINE_DENSITY_LIMIT)T4=1.0D0

	        TB(L)=1.0_LDP
	        TB(L)=1.0D0

	      IF(TA(L) .GT. 5.0_LDP)THEN
	      IF(TA(L) .GT. 5.0)THEN

	        TA(L)=0.0_LDP; TB(L)=0.0_LDP
	        TA(L)=0.0D0; TB(L)=0.0D0

	      TA(1:ND)=0.0_LDP
	      TA(1:ND)=0.0D0

		T4=ABS(ZNET_SIM(K,SIM_INDX)-1.0_LDP)
		T4=ABS(ZNET_SIM(K,SIM_INDX)-1.0D0)

		T4=ABS(ZNET_SIM(L,SIM_INDX)-1.0_LDP)
		T4=ABS(ZNET_SIM(L,SIM_INDX)-1.0D0)

	        IF(ABS(SCL_FAC-1.0_LDP) .GT. SCL_LINE_HT_FAC)SCL_FAC=1.0_LDP
	        IF(ABS(SCL_FAC-1.0D0) .GT. SCL_LINE_HT_FAC)SCL_FAC=1.0D0

	        SCL_FAC=1.0_LDP
	        SCL_FAC=1.0D0

	          IF(POP_ATOM(L) .GE. SCL_LINE_DENSITY_LIMIT)T3=1.0_LDP
	          IF(POP_ATOM(L) .GE. SCL_LINE_DENSITY_LIMIT)T3=1.0D0

	          IF(POP_ATOM(L) .GE. SCL_LINE_DENSITY_LIMIT)T3=1.0_LDP
	          IF(POP_ATOM(L) .GE. SCL_LINE_DENSITY_LIMIT)T3=1.0D0

		  T4=ABS(ZNET_SIM(L,SIM_INDX)-1.0_LDP)
		  T4=ABS(ZNET_SIM(L,SIM_INDX)-1.0D0)


var_op_v10.f

	    PCHI(NT-1,K)=PCHI(NT-1,K)+POP_SUM(K)*TCHI2*(1.0_LDP-EMHNUKT(K))
	    PCHI(NT-1,K)=PCHI(NT-1,K)+POP_SUM(K)*TCHI2*(1.0D0-EMHNUKT(K))

	    PCHI(NT,K)=PCHI(NT,K)+ED(K)*POP_SUM(K)*TCHI2/T(K)*( -0.5_LDP+(0.5_LDP-HNUONK/T(K))*EMHNUKT(K) )
	    PCHI(NT,K)=PCHI(NT,K)+ED(K)*POP_SUM(K)*TCHI2/T(K)*( -0.5D0+(0.5D0-HNUONK/T(K))*EMHNUKT(K) )

	    PETA(NT,K)  =PETA(NT,K)  +TETA2*POP_SUM(K)*ED(K)*(HNUONK/T(K)-0.5_LDP)/T(K)
	    PETA(NT,K)  =PETA(NT,K)  +TETA2*POP_SUM(K)*ED(K)*(HNUONK/T(K)-0.5D0)/T(K)

	    TCHI2=TCHI2*ED(K)*(1.0_LDP-EMHNUKT(K))
	    TCHI2=TCHI2*ED(K)*(1.0D0-EMHNUKT(K))

	DIS_CONST(1:N_F)=-1.0_LDP
	DIS_CONST(1:N_F)=-1.0D0

	      NEFF=SQRT(3.289395_LDP*Z*Z/(EDGE_F(I)-NU))
	      NEFF=SQRT(3.289395D0*Z*Z/(EDGE_F(I)-NU))

	        T1=MIN(1.0_LDP,16.0_LDP*NEFF/(1+NEFF)/(1+NEFF)/3.0_LDP)
	        T1=MIN(1.0D0,16.0D0*NEFF/(1+NEFF)/(1+NEFF)/3.0D0)

	        DIS_CONST(I)=( T1*ZION_CUBED/(NEFF**4) )**1.5_LDP
	        DIS_CONST(I)=( T1*ZION_CUBED/(NEFF**4) )**1.5D0

	        ALPHA_VEC(I)=0.0_LDP
	        ALPHA_VEC(I)=0.0D0

	    YDIS(K)=1.091_LDP*(X_LEV_DIS(K)+4.0_LDP*(Z-1)*A_LEV_DIS(K))*
	    YDIS(K)=1.091D0*(X_LEV_DIS(K)+4.0D0*(Z-1)*A_LEV_DIS(K))*

	  DT_TERM(K)=( 1.5_LDP + (dlnDIST_S_dlnT(ION_LEV,K)-dlnDIST_S_dlNT(1,K)) )/T(K)
	  DT_TERM(K)=( 1.5D0 + (dlnDIST_S_dlnT(ION_LEV,K)-dlnDIST_S_dlNT(1,K)) )/T(K)

	        IF(DIS_CONST(I) .GE. 0.0_LDP)THEN
	        IF(DIS_CONST(I) .GE. 0.0D0)THEN

	          T1=7.782_LDP+XDIS(K)*DIS_CONST(I)
	          T1=7.782D0+XDIS(K)*DIS_CONST(I)

	          IF(T2 .LT. PHOT_DIS_PARAMETER)ALPHA=0.0_LDP
	          IF(T2 .LT. PHOT_DIS_PARAMETER)ALPHA=0.0D0

	        IF(ALPHA .GT. 0.0_LDP)THEN
	        IF(ALPHA .GT. 0.0D0)THEN

	1           (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))/T(K)
	1           (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))/T(K)

	  VCHI_TMP(:,:)=0.0_LDP
	  VCHI_TMP(:,:)=0.0D0

	    SUM_ION=0.0_LDP; SUM_T1=0.0_LDP;   SUM_T2=0.0_LDP
	    SUM_ION=0.0D0; SUM_T1=0.0D0;   SUM_T2=0.0D0

	    SUM_ION_NOT_IMP=0.0_LDP; SUM_T1_NOT_IMP=0.0_LDP;   SUM_T2_NOT_IMP=0.0_LDP
	    SUM_ION_NOT_IMP=0.0D0; SUM_T1_NOT_IMP=0.0D0;   SUM_T2_NOT_IMP=0.0D0

	      IF(ALPHA_VEC(I) .GT. 0.0_LDP)THEN
	      IF(ALPHA_VEC(I) .GT. 0.0D0)THEN

	        IF(DIS_CONST(I) .GE. 0.0_LDP)THEN
	        IF(DIS_CONST(I) .GE. 0.0D0)THEN

	          T1=7.782_LDP+XDIS(K)*DIS_CONST(I)
	          T1=7.782D0+XDIS(K)*DIS_CONST(I)

	          IF(T2 .LT. PHOT_DIS_PARAMETER)ALPHA=0.0_LDP
	          IF(T2 .LT. PHOT_DIS_PARAMETER)ALPHA=0.0D0

	        IF(ALPHA .GT. 0.0_LDP)THEN
	        IF(ALPHA .GT. 0.0D0)THEN

	1             (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))
	1             (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))

	1               (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))
	1               (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))


var_op_v7.f

	    VCHI(EQION,K)=VCHI(EQION,K)+ED(K)*TCHI2*(1.0_LDP-EMHNUKT(K))
	    VCHI(EQION,K)=VCHI(EQION,K)+ED(K)*TCHI2*(1.0D0-EMHNUKT(K))

	    VCHI(NT-1,K)=VCHI(NT-1,K)+DI_S(ION_LEV,K)*TCHI2*(1.0_LDP-EMHNUKT(K))
	    VCHI(NT-1,K)=VCHI(NT-1,K)+DI_S(ION_LEV,K)*TCHI2*(1.0D0-EMHNUKT(K))

	1        ( -0.5_LDP+(0.5_LDP-HNUONK/T(K))*EMHNUKT(K) )
	1        ( -0.5D0+(0.5D0-HNUONK/T(K))*EMHNUKT(K) )

	1        ( 0.5_LDP-HNUONK/T(K) )/T(K)
	1        ( 0.5D0-HNUONK/T(K) )/T(K)

	DIS_CONST(1:N_F)=-1.0_LDP
	DIS_CONST(1:N_F)=-1.0D0

	      NEFF=SQRT(3.289395_LDP*Z*Z/(EDGE_F(I)-NU))
	      NEFF=SQRT(3.289395*Z*Z/(EDGE_F(I)-NU))

	        T1=MIN(1.0_LDP,16.0_LDP*NEFF/(1+NEFF)/(1+NEFF)/3.0_LDP)
	        T1=MIN(1.0D0,16.0D0*NEFF/(1+NEFF)/(1+NEFF)/3.0D0)

	        DIS_CONST(I)=( T1*ZION_CUBED/(NEFF**4) )**1.5_LDP
	        DIS_CONST(I)=( T1*ZION_CUBED/(NEFF**4) )**1.5D0

	        ALPHA_VEC(I)=0.0_LDP
	        ALPHA_VEC(I)=0.0D0

	    YDIS(K)=1.091_LDP*(X_LEV_DIS(K)+4.0_LDP*(Z-1)*A_LEV_DIS(K))*
	    YDIS(K)=1.091*(X_LEV_DIS(K)+4.0D0*(Z-1)*A_LEV_DIS(K))*

	  DT_TERM(K)=( 1.5_LDP +
	  DT_TERM(K)=( 1.5D0 +

	          T1=7.782_LDP+XDIS(K)*DIS_CONST(I)
	          T1=7.782+XDIS(K)*DIS_CONST(I)

	1           (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))/T(K)
	1           (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))/T(K)

	  VCHI_TMP(:,:)=0.0_LDP
	  VCHI_TMP(:,:)=0.0D0

	    VCHI_ION(:)=0.0_LDP
	    VCHI_ION(:)=0.0D0

	    VCHI_T1(:)=0.0_LDP
	    VCHI_T1(:)=0.0D0

	    VCHI_T2(:)=0.0_LDP
	    VCHI_T2(:)=0.0D0

	          T1=7.782_LDP+XDIS(K)*DIS_CONST(I)
	          T1=7.782+XDIS(K)*DIS_CONST(I)

	1           (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))
	1           (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))


var_op_v8.f

	    PCHI(EQION,K)=PCHI(EQION,K)+ED(K)*TCHI2*(1.0_LDP-EMHNUKT(K))
	    PCHI(EQION,K)=PCHI(EQION,K)+ED(K)*TCHI2*(1.0D0-EMHNUKT(K))

	    PCHI(NT-1,K)=PCHI(NT-1,K)+DI_S(ION_LEV,K)*TCHI2*(1.0_LDP-EMHNUKT(K))
	    PCHI(NT-1,K)=PCHI(NT-1,K)+DI_S(ION_LEV,K)*TCHI2*(1.0D0-EMHNUKT(K))

	1        ( -0.5_LDP+(0.5_LDP-HNUONK/T(K))*EMHNUKT(K) )
	1        ( -0.5D0+(0.5D0-HNUONK/T(K))*EMHNUKT(K) )

	1        ( 0.5_LDP-HNUONK/T(K) )/T(K)
	1        ( 0.5D0-HNUONK/T(K) )/T(K)

	DIS_CONST(1:N_F)=-1.0_LDP
	DIS_CONST(1:N_F)=-1.0D0

	    IF(NU .LT. EDGE_F(I) .AND. ALPHA_VEC(I) .NE. 0.0_LDP)THEN
	    IF(NU .LT. EDGE_F(I) .AND. ALPHA_VEC(I) .NE. 0.0D0)THEN

	      NEFF=SQRT(3.289395_LDP*Z*Z/(EDGE_F(I)-NU))
	      NEFF=SQRT(3.289395D0*Z*Z/(EDGE_F(I)-NU))

	        T1=MIN(1.0_LDP,16.0_LDP*NEFF/(1+NEFF)/(1+NEFF)/3.0_LDP)
	        T1=MIN(1.0D0,16.0D0*NEFF/(1+NEFF)/(1+NEFF)/3.0D0)

	        DIS_CONST(I)=( T1*ZION_CUBED/(NEFF**4) )**1.5_LDP
	        DIS_CONST(I)=( T1*ZION_CUBED/(NEFF**4) )**1.5D0

	        ALPHA_VEC(I)=0.0_LDP
	        ALPHA_VEC(I)=0.0D0

	    YDIS(K)=1.091_LDP*(X_LEV_DIS(K)+4.0_LDP*(Z-1)*A_LEV_DIS(K))*
	    YDIS(K)=1.091D0*(X_LEV_DIS(K)+4.0D0*(Z-1)*A_LEV_DIS(K))*

	  DT_TERM(K)=( 1.5_LDP +
	  DT_TERM(K)=( 1.5D0 +

	        IF(DIS_CONST(I) .GE. 0.0_LDP)THEN
	        IF(DIS_CONST(I) .GE. 0.0D0)THEN

	          T1=7.782_LDP+XDIS(K)*DIS_CONST(I)
	          T1=7.782D0+XDIS(K)*DIS_CONST(I)

	1           (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))/T(K)
	1           (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))/T(K)

	  VCHI_TMP(:,:)=0.0_LDP
	  VCHI_TMP(:,:)=0.0D0

	    SUM_ION=0.0_LDP; SUM_T1=0.0_LDP;   SUM_T2=0.0_LDP
	    SUM_ION=0.0D0; SUM_T1=0.0D0;   SUM_T2=0.0D0

	    SUM_ION_NOT_IMP=0.0_LDP; SUM_T1_NOT_IMP=0.0_LDP;   SUM_T2_NOT_IMP=0.0_LDP
	    SUM_ION_NOT_IMP=0.0D0; SUM_T1_NOT_IMP=0.0D0;   SUM_T2_NOT_IMP=0.0D0

	      IF(ALPHA_VEC(I) .GT. 0.0_LDP)THEN
	      IF(ALPHA_VEC(I) .GT. 0.0D0)THEN

	        IF(DIS_CONST(I) .GE. 0.0_LDP)THEN
	        IF(DIS_CONST(I) .GE. 0.0D0)THEN

	          T1=7.782_LDP+XDIS(K)*DIS_CONST(I)
	          T1=7.782D0+XDIS(K)*DIS_CONST(I)

	1             (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))
	1             (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))

	1             (1.5_LDP+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))
	1             (1.5D0+HDKT_ON_T(K)*EDGE_F(I)+dlnHNST_S_dlnT(L,K))


var_x_opa_eta_v3.f

	IF(ALPHA .LE. 0.0_LDP)RETURN
	IF(ALPHA .LE. 0.0D0)RETURN

	        VCHI(NT-1,J)=VCHI(NT-1,J)-2.0_LDP*TCHI1/ED(J)
	        VCHI(NT-1,J)=VCHI(NT-1,J)-2.0*TCHI1/ED(J)

	        VETA(NT-1,J)=VETA(NT-1,J)+2.0_LDP*TETA3/ED(J)
	        VETA(NT-1,J)=VETA(NT-1,J)+2.0*TETA3/ED(J)


var_x_opa_eta_v4.f

	IF(ALPHA .LE. 0.0_LDP)RETURN
	IF(ALPHA .LE. 0.0D0)RETURN

	  LTE_POP_SUM(1:ND)=0.0_LDP
	  LTE_POP_SUM(1:ND)=0.0D0

	  dLTE_SUM_VEC(1:ND)=0.0_LDP
	  dLTE_SUM_VEC(1:ND)=0.0D0

	    IF(LTE_POP_SUM(J) .LT. 1.0E-200_LDP)THEN
	    IF(LTE_POP_SUM(J) .LT. 1.0D-200)THEN

	      dLTE_SUM=0.0_LDP
	      dLTE_SUM=0.0D0

	    VCHI(NT-1,J)=VCHI(NT-1,J)-2.0_LDP*TCHI1/ED(J)
	    VCHI(NT-1,J)=VCHI(NT-1,J)-2.0D0*TCHI1/ED(J)

	    VETA(NT-1,J)=VETA(NT-1,J)+2.0_LDP*TETA3/ED(J)
	    VETA(NT-1,J)=VETA(NT-1,J)+2.0D0*TETA3/ED(J)


vehb_byj_v1.f

	PC=1.0E+15_LDP*PLANCKS_CONSTANT()
	PC=1.0D+15*PLANCKS_CONSTANT()

	    B_RAT=0.0_LDP
	    B_RAT=0.0D0

	    IF(LOG_B_RAT .LT. 780.0_LDP)B_RAT=EXP(LOG_B_RAT)
	    IF(LOG_B_RAT .LT. 780.0D0)B_RAT=EXP(LOG_B_RAT)

	    B_RAT=1.0_LDP
	    B_RAT=1.0D0

	    LOG_B_RAT=0.0_LDP
	    LOG_B_RAT=0.0D0

	    IF(WSE(J,K) .NE. 0.0_LDP)THEN
	    IF(WSE(J,K) .NE. 0.0D0)THEN


vsebyj_multi_v6.f


vsebyj_multi_v7.f

	    B_RAT=0.0_LDP
	    B_RAT=0.0D0

	    IF(LOG_B_RAT .LT. 780.0_LDP)B_RAT=EXP(LOG_B_RAT)
	    IF(LOG_B_RAT .LT. 780.0D0)B_RAT=EXP(LOG_B_RAT)

	    B_RAT=1.0_LDP
	    B_RAT=1.0D0

	    LOG_B_RAT=0.0_LDP
	    LOG_B_RAT=0.0D0


vsebyj_multi_v8.f

	    B_RAT=0.0_LDP
	    B_RAT=0.0D0

	    IF(LOG_B_RAT .LT. 780.0_LDP)B_RAT=EXP(LOG_B_RAT)
	    IF(LOG_B_RAT .LT. 780.0D0)B_RAT=EXP(LOG_B_RAT)

	    B_RAT=1.0_LDP
	    B_RAT=1.0D0

	    LOG_B_RAT=0.0_LDP
	    LOG_B_RAT=0.0D0


vsebyj_x_v5.f

	      ED_FAC=2.0_LDP*T3/ED(I)
	      ED_FAC=2.0D0*T3/ED(I)

	      T_FAC=T3*( HDKT*(NU(ML)-EDGE_B(1)-1.5_LDP)/T(I) +
	      T_FAC=T3*( HDKT*(NU(ML)-EDGE_B(1)-1.5D0)/T(I) +


vsebyj_x_v6.f

	  IF(JREC(I) .NE. 0.0_LDP .AND. WSE_X(1,1) .NE. 0.0_LDP)THEN
	  IF(JREC(I) .NE. 0.0D0 .AND. WSE_X(1,1) .NE. 0.0D0)THEN

	    RECIP_B_ION=0.0_LDP
	    RECIP_B_ION=0.0D0

	    BSTIM=0.0_LDP
	    BSTIM=0.0D0

	      ED_FAC=2.0_LDP*T3/ED(I)
	      ED_FAC=2.0D0*T3/ED(I)

	1             HDKT*(EDGE_B(1)+1.5_LDP)/T(I) )/T(I) + T4*dJRECdT(I)
	1             HDKT*(EDGE_B(1)+1.5D0)/T(I) )/T(I) + T4*dJRECdT(I)


vsebyj_x_v7.f

	  IF(JREC(I) .NE. 0.0_LDP .AND. WSE_X(1,1) .NE. 0.0_LDP)THEN
	  IF(JREC(I) .NE. 0.0D0 .AND. WSE_X(1,1) .NE. 0.0D0)THEN

	    RECIP_B_ION=0.0_LDP
	    RECIP_B_ION=0.0D0

	    BSTIM=0.0_LDP
	    BSTIM=0.0D0

	      ED_FAC=2.0_LDP*T3/ED(I)
	      ED_FAC=2.0D0*T3/ED(I)

	1             HDKT*(EDGE_B(1)+1.5_LDP)/T(I) )/T(I) + T4*dJRECdT(I)
	1             HDKT*(EDGE_B(1)+1.5D0)/T(I) )/T(I) + T4*dJRECdT(I)


wr_asci_steq.f


write_cmat.f

	IF(FL .GT. 22.0_LDP .OR. FL .LE. 20.0_LDP)RETURN
	IF(FL .GT. 22.0D0 .OR. FL .LE. 20.0D0)RETURN


write_seq_time_file_v1.f


wr_level_links.f

